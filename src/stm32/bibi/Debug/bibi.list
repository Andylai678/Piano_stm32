
bibi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdcc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800bf80  0800bf80  0000cf80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c570  0800c570  00013058  2**0
                  CONTENTS
  4 .ARM          00000008  0800c570  0800c570  0000d570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c578  0800c578  00013058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c578  0800c578  0000d578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c57c  0800c57c  0000d57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00005058  20000000  0800c580  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013058  2**0
                  CONTENTS
 10 .bss          00001774  20005058  20005058  00013058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200067cc  200067cc  00013058  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016525  00000000  00000000  00013088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e05  00000000  00000000  000295ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c0  00000000  00000000  0002c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106e  00000000  00000000  0002d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027103  00000000  00000000  0002e8e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000198de  00000000  00000000  000559e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee3d3  00000000  00000000  0006f2c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d69a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e7c  00000000  00000000  0015d6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0016455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20005058 	.word	0x20005058
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bf64 	.word	0x0800bf64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000505c 	.word	0x2000505c
 80001ec:	0800bf64 	.word	0x0800bf64

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <LCD16_Init>:
static void lcd_write_4bits(uint8_t data);
static void lcd_pulse_enable(uint8_t data);
static void lcd_write_i2c(uint8_t data);
static void lcd_delay_us(uint32_t us);

void LCD16_Init(I2C_HandleTypeDef *hi2c) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    lcd_i2c = hi2c;
 8000f80:	4a1d      	ldr	r2, [pc, #116]	@ (8000ff8 <LCD16_Init+0x80>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]

    // Enable DWT for delay_us
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	@ (8000ffc <LCD16_Init+0x84>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000ffc <LCD16_Init+0x84>)
 8000f8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f90:	60d3      	str	r3, [r2, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	@ (8001000 <LCD16_Init+0x88>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1a      	ldr	r2, [pc, #104]	@ (8001000 <LCD16_Init+0x88>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6013      	str	r3, [r2, #0]

    HAL_Delay(50);
 8000f9e:	2032      	movs	r0, #50	@ 0x32
 8000fa0:	f002 fd62 	bl	8003a68 <HAL_Delay>

    lcd_write_4bits(0x30);
 8000fa4:	2030      	movs	r0, #48	@ 0x30
 8000fa6:	f000 f8c1 	bl	800112c <lcd_write_4bits>
    HAL_Delay(5);
 8000faa:	2005      	movs	r0, #5
 8000fac:	f002 fd5c 	bl	8003a68 <HAL_Delay>
    lcd_write_4bits(0x30);
 8000fb0:	2030      	movs	r0, #48	@ 0x30
 8000fb2:	f000 f8bb 	bl	800112c <lcd_write_4bits>
    HAL_Delay(1);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f002 fd56 	bl	8003a68 <HAL_Delay>
    lcd_write_4bits(0x30);
 8000fbc:	2030      	movs	r0, #48	@ 0x30
 8000fbe:	f000 f8b5 	bl	800112c <lcd_write_4bits>
    HAL_Delay(1);
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	f002 fd50 	bl	8003a68 <HAL_Delay>
    lcd_write_4bits(0x20);
 8000fc8:	2020      	movs	r0, #32
 8000fca:	f000 f8af 	bl	800112c <lcd_write_4bits>

    lcd_send_command(LCD_FUNCTION_SET | LCD_2LINE_MODE | LCD_5x8_DOTS);
 8000fce:	2028      	movs	r0, #40	@ 0x28
 8000fd0:	f000 f85d 	bl	800108e <lcd_send_command>
    lcd_send_command(LCD_DISPLAY_CONTROL | lcd_control);
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <LCD16_Init+0x8c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f855 	bl	800108e <lcd_send_command>
    LCD16_Clear();
 8000fe4:	f000 f810 	bl	8001008 <LCD16_Clear>
    lcd_send_command(LCD_ENTRY_MODE | 0x02);  // Cursor increment, no shift
 8000fe8:	2006      	movs	r0, #6
 8000fea:	f000 f850 	bl	800108e <lcd_send_command>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20005074 	.word	0x20005074
 8000ffc:	e000edf0 	.word	0xe000edf0
 8001000:	e0001000 	.word	0xe0001000
 8001004:	20000000 	.word	0x20000000

08001008 <LCD16_Clear>:

void LCD16_Clear(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
    lcd_send_command(LCD_CLEAR_DISPLAY);
 800100c:	2001      	movs	r0, #1
 800100e:	f000 f83e 	bl	800108e <lcd_send_command>
    HAL_Delay(2);
 8001012:	2002      	movs	r0, #2
 8001014:	f002 fd28 	bl	8003a68 <HAL_Delay>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <LCD16_SetCursor>:

void LCD16_SetCursor(uint8_t col, uint8_t row) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
    const uint8_t row_offsets[] = {0x00, 0x40};
 800102c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001030:	81bb      	strh	r3, [r7, #12]
    if (row > 1) row = 1;
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d901      	bls.n	800103c <LCD16_SetCursor+0x20>
 8001038:	2301      	movs	r3, #1
 800103a:	71bb      	strb	r3, [r7, #6]
    lcd_send_command(LCD_SET_DDRAM_ADDR | (col + row_offsets[row]));
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	3310      	adds	r3, #16
 8001040:	443b      	add	r3, r7
 8001042:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4413      	add	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b25b      	sxtb	r3, r3
 800104e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001052:	b25b      	sxtb	r3, r3
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f819 	bl	800108e <lcd_send_command>
}
 800105c:	bf00      	nop
 800105e:	3710      	adds	r7, #16
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <LCD16_PrintStr>:
void LCD16_StopBlink(void) {
    lcd_control &= ~LCD_BLINK_ON;
    lcd_send_command(LCD_DISPLAY_CONTROL | lcd_control);
}

void LCD16_PrintStr(const char *str) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800106c:	e006      	b.n	800107c <LCD16_PrintStr+0x18>
        lcd_send_data((uint8_t)*str++);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	607a      	str	r2, [r7, #4]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f817 	bl	80010aa <lcd_send_data>
    while (*str) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d1f4      	bne.n	800106e <LCD16_PrintStr+0xa>
    }
}
 8001084:	bf00      	nop
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <lcd_send_command>:

// -------------------------- Internal --------------------------

static void lcd_send_command(uint8_t cmd) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
    lcd_write(cmd, 0);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f000 f813 	bl	80010c8 <lcd_write>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <lcd_send_data>:

static void lcd_send_data(uint8_t data) {
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	71fb      	strb	r3, [r7, #7]
    lcd_write(data, LCD_REGISTER_SELECT);
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	2101      	movs	r1, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f805 	bl	80010c8 <lcd_write>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <lcd_write>:

static void lcd_write(uint8_t data, uint8_t mode) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	460a      	mov	r2, r1
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	71bb      	strb	r3, [r7, #6]
    uint8_t high = (data & 0xF0) | lcd_backlight | mode;
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	f023 030f 	bic.w	r3, r3, #15
 80010e0:	b25a      	sxtb	r2, r3
 80010e2:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <lcd_write+0x60>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b25b      	sxtb	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b25a      	sxtb	r2, r3
 80010ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	b25b      	sxtb	r3, r3
 80010f4:	73fb      	strb	r3, [r7, #15]
    uint8_t low  = ((data << 4) & 0xF0) | lcd_backlight | mode;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	011b      	lsls	r3, r3, #4
 80010fa:	b25a      	sxtb	r2, r3
 80010fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001128 <lcd_write+0x60>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b25a      	sxtb	r2, r3
 8001106:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800110a:	4313      	orrs	r3, r2
 800110c:	b25b      	sxtb	r3, r3
 800110e:	73bb      	strb	r3, [r7, #14]
    lcd_write_4bits(high);
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f80a 	bl	800112c <lcd_write_4bits>
    lcd_write_4bits(low);
 8001118:	7bbb      	ldrb	r3, [r7, #14]
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f806 	bl	800112c <lcd_write_4bits>
}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000001 	.word	0x20000001

0800112c <lcd_write_4bits>:

static void lcd_write_4bits(uint8_t data) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
    lcd_write_i2c(data);
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f000 f825 	bl	8001188 <lcd_write_i2c>
    lcd_pulse_enable(data);
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	4618      	mov	r0, r3
 8001142:	f000 f804 	bl	800114e <lcd_pulse_enable>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <lcd_pulse_enable>:

static void lcd_pulse_enable(uint8_t data) {
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	71fb      	strb	r3, [r7, #7]
    lcd_write_i2c(data | LCD_ENABLE_BIT);
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	b2db      	uxtb	r3, r3
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f811 	bl	8001188 <lcd_write_i2c>
    lcd_delay_us(20);
 8001166:	2014      	movs	r0, #20
 8001168:	f000 f822 	bl	80011b0 <lcd_delay_us>
    lcd_write_i2c(data & ~LCD_ENABLE_BIT);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f023 0304 	bic.w	r3, r3, #4
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f000 f807 	bl	8001188 <lcd_write_i2c>
    lcd_delay_us(20);
 800117a:	2014      	movs	r0, #20
 800117c:	f000 f818 	bl	80011b0 <lcd_delay_us>
}
 8001180:	bf00      	nop
 8001182:	3708      	adds	r7, #8
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <lcd_write_i2c>:

static void lcd_write_i2c(uint8_t data) {
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Master_Transmit(lcd_i2c, LCD_I2C_ADDR, &data, 1, 10);
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <lcd_write_i2c+0x24>)
 8001194:	6818      	ldr	r0, [r3, #0]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	230a      	movs	r3, #10
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	217e      	movs	r1, #126	@ 0x7e
 80011a0:	f003 fd42 	bl	8004c28 <HAL_I2C_Master_Transmit>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20005074 	.word	0x20005074

080011b0 <lcd_delay_us>:

static void lcd_delay_us(uint32_t us) {
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 80011b8:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <lcd_delay_us+0x40>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
    uint32_t delay = us * (SystemCoreClock / 1000000);
 80011be:	4b0d      	ldr	r3, [pc, #52]	@ (80011f4 <lcd_delay_us+0x44>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a0d      	ldr	r2, [pc, #52]	@ (80011f8 <lcd_delay_us+0x48>)
 80011c4:	fba2 2303 	umull	r2, r3, r2, r3
 80011c8:	0c9a      	lsrs	r2, r3, #18
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < delay);
 80011d2:	bf00      	nop
 80011d4:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <lcd_delay_us+0x40>)
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	68ba      	ldr	r2, [r7, #8]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d8f8      	bhi.n	80011d4 <lcd_delay_us+0x24>
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e0001000 	.word	0xe0001000
 80011f4:	20004e74 	.word	0x20004e74
 80011f8:	431bde83 	.word	0x431bde83

080011fc <LCD16_PrintChar>:
void LCD16_PrintChar(char c) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    char str[2] = {c, '\0'};
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	733b      	strb	r3, [r7, #12]
 800120a:	2300      	movs	r3, #0
 800120c:	737b      	strb	r3, [r7, #13]
    LCD16_PrintStr(str);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff ff26 	bl	8001064 <LCD16_PrintStr>
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <Read_Potentiometer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int pitch_offsets[10] = {0};  // 每�?��?�鍵??�音調�?�移�???-5 ~ +5�???
uint32_t Read_Potentiometer() {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001224:	4806      	ldr	r0, [pc, #24]	@ (8001240 <Read_Potentiometer+0x20>)
 8001226:	f002 fc87 	bl	8003b38 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 800122a:	2164      	movs	r1, #100	@ 0x64
 800122c:	4804      	ldr	r0, [pc, #16]	@ (8001240 <Read_Potentiometer+0x20>)
 800122e:	f002 fd55 	bl	8003cdc <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8001232:	4803      	ldr	r0, [pc, #12]	@ (8001240 <Read_Potentiometer+0x20>)
 8001234:	f002 fddd 	bl	8003df2 <HAL_ADC_GetValue>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20005078 	.word	0x20005078

08001244 <Match_Song_Name>:
const char *known_song_names[10] = {
    "let it be", "imagine", "yesterday", "hey jude", "hello",
    "shape of you", "perfect", "believer", "counting stars", "faded"
};

int Match_Song_Name(const char *name) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 10; i++) {
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e00f      	b.n	8001272 <Match_Song_Name+0x2e>
        if (strstr(name, known_song_names[i]) != NULL) {
 8001252:	4a0c      	ldr	r2, [pc, #48]	@ (8001284 <Match_Song_Name+0x40>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	4619      	mov	r1, r3
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f007 fe4b 	bl	8008ef8 <strstr>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <Match_Song_Name+0x28>
            return i;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	e007      	b.n	800127c <Match_Song_Name+0x38>
    for (int i = 0; i < 10; i++) {
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	3301      	adds	r3, #1
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2b09      	cmp	r3, #9
 8001276:	ddec      	ble.n	8001252 <Match_Song_Name+0xe>
        }
    }
    return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	3710      	adds	r7, #16
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20004e4c 	.word	0x20004e4c

08001288 <Read_Keypad>:

char Read_Keypad(void)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b08d      	sub	sp, #52	@ 0x34
 800128c:	af00      	add	r7, sp, #0
    const char keymap[4][4] = {
 800128e:	4b36      	ldr	r3, [pc, #216]	@ (8001368 <Read_Keypad+0xe0>)
 8001290:	f107 0414 	add.w	r4, r7, #20
 8001294:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        {'4', '5', '6', 'B'},
        {'7', '8', '9', 'C'},
        {'*', '0', '#', 'D'}
    };

    uint16_t row_pins[4] = {GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4};
 800129a:	4a34      	ldr	r2, [pc, #208]	@ (800136c <Read_Keypad+0xe4>)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012a4:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t col_pins[4] = {GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4};
 80012a8:	4a30      	ldr	r2, [pc, #192]	@ (800136c <Read_Keypad+0xe4>)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b0:	e883 0003 	stmia.w	r3, {r0, r1}

    for (int row = 0; row < 4; row++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012b8:	e04e      	b.n	8001358 <Read_Keypad+0xd0>
    {
        // �??? ?  ???  ? ?�� HIGH
        for (int i = 0; i < 4; i++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012be:	e00d      	b.n	80012dc <Read_Keypad+0x54>
        {
            HAL_GPIO_WritePin(GPIOA, row_pins[i], GPIO_PIN_SET);
 80012c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	3330      	adds	r3, #48	@ 0x30
 80012c6:	443b      	add	r3, r7
 80012c8:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	4827      	ldr	r0, [pc, #156]	@ (8001370 <Read_Keypad+0xe8>)
 80012d2:	f003 fb31 	bl	8004938 <HAL_GPIO_WritePin>
        for (int i = 0; i < 4; i++)
 80012d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012d8:	3301      	adds	r3, #1
 80012da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012de:	2b03      	cmp	r3, #3
 80012e0:	ddee      	ble.n	80012c0 <Read_Keypad+0x38>
        }

        // 將當??  ?  ?? LOW
        HAL_GPIO_WritePin(GPIOA, row_pins[row], GPIO_PIN_RESET);
 80012e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	3330      	adds	r3, #48	@ 0x30
 80012e8:	443b      	add	r3, r7
 80012ea:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80012ee:	2200      	movs	r2, #0
 80012f0:	4619      	mov	r1, r3
 80012f2:	481f      	ldr	r0, [pc, #124]	@ (8001370 <Read_Keypad+0xe8>)
 80012f4:	f003 fb20 	bl	8004938 <HAL_GPIO_WritePin>

        // ??  ?  ???  ??
        for (int col = 0; col < 4; col++)
 80012f8:	2300      	movs	r3, #0
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80012fc:	e026      	b.n	800134c <Read_Keypad+0xc4>
        {
            if (HAL_GPIO_ReadPin(GPIOB, col_pins[col]) == GPIO_PIN_RESET)
 80012fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	3330      	adds	r3, #48	@ 0x30
 8001304:	443b      	add	r3, r7
 8001306:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 800130a:	4619      	mov	r1, r3
 800130c:	4819      	ldr	r0, [pc, #100]	@ (8001374 <Read_Keypad+0xec>)
 800130e:	f003 fafb 	bl	8004908 <HAL_GPIO_ReadPin>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d116      	bne.n	8001346 <Read_Keypad+0xbe>
            {
                // �??? ?  ? ?��?  ??  ? ?��??  ? 次觸?�� ??????????????
                while (HAL_GPIO_ReadPin(GPIOB, col_pins[col]) == GPIO_PIN_RESET);
 8001318:	bf00      	nop
 800131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	3330      	adds	r3, #48	@ 0x30
 8001320:	443b      	add	r3, r7
 8001322:	f833 3c2c 	ldrh.w	r3, [r3, #-44]
 8001326:	4619      	mov	r1, r3
 8001328:	4812      	ldr	r0, [pc, #72]	@ (8001374 <Read_Keypad+0xec>)
 800132a:	f003 faed 	bl	8004908 <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d0f2      	beq.n	800131a <Read_Keypad+0x92>
                return keymap[row][col];
 8001334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	3330      	adds	r3, #48	@ 0x30
 800133a:	19da      	adds	r2, r3, r7
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	4413      	add	r3, r2
 8001340:	3b1c      	subs	r3, #28
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	e00c      	b.n	8001360 <Read_Keypad+0xd8>
        for (int col = 0; col < 4; col++)
 8001346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001348:	3301      	adds	r3, #1
 800134a:	627b      	str	r3, [r7, #36]	@ 0x24
 800134c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134e:	2b03      	cmp	r3, #3
 8001350:	ddd5      	ble.n	80012fe <Read_Keypad+0x76>
    for (int row = 0; row < 4; row++)
 8001352:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001354:	3301      	adds	r3, #1
 8001356:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800135a:	2b03      	cmp	r3, #3
 800135c:	ddad      	ble.n	80012ba <Read_Keypad+0x32>
            }
        }
    }

    return 0; // �??? ?  ? ?���??? ?  ??
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3734      	adds	r7, #52	@ 0x34
 8001364:	46bd      	mov	sp, r7
 8001366:	bd90      	pop	{r4, r7, pc}
 8001368:	0800bff0 	.word	0x0800bff0
 800136c:	0800c000 	.word	0x0800c000
 8001370:	40020000 	.word	0x40020000
 8001374:	40020400 	.word	0x40020400

08001378 <LCD16_PrintNoteStr>:
void LCD16_PrintNoteStr(const char* note) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    // �??? ? ?�� ??
    if (note_index < MAX_NOTE_HISTORY) {
        strncpy(note_history[note_index], note, 3);
 8001380:	4b23      	ldr	r3, [pc, #140]	@ (8001410 <LCD16_PrintNoteStr+0x98>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4a23      	ldr	r2, [pc, #140]	@ (8001414 <LCD16_PrintNoteStr+0x9c>)
 8001388:	4413      	add	r3, r2
 800138a:	2203      	movs	r2, #3
 800138c:	6879      	ldr	r1, [r7, #4]
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fd9f 	bl	8008ed2 <strncpy>
        note_history[note_index][3] = '\0';  // 保險�??? ?  ?  ?  ? �??? ??
 8001394:	4b1e      	ldr	r3, [pc, #120]	@ (8001410 <LCD16_PrintNoteStr+0x98>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4a1e      	ldr	r2, [pc, #120]	@ (8001414 <LCD16_PrintNoteStr+0x9c>)
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	2200      	movs	r2, #0
 80013a0:	70da      	strb	r2, [r3, #3]
        note_index++;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001410 <LCD16_PrintNoteStr+0x98>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b19      	ldr	r3, [pc, #100]	@ (8001410 <LCD16_PrintNoteStr+0x98>)
 80013ac:	701a      	strb	r2, [r3, #0]
    }

    // 顯示?   LCD
    if (lcd_col > 15) {
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <LCD16_PrintNoteStr+0xa0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d911      	bls.n	80013da <LCD16_PrintNoteStr+0x62>
        lcd_col = 0;
 80013b6:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <LCD16_PrintNoteStr+0xa0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
        lcd_row++;
 80013bc:	4b17      	ldr	r3, [pc, #92]	@ (800141c <LCD16_PrintNoteStr+0xa4>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b15      	ldr	r3, [pc, #84]	@ (800141c <LCD16_PrintNoteStr+0xa4>)
 80013c6:	701a      	strb	r2, [r3, #0]
        if (lcd_row >= 2) {
 80013c8:	4b14      	ldr	r3, [pc, #80]	@ (800141c <LCD16_PrintNoteStr+0xa4>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d904      	bls.n	80013da <LCD16_PrintNoteStr+0x62>
            lcd_row = 0;
 80013d0:	4b12      	ldr	r3, [pc, #72]	@ (800141c <LCD16_PrintNoteStr+0xa4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]
            LCD16_Clear();
 80013d6:	f7ff fe17 	bl	8001008 <LCD16_Clear>
        }
    }

    LCD16_SetCursor(lcd_col, lcd_row);
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <LCD16_PrintNoteStr+0xa0>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4a0f      	ldr	r2, [pc, #60]	@ (800141c <LCD16_PrintNoteStr+0xa4>)
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fe19 	bl	800101c <LCD16_SetCursor>
    LCD16_PrintStr(note);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe3a 	bl	8001064 <LCD16_PrintStr>
    lcd_col += strlen(note);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7fe ff5d 	bl	80002b0 <strlen>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <LCD16_PrintNoteStr+0xa0>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <LCD16_PrintNoteStr+0xa0>)
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20006654 	.word	0x20006654
 8001414:	200056b4 	.word	0x200056b4
 8001418:	200056b0 	.word	0x200056b0
 800141c:	200056b1 	.word	0x200056b1

08001420 <PlayNoteHistory>:

void PlayNoteHistory() {
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
    LCD16_Clear();
 8001426:	f7ff fdef 	bl	8001008 <LCD16_Clear>
    uint8_t cursor_x = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	73fb      	strb	r3, [r7, #15]
    uint8_t cursor_y = 0;
 800142e:	2300      	movs	r3, #0
 8001430:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < note_index; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	737b      	strb	r3, [r7, #13]
 8001436:	e0f9      	b.n	800162c <PlayNoteHistory+0x20c>
        const char* note = note_history[i];
 8001438:	7b7b      	ldrb	r3, [r7, #13]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4a86      	ldr	r2, [pc, #536]	@ (8001658 <PlayNoteHistory+0x238>)
 800143e:	4413      	add	r3, r2
 8001440:	60bb      	str	r3, [r7, #8]
        uint8_t j;

        // ?  ?  �??? ?  ? ?��??? index
        for (j = 0; j < 10; j++) {
 8001442:	2300      	movs	r3, #0
 8001444:	733b      	strb	r3, [r7, #12]
 8001446:	e066      	b.n	8001516 <PlayNoteHistory+0xf6>
            if ((strcmp(note, "0") == 0 && j == 0) ||
 8001448:	4984      	ldr	r1, [pc, #528]	@ (800165c <PlayNoteHistory+0x23c>)
 800144a:	68b8      	ldr	r0, [r7, #8]
 800144c:	f7fe fed0 	bl	80001f0 <strcmp>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d102      	bne.n	800145c <PlayNoteHistory+0x3c>
 8001456:	7b3b      	ldrb	r3, [r7, #12]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d05f      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "1") == 0 && j == 1) ||
 800145c:	4980      	ldr	r1, [pc, #512]	@ (8001660 <PlayNoteHistory+0x240>)
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f7fe fec6 	bl	80001f0 <strcmp>
 8001464:	4603      	mov	r3, r0
            if ((strcmp(note, "0") == 0 && j == 0) ||
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <PlayNoteHistory+0x50>
                (strcmp(note, "1") == 0 && j == 1) ||
 800146a:	7b3b      	ldrb	r3, [r7, #12]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d055      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "2") == 0 && j == 2) ||
 8001470:	497c      	ldr	r1, [pc, #496]	@ (8001664 <PlayNoteHistory+0x244>)
 8001472:	68b8      	ldr	r0, [r7, #8]
 8001474:	f7fe febc 	bl	80001f0 <strcmp>
 8001478:	4603      	mov	r3, r0
                (strcmp(note, "1") == 0 && j == 1) ||
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <PlayNoteHistory+0x64>
                (strcmp(note, "2") == 0 && j == 2) ||
 800147e:	7b3b      	ldrb	r3, [r7, #12]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d04b      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "3") == 0 && j == 3) ||
 8001484:	4978      	ldr	r1, [pc, #480]	@ (8001668 <PlayNoteHistory+0x248>)
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f7fe feb2 	bl	80001f0 <strcmp>
 800148c:	4603      	mov	r3, r0
                (strcmp(note, "2") == 0 && j == 2) ||
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <PlayNoteHistory+0x78>
                (strcmp(note, "3") == 0 && j == 3) ||
 8001492:	7b3b      	ldrb	r3, [r7, #12]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d041      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "4") == 0 && j == 4) ||
 8001498:	4974      	ldr	r1, [pc, #464]	@ (800166c <PlayNoteHistory+0x24c>)
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f7fe fea8 	bl	80001f0 <strcmp>
 80014a0:	4603      	mov	r3, r0
                (strcmp(note, "3") == 0 && j == 3) ||
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <PlayNoteHistory+0x8c>
                (strcmp(note, "4") == 0 && j == 4) ||
 80014a6:	7b3b      	ldrb	r3, [r7, #12]
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d037      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "5") == 0 && j == 5) ||
 80014ac:	4970      	ldr	r1, [pc, #448]	@ (8001670 <PlayNoteHistory+0x250>)
 80014ae:	68b8      	ldr	r0, [r7, #8]
 80014b0:	f7fe fe9e 	bl	80001f0 <strcmp>
 80014b4:	4603      	mov	r3, r0
                (strcmp(note, "4") == 0 && j == 4) ||
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <PlayNoteHistory+0xa0>
                (strcmp(note, "5") == 0 && j == 5) ||
 80014ba:	7b3b      	ldrb	r3, [r7, #12]
 80014bc:	2b05      	cmp	r3, #5
 80014be:	d02d      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "6") == 0 && j == 6) ||
 80014c0:	496c      	ldr	r1, [pc, #432]	@ (8001674 <PlayNoteHistory+0x254>)
 80014c2:	68b8      	ldr	r0, [r7, #8]
 80014c4:	f7fe fe94 	bl	80001f0 <strcmp>
 80014c8:	4603      	mov	r3, r0
                (strcmp(note, "5") == 0 && j == 5) ||
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <PlayNoteHistory+0xb4>
                (strcmp(note, "6") == 0 && j == 6) ||
 80014ce:	7b3b      	ldrb	r3, [r7, #12]
 80014d0:	2b06      	cmp	r3, #6
 80014d2:	d023      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "7") == 0 && j == 7) ||
 80014d4:	4968      	ldr	r1, [pc, #416]	@ (8001678 <PlayNoteHistory+0x258>)
 80014d6:	68b8      	ldr	r0, [r7, #8]
 80014d8:	f7fe fe8a 	bl	80001f0 <strcmp>
 80014dc:	4603      	mov	r3, r0
                (strcmp(note, "6") == 0 && j == 6) ||
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <PlayNoteHistory+0xc8>
                (strcmp(note, "7") == 0 && j == 7) ||
 80014e2:	7b3b      	ldrb	r3, [r7, #12]
 80014e4:	2b07      	cmp	r3, #7
 80014e6:	d019      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "8") == 0 && j == 8) ||
 80014e8:	4964      	ldr	r1, [pc, #400]	@ (800167c <PlayNoteHistory+0x25c>)
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f7fe fe80 	bl	80001f0 <strcmp>
 80014f0:	4603      	mov	r3, r0
                (strcmp(note, "7") == 0 && j == 7) ||
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <PlayNoteHistory+0xdc>
                (strcmp(note, "8") == 0 && j == 8) ||
 80014f6:	7b3b      	ldrb	r3, [r7, #12]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d00f      	beq.n	800151c <PlayNoteHistory+0xfc>
                (strcmp(note, "9") == 0 && j == 9)) {
 80014fc:	4960      	ldr	r1, [pc, #384]	@ (8001680 <PlayNoteHistory+0x260>)
 80014fe:	68b8      	ldr	r0, [r7, #8]
 8001500:	f7fe fe76 	bl	80001f0 <strcmp>
 8001504:	4603      	mov	r3, r0
                (strcmp(note, "8") == 0 && j == 8) ||
 8001506:	2b00      	cmp	r3, #0
 8001508:	d102      	bne.n	8001510 <PlayNoteHistory+0xf0>
                (strcmp(note, "9") == 0 && j == 9)) {
 800150a:	7b3b      	ldrb	r3, [r7, #12]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d005      	beq.n	800151c <PlayNoteHistory+0xfc>
        for (j = 0; j < 10; j++) {
 8001510:	7b3b      	ldrb	r3, [r7, #12]
 8001512:	3301      	adds	r3, #1
 8001514:	733b      	strb	r3, [r7, #12]
 8001516:	7b3b      	ldrb	r3, [r7, #12]
 8001518:	2b09      	cmp	r3, #9
 800151a:	d995      	bls.n	8001448 <PlayNoteHistory+0x28>
                break;
            }
        }

        if (j < 10) {
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	2b09      	cmp	r3, #9
 8001520:	f200 8081 	bhi.w	8001626 <PlayNoteHistory+0x206>
        	float adjusted_freq = freq[j] * pow(2.0f, pitch_offsets[j] / 12.0f);
 8001524:	7b3b      	ldrb	r3, [r7, #12]
 8001526:	4a57      	ldr	r2, [pc, #348]	@ (8001684 <PlayNoteHistory+0x264>)
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	4413      	add	r3, r2
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f82a 	bl	8000588 <__aeabi_f2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	7b3b      	ldrb	r3, [r7, #12]
 800153a:	4a53      	ldr	r2, [pc, #332]	@ (8001688 <PlayNoteHistory+0x268>)
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	ee07 3a90 	vmov	s15, r3
 8001544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001548:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 800154c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001550:	ee16 0a90 	vmov	r0, s13
 8001554:	f7ff f818 	bl	8000588 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b11 	vmov	d1, r2, r3
 8001560:	ed9f 0b3b 	vldr	d0, [pc, #236]	@ 8001650 <PlayNoteHistory+0x230>
 8001564:	f009 fd9e 	bl	800b0a4 <pow>
 8001568:	ec53 2b10 	vmov	r2, r3, d0
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f862 	bl	8000638 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb34 	bl	8000be8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	607b      	str	r3, [r7, #4]
        	__HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 8001584:	eddf 6a41 	vldr	s13, [pc, #260]	@ 800168c <PlayNoteHistory+0x26c>
 8001588:	ed97 7a01 	vldr	s14, [r7, #4]
 800158c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001590:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001594:	4b3e      	ldr	r3, [pc, #248]	@ (8001690 <PlayNoteHistory+0x270>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	ee17 2a90 	vmov	r2, s15
 800159c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800159e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800168c <PlayNoteHistory+0x26c>
 80015a2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ae:	ee17 2a90 	vmov	r2, s15
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <PlayNoteHistory+0x270>)
 80015b4:	60da      	str	r2, [r3, #12]
        	int width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 80015b6:	eddf 6a35 	vldr	s13, [pc, #212]	@ 800168c <PlayNoteHistory+0x26c>
 80015ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80015be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ce:	ee17 3a90 	vmov	r3, s15
 80015d2:	603b      	str	r3, [r7, #0]

            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 80015d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001690 <PlayNoteHistory+0x270>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	63da      	str	r2, [r3, #60]	@ 0x3c

            // 顯示?  ?  ?? 游�?? ? �???
            LCD16_SetCursor(cursor_x, cursor_y);
 80015dc:	7bba      	ldrb	r2, [r7, #14]
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fd1a 	bl	800101c <LCD16_SetCursor>
            LCD16_PrintStr(note);
 80015e8:	68b8      	ldr	r0, [r7, #8]
 80015ea:	f7ff fd3b 	bl	8001064 <LCD16_PrintStr>

            // �??? ? 游�?? ? �???
            cursor_x += 1;
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]

            // ??  ?  ?  ?  ??
            if (cursor_x > 15) {
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	d904      	bls.n	8001604 <PlayNoteHistory+0x1e4>
                cursor_x = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]
                cursor_y++;
 80015fe:	7bbb      	ldrb	r3, [r7, #14]
 8001600:	3301      	adds	r3, #1
 8001602:	73bb      	strb	r3, [r7, #14]
            }
            if (cursor_y > 1) {
 8001604:	7bbb      	ldrb	r3, [r7, #14]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d909      	bls.n	800161e <PlayNoteHistory+0x1fe>
                HAL_Delay(300);
 800160a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800160e:	f002 fa2b 	bl	8003a68 <HAL_Delay>
                LCD16_Clear();
 8001612:	f7ff fcf9 	bl	8001008 <LCD16_Clear>
                cursor_x = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	73fb      	strb	r3, [r7, #15]
                cursor_y = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	73bb      	strb	r3, [r7, #14]
            }

            HAL_Delay(300);
 800161e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001622:	f002 fa21 	bl	8003a68 <HAL_Delay>
    for (uint8_t i = 0; i < note_index; i++) {
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	3301      	adds	r3, #1
 800162a:	737b      	strb	r3, [r7, #13]
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <PlayNoteHistory+0x274>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	7b7a      	ldrb	r2, [r7, #13]
 8001632:	429a      	cmp	r2, r3
 8001634:	f4ff af00 	bcc.w	8001438 <PlayNoteHistory+0x18>
        }
    }

    // ?  ?  �??? ?  ? ?���??? ? ?��?  ?
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <PlayNoteHistory+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2200      	movs	r2, #0
 800163e:	63da      	str	r2, [r3, #60]	@ 0x3c
    LCD16_Clear();
 8001640:	f7ff fce2 	bl	8001008 <LCD16_Clear>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bdb0      	pop	{r4, r5, r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	00000000 	.word	0x00000000
 8001654:	40000000 	.word	0x40000000
 8001658:	200056b4 	.word	0x200056b4
 800165c:	0800c008 	.word	0x0800c008
 8001660:	0800c00c 	.word	0x0800c00c
 8001664:	0800c010 	.word	0x0800c010
 8001668:	0800c014 	.word	0x0800c014
 800166c:	0800c018 	.word	0x0800c018
 8001670:	0800c01c 	.word	0x0800c01c
 8001674:	0800c020 	.word	0x0800c020
 8001678:	0800c024 	.word	0x0800c024
 800167c:	0800c028 	.word	0x0800c028
 8001680:	0800c02c 	.word	0x0800c02c
 8001684:	20000004 	.word	0x20000004
 8001688:	20005688 	.word	0x20005688
 800168c:	49742400 	.word	0x49742400
 8001690:	20005114 	.word	0x20005114
 8001694:	20006654 	.word	0x20006654

08001698 <Play_Song>:

void Play_Song(const char *notes) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	@ 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
    LCD16_Clear();
 80016a0:	f7ff fcb2 	bl	8001008 <LCD16_Clear>
    uint8_t lcd_col = 0, lcd_row = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80016aa:	2300      	movs	r3, #0
 80016ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    LCD16_SetCursor(0, 0);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2000      	movs	r0, #0
 80016b4:	f7ff fcb2 	bl	800101c <LCD16_SetCursor>
    LCD16_PrintStr("Playing...");
 80016b8:	488a      	ldr	r0, [pc, #552]	@ (80018e4 <Play_Song+0x24c>)
 80016ba:	f7ff fcd3 	bl	8001064 <LCD16_PrintStr>
    LCD16_SetCursor(0, 1);
 80016be:	2101      	movs	r1, #1
 80016c0:	2000      	movs	r0, #0
 80016c2:	f7ff fcab 	bl	800101c <LCD16_SetCursor>
    LCD16_PrintStr("#=Stop");
 80016c6:	4888      	ldr	r0, [pc, #544]	@ (80018e8 <Play_Song+0x250>)
 80016c8:	f7ff fccc 	bl	8001064 <LCD16_PrintStr>

    HAL_Delay(1000);
 80016cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016d0:	f002 f9ca 	bl	8003a68 <HAL_Delay>
    LCD16_Clear();
 80016d4:	f7ff fc98 	bl	8001008 <LCD16_Clear>

    char buffer[10];
    const char *ptr = notes;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t interrupted = 0;
 80016dc:	2300      	movs	r3, #0
 80016de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    while (*ptr && !interrupted) {
 80016e2:	e0da      	b.n	800189a <Play_Song+0x202>
        while (*ptr == ' ') ptr++;
 80016e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016e6:	3301      	adds	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d0f8      	beq.n	80016e4 <Play_Song+0x4c>
        if (!*ptr) break;
 80016f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f000 80d9 	beq.w	80018ae <Play_Song+0x216>

        char note = *ptr++;
 80016fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	77fb      	strb	r3, [r7, #31]
        if (note < '0' || note > '9') continue;
 8001706:	7ffb      	ldrb	r3, [r7, #31]
 8001708:	2b2f      	cmp	r3, #47	@ 0x2f
 800170a:	f240 80c5 	bls.w	8001898 <Play_Song+0x200>
 800170e:	7ffb      	ldrb	r3, [r7, #31]
 8001710:	2b39      	cmp	r3, #57	@ 0x39
 8001712:	f200 80c1 	bhi.w	8001898 <Play_Song+0x200>

        int duration = 400;
 8001716:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800171a:	623b      	str	r3, [r7, #32]
        if (*ptr == ':') {
 800171c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b3a      	cmp	r3, #58	@ 0x3a
 8001722:	d113      	bne.n	800174c <Play_Song+0xb4>
            ptr++;
 8001724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001726:	3301      	adds	r3, #1
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
            char duration_char = *ptr++;
 800172a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	77bb      	strb	r3, [r7, #30]
            if (duration_char == '8') duration = 200;
 8001734:	7fbb      	ldrb	r3, [r7, #30]
 8001736:	2b38      	cmp	r3, #56	@ 0x38
 8001738:	d102      	bne.n	8001740 <Play_Song+0xa8>
 800173a:	23c8      	movs	r3, #200	@ 0xc8
 800173c:	623b      	str	r3, [r7, #32]
 800173e:	e005      	b.n	800174c <Play_Song+0xb4>
            else if (duration_char == '4') duration = 400;
 8001740:	7fbb      	ldrb	r3, [r7, #30]
 8001742:	2b34      	cmp	r3, #52	@ 0x34
 8001744:	d102      	bne.n	800174c <Play_Song+0xb4>
 8001746:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800174a:	623b      	str	r3, [r7, #32]
        }

        uint8_t index = note - '0';
 800174c:	7ffb      	ldrb	r3, [r7, #31]
 800174e:	3b30      	subs	r3, #48	@ 0x30
 8001750:	777b      	strb	r3, [r7, #29]
        __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / freq[index]));
 8001752:	7f7b      	ldrb	r3, [r7, #29]
 8001754:	4a65      	ldr	r2, [pc, #404]	@ (80018ec <Play_Song+0x254>)
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	4413      	add	r3, r2
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80018f0 <Play_Song+0x258>
 8001762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800176a:	4b62      	ldr	r3, [pc, #392]	@ (80018f4 <Play_Song+0x25c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	ee17 2a90 	vmov	r2, s15
 8001772:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001774:	7f7b      	ldrb	r3, [r7, #29]
 8001776:	4a5d      	ldr	r2, [pc, #372]	@ (80018ec <Play_Song+0x254>)
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	ed93 7a00 	vldr	s14, [r3]
 8001780:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80018f0 <Play_Song+0x258>
 8001784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178c:	ee17 2a90 	vmov	r2, s15
 8001790:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <Play_Song+0x25c>)
 8001792:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (int)(CLOCK_FREQ / freq[index] / 2));
 8001794:	7f7b      	ldrb	r3, [r7, #29]
 8001796:	4a55      	ldr	r2, [pc, #340]	@ (80018ec <Play_Song+0x254>)
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	4413      	add	r3, r2
 800179c:	edd3 7a00 	vldr	s15, [r3]
 80017a0:	eddf 6a53 	vldr	s13, [pc, #332]	@ 80018f0 <Play_Song+0x258>
 80017a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80017a8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b4:	4b4f      	ldr	r3, [pc, #316]	@ (80018f4 <Play_Song+0x25c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee17 2a90 	vmov	r2, s15
 80017bc:	63da      	str	r2, [r3, #60]	@ 0x3c

        // 顯示?���???
        buffer[0] = note;
 80017be:	7ffb      	ldrb	r3, [r7, #31]
 80017c0:	733b      	strb	r3, [r7, #12]
        buffer[1] = '\0';
 80017c2:	2300      	movs	r3, #0
 80017c4:	737b      	strb	r3, [r7, #13]
        LCD16_SetCursor(lcd_col, lcd_row);
 80017c6:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80017ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc23 	bl	800101c <LCD16_SetCursor>
        LCD16_PrintStr(buffer);
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff fc42 	bl	8001064 <LCD16_PrintStr>

        lcd_col++;
 80017e0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	3301      	adds	r3, #1
 80017e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (lcd_col >= 16) {
 80017ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ee:	2b0f      	cmp	r3, #15
 80017f0:	d914      	bls.n	800181c <Play_Song+0x184>
            lcd_col = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            lcd_row++;
 80017f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80017fc:	3301      	adds	r3, #1
 80017fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            if (lcd_row >= 2) {
 8001802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001806:	2b01      	cmp	r3, #1
 8001808:	d908      	bls.n	800181c <Play_Song+0x184>
                HAL_Delay(300);       // 給使?��?��???��?��??
 800180a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800180e:	f002 f92b 	bl	8003a68 <HAL_Delay>
                LCD16_Clear();
 8001812:	f7ff fbf9 	bl	8001008 <LCD16_Clear>
                lcd_row = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }

        // ?��?��等�?�並?��中斷
        uint32_t start_time = HAL_GetTick();
 800181c:	f002 f918 	bl	8003a50 <HAL_GetTick>
 8001820:	61b8      	str	r0, [r7, #24]
        while ((HAL_GetTick() - start_time) < duration && !interrupted) {
 8001822:	e00a      	b.n	800183a <Play_Song+0x1a2>
            if (Read_Keypad() == '#') interrupted = 1;
 8001824:	f7ff fd30 	bl	8001288 <Read_Keypad>
 8001828:	4603      	mov	r3, r0
 800182a:	2b23      	cmp	r3, #35	@ 0x23
 800182c:	d102      	bne.n	8001834 <Play_Song+0x19c>
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            HAL_Delay(10);
 8001834:	200a      	movs	r0, #10
 8001836:	f002 f917 	bl	8003a68 <HAL_Delay>
        while ((HAL_GetTick() - start_time) < duration && !interrupted) {
 800183a:	f002 f909 	bl	8003a50 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	1ad2      	subs	r2, r2, r3
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	429a      	cmp	r2, r3
 8001848:	d203      	bcs.n	8001852 <Play_Song+0x1ba>
 800184a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0e8      	beq.n	8001824 <Play_Song+0x18c>
        }

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001852:	4b28      	ldr	r3, [pc, #160]	@ (80018f4 <Play_Song+0x25c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2200      	movs	r2, #0
 8001858:	63da      	str	r2, [r3, #60]	@ 0x3c

        if (!interrupted) {
 800185a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800185e:	2b00      	cmp	r3, #0
 8001860:	d11b      	bne.n	800189a <Play_Song+0x202>
            start_time = HAL_GetTick();
 8001862:	f002 f8f5 	bl	8003a50 <HAL_GetTick>
 8001866:	61b8      	str	r0, [r7, #24]
            while ((HAL_GetTick() - start_time) < 50 && !interrupted) {
 8001868:	e00a      	b.n	8001880 <Play_Song+0x1e8>
                if (Read_Keypad() == '#') interrupted = 1;
 800186a:	f7ff fd0d 	bl	8001288 <Read_Keypad>
 800186e:	4603      	mov	r3, r0
 8001870:	2b23      	cmp	r3, #35	@ 0x23
 8001872:	d102      	bne.n	800187a <Play_Song+0x1e2>
 8001874:	2301      	movs	r3, #1
 8001876:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                HAL_Delay(10);
 800187a:	200a      	movs	r0, #10
 800187c:	f002 f8f4 	bl	8003a68 <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 50 && !interrupted) {
 8001880:	f002 f8e6 	bl	8003a50 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b31      	cmp	r3, #49	@ 0x31
 800188c:	d805      	bhi.n	800189a <Play_Song+0x202>
 800188e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001892:	2b00      	cmp	r3, #0
 8001894:	d0e9      	beq.n	800186a <Play_Song+0x1d2>
 8001896:	e000      	b.n	800189a <Play_Song+0x202>
        if (note < '0' || note > '9') continue;
 8001898:	bf00      	nop
    while (*ptr && !interrupted) {
 800189a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d006      	beq.n	80018b0 <Play_Song+0x218>
 80018a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f43f af1f 	beq.w	80016ea <Play_Song+0x52>
 80018ac:	e000      	b.n	80018b0 <Play_Song+0x218>
        if (!*ptr) break;
 80018ae:	bf00      	nop
            }
        }
    }

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80018b0:	4b10      	ldr	r3, [pc, #64]	@ (80018f4 <Play_Song+0x25c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    LCD16_Clear();
 80018b8:	f7ff fba6 	bl	8001008 <LCD16_Clear>
    LCD16_PrintStr(interrupted ? "Stopped!" : "Finished!");
 80018bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <Play_Song+0x230>
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <Play_Song+0x260>)
 80018c6:	e000      	b.n	80018ca <Play_Song+0x232>
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <Play_Song+0x264>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff fbca 	bl	8001064 <LCD16_PrintStr>
    HAL_Delay(500);
 80018d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018d4:	f002 f8c8 	bl	8003a68 <HAL_Delay>
    LCD16_Clear();
 80018d8:	f7ff fb96 	bl	8001008 <LCD16_Clear>
}
 80018dc:	bf00      	nop
 80018de:	3730      	adds	r7, #48	@ 0x30
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	0800c030 	.word	0x0800c030
 80018e8:	0800c03c 	.word	0x0800c03c
 80018ec:	20000004 	.word	0x20000004
 80018f0:	49742400 	.word	0x49742400
 80018f4:	20005114 	.word	0x20005114
 80018f8:	0800c044 	.word	0x0800c044
 80018fc:	0800c050 	.word	0x0800c050

08001900 <Play_Song_With_Interrupt>:


uint8_t Play_Song_With_Interrupt(const char *notes) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	@ 0x28
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    LCD16_Clear();
 8001908:	f7ff fb7e 	bl	8001008 <LCD16_Clear>
    uint8_t lcd_col = 0, lcd_row = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001912:	2300      	movs	r3, #0
 8001914:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    char buffer[2];
    const char *ptr = notes;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	623b      	str	r3, [r7, #32]
    uint8_t interrupted = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	77fb      	strb	r3, [r7, #31]

    while (*ptr && !interrupted) {
 8001920:	e0d5      	b.n	8001ace <Play_Song_With_Interrupt+0x1ce>
        while (*ptr == ' ') ptr++;
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	3301      	adds	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b20      	cmp	r3, #32
 800192e:	d0f8      	beq.n	8001922 <Play_Song_With_Interrupt+0x22>
        if (!*ptr) break;
 8001930:	6a3b      	ldr	r3, [r7, #32]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	f000 80d3 	beq.w	8001ae0 <Play_Song_With_Interrupt+0x1e0>

        char note = *ptr++;
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	623a      	str	r2, [r7, #32]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	75fb      	strb	r3, [r7, #23]
        if (note < '0' || note > '9') continue;
 8001944:	7dfb      	ldrb	r3, [r7, #23]
 8001946:	2b2f      	cmp	r3, #47	@ 0x2f
 8001948:	f240 80c0 	bls.w	8001acc <Play_Song_With_Interrupt+0x1cc>
 800194c:	7dfb      	ldrb	r3, [r7, #23]
 800194e:	2b39      	cmp	r3, #57	@ 0x39
 8001950:	f200 80bc 	bhi.w	8001acc <Play_Song_With_Interrupt+0x1cc>

        int duration = 400;
 8001954:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001958:	61bb      	str	r3, [r7, #24]
        if (*ptr == ':') {
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b3a      	cmp	r3, #58	@ 0x3a
 8001960:	d113      	bne.n	800198a <Play_Song_With_Interrupt+0x8a>
            ptr++;
 8001962:	6a3b      	ldr	r3, [r7, #32]
 8001964:	3301      	adds	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
            char duration_char = *ptr++;
 8001968:	6a3b      	ldr	r3, [r7, #32]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	623a      	str	r2, [r7, #32]
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	75bb      	strb	r3, [r7, #22]
            if (duration_char == '8') duration = 200;
 8001972:	7dbb      	ldrb	r3, [r7, #22]
 8001974:	2b38      	cmp	r3, #56	@ 0x38
 8001976:	d102      	bne.n	800197e <Play_Song_With_Interrupt+0x7e>
 8001978:	23c8      	movs	r3, #200	@ 0xc8
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	e005      	b.n	800198a <Play_Song_With_Interrupt+0x8a>
            else if (duration_char == '4') duration = 400;
 800197e:	7dbb      	ldrb	r3, [r7, #22]
 8001980:	2b34      	cmp	r3, #52	@ 0x34
 8001982:	d102      	bne.n	800198a <Play_Song_With_Interrupt+0x8a>
 8001984:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001988:	61bb      	str	r3, [r7, #24]
        }

        // ?��?��?���???
        uint8_t index = note - '0';
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	3b30      	subs	r3, #48	@ 0x30
 800198e:	757b      	strb	r3, [r7, #21]
        __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / freq[index]));
 8001990:	7d7b      	ldrb	r3, [r7, #21]
 8001992:	4a58      	ldr	r2, [pc, #352]	@ (8001af4 <Play_Song_With_Interrupt+0x1f4>)
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8001af8 <Play_Song_With_Interrupt+0x1f8>
 80019a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019a8:	4b54      	ldr	r3, [pc, #336]	@ (8001afc <Play_Song_With_Interrupt+0x1fc>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	ee17 2a90 	vmov	r2, s15
 80019b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	@ (8001af4 <Play_Song_With_Interrupt+0x1f4>)
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4413      	add	r3, r2
 80019ba:	ed93 7a00 	vldr	s14, [r3]
 80019be:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8001af8 <Play_Song_With_Interrupt+0x1f8>
 80019c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019ca:	ee17 2a90 	vmov	r2, s15
 80019ce:	4b4b      	ldr	r3, [pc, #300]	@ (8001afc <Play_Song_With_Interrupt+0x1fc>)
 80019d0:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (int)(CLOCK_FREQ / freq[index] / 2));
 80019d2:	7d7b      	ldrb	r3, [r7, #21]
 80019d4:	4a47      	ldr	r2, [pc, #284]	@ (8001af4 <Play_Song_With_Interrupt+0x1f4>)
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8001af8 <Play_Song_With_Interrupt+0x1f8>
 80019e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80019e6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80019ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019f2:	4b42      	ldr	r3, [pc, #264]	@ (8001afc <Play_Song_With_Interrupt+0x1fc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	ee17 2a90 	vmov	r2, s15
 80019fa:	63da      	str	r2, [r3, #60]	@ 0x3c

        // 顯示?���???
        buffer[0] = note;
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	733b      	strb	r3, [r7, #12]
        buffer[1] = '\0';
 8001a00:	2300      	movs	r3, #0
 8001a02:	737b      	strb	r3, [r7, #13]
        LCD16_SetCursor(lcd_col, lcd_row);
 8001a04:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fb04 	bl	800101c <LCD16_SetCursor>
        LCD16_PrintStr(buffer);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff fb23 	bl	8001064 <LCD16_PrintStr>

        lcd_col++;
 8001a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a22:	3301      	adds	r3, #1
 8001a24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (lcd_col >= 16) {
 8001a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d914      	bls.n	8001a5a <Play_Song_With_Interrupt+0x15a>
            lcd_col = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            lcd_row++;
 8001a36:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            if (lcd_row >= 2) {
 8001a40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d908      	bls.n	8001a5a <Play_Song_With_Interrupt+0x15a>
                HAL_Delay(300);  // ??��?��?�給使用?��??
 8001a48:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001a4c:	f002 f80c 	bl	8003a68 <HAL_Delay>
                LCD16_Clear();
 8001a50:	f7ff fada 	bl	8001008 <LCD16_Clear>
                lcd_row = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            }
        }

        // 等�?�播?��??��?�並?��測中?��
        uint32_t start_time = HAL_GetTick();
 8001a5a:	f001 fff9 	bl	8003a50 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]
        while ((HAL_GetTick() - start_time) < duration && !interrupted) {
 8001a60:	e009      	b.n	8001a76 <Play_Song_With_Interrupt+0x176>
            if (Read_Keypad() == '#') interrupted = 1;
 8001a62:	f7ff fc11 	bl	8001288 <Read_Keypad>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b23      	cmp	r3, #35	@ 0x23
 8001a6a:	d101      	bne.n	8001a70 <Play_Song_With_Interrupt+0x170>
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	77fb      	strb	r3, [r7, #31]
            HAL_Delay(10);
 8001a70:	200a      	movs	r0, #10
 8001a72:	f001 fff9 	bl	8003a68 <HAL_Delay>
        while ((HAL_GetTick() - start_time) < duration && !interrupted) {
 8001a76:	f001 ffeb 	bl	8003a50 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad2      	subs	r2, r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d202      	bcs.n	8001a8c <Play_Song_With_Interrupt+0x18c>
 8001a86:	7ffb      	ldrb	r3, [r7, #31]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0ea      	beq.n	8001a62 <Play_Song_With_Interrupt+0x162>
        }

        __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <Play_Song_With_Interrupt+0x1fc>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	@ 0x3c

        if (!interrupted) {
 8001a94:	7ffb      	ldrb	r3, [r7, #31]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <Play_Song_With_Interrupt+0x1ce>
            start_time = HAL_GetTick();
 8001a9a:	f001 ffd9 	bl	8003a50 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]
            while ((HAL_GetTick() - start_time) < 50 && !interrupted) {
 8001aa0:	e009      	b.n	8001ab6 <Play_Song_With_Interrupt+0x1b6>
                if (Read_Keypad() == '#') interrupted = 1;
 8001aa2:	f7ff fbf1 	bl	8001288 <Read_Keypad>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b23      	cmp	r3, #35	@ 0x23
 8001aaa:	d101      	bne.n	8001ab0 <Play_Song_With_Interrupt+0x1b0>
 8001aac:	2301      	movs	r3, #1
 8001aae:	77fb      	strb	r3, [r7, #31]
                HAL_Delay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f001 ffd9 	bl	8003a68 <HAL_Delay>
            while ((HAL_GetTick() - start_time) < 50 && !interrupted) {
 8001ab6:	f001 ffcb 	bl	8003a50 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b31      	cmp	r3, #49	@ 0x31
 8001ac2:	d804      	bhi.n	8001ace <Play_Song_With_Interrupt+0x1ce>
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0eb      	beq.n	8001aa2 <Play_Song_With_Interrupt+0x1a2>
 8001aca:	e000      	b.n	8001ace <Play_Song_With_Interrupt+0x1ce>
        if (note < '0' || note > '9') continue;
 8001acc:	bf00      	nop
    while (*ptr && !interrupted) {
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <Play_Song_With_Interrupt+0x1e2>
 8001ad6:	7ffb      	ldrb	r3, [r7, #31]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f43f af25 	beq.w	8001928 <Play_Song_With_Interrupt+0x28>
 8001ade:	e000      	b.n	8001ae2 <Play_Song_With_Interrupt+0x1e2>
        if (!*ptr) break;
 8001ae0:	bf00      	nop
            }
        }
    }

    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <Play_Song_With_Interrupt+0x1fc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
    return interrupted;
 8001aea:	7ffb      	ldrb	r3, [r7, #31]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3728      	adds	r7, #40	@ 0x28
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000004 	.word	0x20000004
 8001af8:	49742400 	.word	0x49742400
 8001afc:	20005114 	.word	0x20005114

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b5b0      	push	{r4, r5, r7, lr}
 8001b02:	b0b2      	sub	sp, #200	@ 0xc8
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f001 ff3d 	bl	8003984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f001 f995 	bl	8002e38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f001 fb5d 	bl	80031cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b12:	f001 fb03 	bl	800311c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b16:	f001 fb2b 	bl	8003170 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8001b1a:	f001 fa89 	bl	8003030 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001b1e:	f001 fa47 	bl	8002fb0 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001b22:	f001 f9f3 	bl	8002f0c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b26:	2108      	movs	r1, #8
 8001b28:	48d7      	ldr	r0, [pc, #860]	@ (8001e88 <main+0x388>)
 8001b2a:	f004 faa1 	bl	8006070 <HAL_TIM_PWM_Start>

  LCD16_Init(&hi2c1);
 8001b2e:	48d7      	ldr	r0, [pc, #860]	@ (8001e8c <main+0x38c>)
 8001b30:	f7ff fa22 	bl	8000f78 <LCD16_Init>
  LCD16_SetCursor(0, 0);
 8001b34:	2100      	movs	r1, #0
 8001b36:	2000      	movs	r0, #0
 8001b38:	f7ff fa70 	bl	800101c <LCD16_SetCursor>
  HAL_ADC_Start(&hadc1);
 8001b3c:	48d4      	ldr	r0, [pc, #848]	@ (8001e90 <main+0x390>)
 8001b3e:	f001 fffb 	bl	8003b38 <HAL_ADC_Start>
//  HAL_UART_Receive_IT(&huart3, song_buffer, 10);
  HAL_UART_Receive_IT(&huart3, rx_buffer, 16);
 8001b42:	2210      	movs	r2, #16
 8001b44:	49d3      	ldr	r1, [pc, #844]	@ (8001e94 <main+0x394>)
 8001b46:	48d4      	ldr	r0, [pc, #848]	@ (8001e98 <main+0x398>)
 8001b48:	f005 f957 	bl	8006dfa <HAL_UART_Receive_IT>
//	  		  int width = (int)(CLOCK_FREQ/freq[i]/2);
//	  		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
//	  		  HAL_Delay(1000);
//	  	  }
//	  UART_ReceiveAndPrint();
	  char key = Read_Keypad();
 8001b4c:	f7ff fb9c 	bl	8001288 <Read_Keypad>
 8001b50:	4603      	mov	r3, r0
 8001b52:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

	      if (key != 0)
 8001b56:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f001 8143 	beq.w	8002de6 <main+0x12e6>
	      {
	          // ??  ?  ? ?��?
	          HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001b66:	48cd      	ldr	r0, [pc, #820]	@ (8001e9c <main+0x39c>)
 8001b68:	f002 fee6 	bl	8004938 <HAL_GPIO_WritePin>

	          switch (key)
 8001b6c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001b70:	3b23      	subs	r3, #35	@ 0x23
 8001b72:	2b21      	cmp	r3, #33	@ 0x21
 8001b74:	f201 8137 	bhi.w	8002de6 <main+0x12e6>
 8001b78:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <main+0x80>)
 8001b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7e:	bf00      	nop
 8001b80:	08002d57 	.word	0x08002d57
 8001b84:	08002de7 	.word	0x08002de7
 8001b88:	08002de7 	.word	0x08002de7
 8001b8c:	08002de7 	.word	0x08002de7
 8001b90:	08002de7 	.word	0x08002de7
 8001b94:	08002de7 	.word	0x08002de7
 8001b98:	08002de7 	.word	0x08002de7
 8001b9c:	08002d1b 	.word	0x08002d1b
 8001ba0:	08002de7 	.word	0x08002de7
 8001ba4:	08002de7 	.word	0x08002de7
 8001ba8:	08002de7 	.word	0x08002de7
 8001bac:	08002de7 	.word	0x08002de7
 8001bb0:	08002de7 	.word	0x08002de7
 8001bb4:	080027f3 	.word	0x080027f3
 8001bb8:	08001c09 	.word	0x08001c09
 8001bbc:	08001d45 	.word	0x08001d45
 8001bc0:	08001ec9 	.word	0x08001ec9
 8001bc4:	08002007 	.word	0x08002007
 8001bc8:	08002143 	.word	0x08002143
 8001bcc:	080022ad 	.word	0x080022ad
 8001bd0:	080023eb 	.word	0x080023eb
 8001bd4:	0800256d 	.word	0x0800256d
 8001bd8:	080026ad 	.word	0x080026ad
 8001bdc:	08002de7 	.word	0x08002de7
 8001be0:	08002de7 	.word	0x08002de7
 8001be4:	08002de7 	.word	0x08002de7
 8001be8:	08002de7 	.word	0x08002de7
 8001bec:	08002de7 	.word	0x08002de7
 8001bf0:	08002de7 	.word	0x08002de7
 8001bf4:	08002de7 	.word	0x08002de7
 8001bf8:	0800295b 	.word	0x0800295b
 8001bfc:	08002983 	.word	0x08002983
 8001c00:	08002a71 	.word	0x08002a71
 8001c04:	08002cf5 	.word	0x08002cf5
	          {
	          case '1':
				  if (awaiting_song_selection) {
 8001c08:	4ba5      	ldr	r3, [pc, #660]	@ (8001ea0 <main+0x3a0>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d032      	beq.n	8001c76 <main+0x176>
					  uint8_t song_id = key - '0';
 8001c10:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001c14:	3b30      	subs	r3, #48	@ 0x30
 8001c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
					  LCD16_Clear();
 8001c1a:	f7ff f9f5 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2000      	movs	r0, #0
 8001c22:	f7ff f9fb 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8001c26:	489f      	ldr	r0, [pc, #636]	@ (8001ea4 <main+0x3a4>)
 8001c28:	f7ff fa1c 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8001c2c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001c30:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8001c3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa10 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 8001c44:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c48:	f001 ff0e 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 8001c4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001c50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a93      	ldr	r2, [pc, #588]	@ (8001ea8 <main+0x3a8>)
 8001c5a:	4413      	add	r3, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fd1b 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8001c62:	4b8f      	ldr	r3, [pc, #572]	@ (8001ea0 <main+0x3a0>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 8001c68:	4b90      	ldr	r3, [pc, #576]	@ (8001eac <main+0x3ac>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8001c6e:	4b90      	ldr	r3, [pc, #576]	@ (8001eb0 <main+0x3b0>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e05b      	b.n	8001d2e <main+0x22e>
				  }
				  else {
					  float adjusted_freq = freq[1] * pow(2.0f, pitch_offsets[1] / 12.0f);
 8001c76:	4b8f      	ldr	r3, [pc, #572]	@ (8001eb4 <main+0x3b4>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fc84 	bl	8000588 <__aeabi_f2d>
 8001c80:	4604      	mov	r4, r0
 8001c82:	460d      	mov	r5, r1
 8001c84:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb8 <main+0x3b8>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	ee07 3a90 	vmov	s15, r3
 8001c8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c90:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001c94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c98:	ee16 0a90 	vmov	r0, s13
 8001c9c:	f7fe fc74 	bl	8000588 <__aeabi_f2d>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	ec43 2b11 	vmov	d1, r2, r3
 8001ca8:	ed9f 0b75 	vldr	d0, [pc, #468]	@ 8001e80 <main+0x380>
 8001cac:	f009 f9fa 	bl	800b0a4 <pow>
 8001cb0:	ec53 2b10 	vmov	r2, r3, d0
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff90 	bl	8000be8 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 8001ccc:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001ebc <main+0x3bc>
 8001cd0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	@ (8001e88 <main+0x388>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	ee17 2a90 	vmov	r2, s15
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ce6:	eddf 6a75 	vldr	s13, [pc, #468]	@ 8001ebc <main+0x3bc>
 8001cea:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001cee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf6:	ee17 2a90 	vmov	r2, s15
 8001cfa:	4b63      	ldr	r3, [pc, #396]	@ (8001e88 <main+0x388>)
 8001cfc:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 8001cfe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8001ebc <main+0x3bc>
 8001d02:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001d0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d16:	ee17 3a90 	vmov	r3, s15
 8001d1a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	@ (8001e88 <main+0x388>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001d26:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("1");
 8001d28:	4865      	ldr	r0, [pc, #404]	@ (8001ec0 <main+0x3c0>)
 8001d2a:	f7ff fb25 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_WritePin(GPIOB, LED_1_Pin, GPIO_PIN_SET);
 8001d2e:	2201      	movs	r2, #1
 8001d30:	2101      	movs	r1, #1
 8001d32:	485a      	ldr	r0, [pc, #360]	@ (8001e9c <main+0x39c>)
 8001d34:	f002 fe00 	bl	8004938 <HAL_GPIO_WritePin>
	              HAL_Delay(300);
 8001d38:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001d3c:	f001 fe94 	bl	8003a68 <HAL_Delay>

	              break;
 8001d40:	f001 b851 	b.w	8002de6 <main+0x12e6>
	          case '2':
				  if (awaiting_song_selection) {
 8001d44:	4b56      	ldr	r3, [pc, #344]	@ (8001ea0 <main+0x3a0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d032      	beq.n	8001db2 <main+0x2b2>
					  uint8_t song_id = key - '0';
 8001d4c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001d50:	3b30      	subs	r3, #48	@ 0x30
 8001d52:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
					  LCD16_Clear();
 8001d56:	f7ff f957 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff f95d 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8001d62:	4850      	ldr	r0, [pc, #320]	@ (8001ea4 <main+0x3a4>)
 8001d64:	f7ff f97e 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8001d68:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001d6c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
 8001d76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f972 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 8001d80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001d84:	f001 fe70 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 8001d88:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001d8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <main+0x3a8>)
 8001d96:	4413      	add	r3, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fc7d 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8001d9e:	4b40      	ldr	r3, [pc, #256]	@ (8001ea0 <main+0x3a0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 8001da4:	4b41      	ldr	r3, [pc, #260]	@ (8001eac <main+0x3ac>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8001daa:	4b41      	ldr	r3, [pc, #260]	@ (8001eb0 <main+0x3b0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
 8001db0:	e05b      	b.n	8001e6a <main+0x36a>
				  }
				  else {
					  float adjusted_freq = freq[2] * pow(2.0f, pitch_offsets[2] / 12.0f);
 8001db2:	4b40      	ldr	r3, [pc, #256]	@ (8001eb4 <main+0x3b4>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fbe6 	bl	8000588 <__aeabi_f2d>
 8001dbc:	4604      	mov	r4, r0
 8001dbe:	460d      	mov	r5, r1
 8001dc0:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb8 <main+0x3b8>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dcc:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001dd0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001dd4:	ee16 0a90 	vmov	r0, s13
 8001dd8:	f7fe fbd6 	bl	8000588 <__aeabi_f2d>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	460b      	mov	r3, r1
 8001de0:	ec43 2b11 	vmov	d1, r2, r3
 8001de4:	ed9f 0b26 	vldr	d0, [pc, #152]	@ 8001e80 <main+0x380>
 8001de8:	f009 f95c 	bl	800b0a4 <pow>
 8001dec:	ec53 2b10 	vmov	r2, r3, d0
 8001df0:	4620      	mov	r0, r4
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7fe fc20 	bl	8000638 <__aeabi_dmul>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fef2 	bl	8000be8 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	64fb      	str	r3, [r7, #76]	@ 0x4c
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 8001e08:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001ebc <main+0x3bc>
 8001e0c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e18:	4b1b      	ldr	r3, [pc, #108]	@ (8001e88 <main+0x388>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee17 2a90 	vmov	r2, s15
 8001e20:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001e22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001ebc <main+0x3bc>
 8001e26:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e32:	ee17 2a90 	vmov	r2, s15
 8001e36:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <main+0x388>)
 8001e38:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 8001e3a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001ebc <main+0x3bc>
 8001e3e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e46:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e52:	ee17 3a90 	vmov	r3, s15
 8001e56:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <main+0x388>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001e62:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("2");
 8001e64:	4817      	ldr	r0, [pc, #92]	@ (8001ec4 <main+0x3c4>)
 8001e66:	f7ff fa87 	bl	8001378 <LCD16_PrintNoteStr>
				  }
				  HAL_GPIO_WritePin(GPIOB, LED_2_Pin, GPIO_PIN_SET);
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	2180      	movs	r1, #128	@ 0x80
 8001e6e:	480b      	ldr	r0, [pc, #44]	@ (8001e9c <main+0x39c>)
 8001e70:	f002 fd62 	bl	8004938 <HAL_GPIO_WritePin>
				  HAL_Delay(300);
 8001e74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e78:	f001 fdf6 	bl	8003a68 <HAL_Delay>
	              break;
 8001e7c:	f000 bfb3 	b.w	8002de6 <main+0x12e6>
 8001e80:	00000000 	.word	0x00000000
 8001e84:	40000000 	.word	0x40000000
 8001e88:	20005114 	.word	0x20005114
 8001e8c:	200050c0 	.word	0x200050c0
 8001e90:	20005078 	.word	0x20005078
 8001e94:	20006658 	.word	0x20006658
 8001e98:	2000515c 	.word	0x2000515c
 8001e9c:	40020400 	.word	0x40020400
 8001ea0:	20006655 	.word	0x20006655
 8001ea4:	0800c05c 	.word	0x0800c05c
 8001ea8:	2000002c 	.word	0x2000002c
 8001eac:	200056b1 	.word	0x200056b1
 8001eb0:	200056b0 	.word	0x200056b0
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	20005688 	.word	0x20005688
 8001ebc:	49742400 	.word	0x49742400
 8001ec0:	0800c00c 	.word	0x0800c00c
 8001ec4:	0800c010 	.word	0x0800c010
	          case '3':
	        	  if (awaiting_song_selection) {
 8001ec8:	4bbb      	ldr	r3, [pc, #748]	@ (80021b8 <main+0x6b8>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d032      	beq.n	8001f36 <main+0x436>
					  uint8_t song_id = key - '0';
 8001ed0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001ed4:	3b30      	subs	r3, #48	@ 0x30
 8001ed6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
					  LCD16_Clear();
 8001eda:	f7ff f895 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff f89b 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8001ee6:	48b5      	ldr	r0, [pc, #724]	@ (80021bc <main+0x6bc>)
 8001ee8:	f7ff f8bc 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8001eec:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8001ef0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001efa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff f8b0 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 8001f04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f08:	f001 fdae 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 8001f0c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001f10:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f14:	fb02 f303 	mul.w	r3, r2, r3
 8001f18:	4aa9      	ldr	r2, [pc, #676]	@ (80021c0 <main+0x6c0>)
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff fbbb 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8001f22:	4ba5      	ldr	r3, [pc, #660]	@ (80021b8 <main+0x6b8>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 8001f28:	4ba6      	ldr	r3, [pc, #664]	@ (80021c4 <main+0x6c4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8001f2e:	4ba6      	ldr	r3, [pc, #664]	@ (80021c8 <main+0x6c8>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e05b      	b.n	8001fee <main+0x4ee>
				  }
				  else {
					  float adjusted_freq = freq[3] * pow(2.0f, pitch_offsets[3] / 12.0f);
 8001f36:	4ba5      	ldr	r3, [pc, #660]	@ (80021cc <main+0x6cc>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb24 	bl	8000588 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	4ba2      	ldr	r3, [pc, #648]	@ (80021d0 <main+0x6d0>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	ee07 3a90 	vmov	s15, r3
 8001f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f50:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8001f54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001f58:	ee16 0a90 	vmov	r0, s13
 8001f5c:	f7fe fb14 	bl	8000588 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	ec43 2b11 	vmov	d1, r2, r3
 8001f68:	ed9f 0b91 	vldr	d0, [pc, #580]	@ 80021b0 <main+0x6b0>
 8001f6c:	f009 f89a 	bl	800b0a4 <pow>
 8001f70:	ec53 2b10 	vmov	r2, r3, d0
 8001f74:	4620      	mov	r0, r4
 8001f76:	4629      	mov	r1, r5
 8001f78:	f7fe fb5e 	bl	8000638 <__aeabi_dmul>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fe30 	bl	8000be8 <__aeabi_d2f>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	657b      	str	r3, [r7, #84]	@ 0x54
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 8001f8c:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80021d4 <main+0x6d4>
 8001f90:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001f94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f9c:	4b8e      	ldr	r3, [pc, #568]	@ (80021d8 <main+0x6d8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001fa6:	eddf 6a8b 	vldr	s13, [pc, #556]	@ 80021d4 <main+0x6d4>
 8001faa:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8001fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb6:	ee17 2a90 	vmov	r2, s15
 8001fba:	4b87      	ldr	r3, [pc, #540]	@ (80021d8 <main+0x6d8>)
 8001fbc:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 8001fbe:	eddf 6a85 	vldr	s13, [pc, #532]	@ 80021d4 <main+0x6d4>
 8001fc2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fca:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd6:	ee17 3a90 	vmov	r3, s15
 8001fda:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8001fde:	4b7e      	ldr	r3, [pc, #504]	@ (80021d8 <main+0x6d8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8001fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("3");
 8001fe8:	487c      	ldr	r0, [pc, #496]	@ (80021dc <main+0x6dc>)
 8001fea:	f7ff f9c5 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_WritePin(GPIOB, LED_3_Pin, GPIO_PIN_SET);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001ff4:	487a      	ldr	r0, [pc, #488]	@ (80021e0 <main+0x6e0>)
 8001ff6:	f002 fc9f 	bl	8004938 <HAL_GPIO_WritePin>
	              HAL_Delay(300);
 8001ffa:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ffe:	f001 fd33 	bl	8003a68 <HAL_Delay>
	              break;
 8002002:	f000 bef0 	b.w	8002de6 <main+0x12e6>
	          case '4':
	        	  if (awaiting_song_selection) {
 8002006:	4b6c      	ldr	r3, [pc, #432]	@ (80021b8 <main+0x6b8>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d032      	beq.n	8002074 <main+0x574>
	        	  					  uint8_t song_id = key - '0';
 800200e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002012:	3b30      	subs	r3, #48	@ 0x30
 8002014:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
					  LCD16_Clear();
 8002018:	f7fe fff6 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 800201c:	2100      	movs	r1, #0
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe fffc 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8002024:	4865      	ldr	r0, [pc, #404]	@ (80021bc <main+0x6bc>)
 8002026:	f7ff f81d 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 800202a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800202e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 8002032:	2300      	movs	r3, #0
 8002034:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 8002038:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f811 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 8002042:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002046:	f001 fd0f 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 800204a:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800204e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a5a      	ldr	r2, [pc, #360]	@ (80021c0 <main+0x6c0>)
 8002058:	4413      	add	r3, r2
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb1c 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8002060:	4b55      	ldr	r3, [pc, #340]	@ (80021b8 <main+0x6b8>)
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 8002066:	4b57      	ldr	r3, [pc, #348]	@ (80021c4 <main+0x6c4>)
 8002068:	2200      	movs	r2, #0
 800206a:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 800206c:	4b56      	ldr	r3, [pc, #344]	@ (80021c8 <main+0x6c8>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
 8002072:	e05b      	b.n	800212c <main+0x62c>
				  }
				  else {
					  float adjusted_freq = freq[4] * pow(2.0f, pitch_offsets[4] / 12.0f);
 8002074:	4b55      	ldr	r3, [pc, #340]	@ (80021cc <main+0x6cc>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa85 	bl	8000588 <__aeabi_f2d>
 800207e:	4604      	mov	r4, r0
 8002080:	460d      	mov	r5, r1
 8002082:	4b53      	ldr	r3, [pc, #332]	@ (80021d0 <main+0x6d0>)
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208e:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002092:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002096:	ee16 0a90 	vmov	r0, s13
 800209a:	f7fe fa75 	bl	8000588 <__aeabi_f2d>
 800209e:	4602      	mov	r2, r0
 80020a0:	460b      	mov	r3, r1
 80020a2:	ec43 2b11 	vmov	d1, r2, r3
 80020a6:	ed9f 0b42 	vldr	d0, [pc, #264]	@ 80021b0 <main+0x6b0>
 80020aa:	f008 fffb 	bl	800b0a4 <pow>
 80020ae:	ec53 2b10 	vmov	r2, r3, d0
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fabf 	bl	8000638 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd91 	bl	8000be8 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 80020ca:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80021d4 <main+0x6d4>
 80020ce:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80020d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020da:	4b3f      	ldr	r3, [pc, #252]	@ (80021d8 <main+0x6d8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	ee17 2a90 	vmov	r2, s15
 80020e2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020e4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80021d4 <main+0x6d4>
 80020e8:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80020ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020f4:	ee17 2a90 	vmov	r2, s15
 80020f8:	4b37      	ldr	r3, [pc, #220]	@ (80021d8 <main+0x6d8>)
 80020fa:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 80020fc:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80021d4 <main+0x6d4>
 8002100:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002104:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002108:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800210c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002114:	ee17 3a90 	vmov	r3, s15
 8002118:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82

					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 800211c:	4b2e      	ldr	r3, [pc, #184]	@ (80021d8 <main+0x6d8>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8002124:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("4");
 8002126:	482f      	ldr	r0, [pc, #188]	@ (80021e4 <main+0x6e4>)
 8002128:	f7ff f926 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_2_Pin, GPIO_PIN_SET);
 800212c:	2201      	movs	r2, #1
 800212e:	2181      	movs	r1, #129	@ 0x81
 8002130:	482b      	ldr	r0, [pc, #172]	@ (80021e0 <main+0x6e0>)
 8002132:	f002 fc01 	bl	8004938 <HAL_GPIO_WritePin>
	              HAL_Delay(300);
 8002136:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800213a:	f001 fc95 	bl	8003a68 <HAL_Delay>
	              break;
 800213e:	f000 be52 	b.w	8002de6 <main+0x12e6>
	          case '5':
	              if (awaiting_song_selection) {
 8002142:	4b1d      	ldr	r3, [pc, #116]	@ (80021b8 <main+0x6b8>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d04e      	beq.n	80021e8 <main+0x6e8>
					  uint8_t song_id = key - '0';
 800214a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800214e:	3b30      	subs	r3, #48	@ 0x30
 8002150:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
					  LCD16_Clear();
 8002154:	f7fe ff58 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8002158:	2100      	movs	r1, #0
 800215a:	2000      	movs	r0, #0
 800215c:	f7fe ff5e 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8002160:	4816      	ldr	r0, [pc, #88]	@ (80021bc <main+0x6bc>)
 8002162:	f7fe ff7f 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8002166:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800216a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800216e:	2300      	movs	r3, #0
 8002170:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8002174:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe ff73 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 800217e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002182:	f001 fc71 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 8002186:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800218a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <main+0x6c0>)
 8002194:	4413      	add	r3, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fa7e 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 800219c:	4b06      	ldr	r3, [pc, #24]	@ (80021b8 <main+0x6b8>)
 800219e:	2200      	movs	r2, #0
 80021a0:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <main+0x6c4>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <main+0x6c8>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
 80021ae:	e077      	b.n	80022a0 <main+0x7a0>
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40000000 	.word	0x40000000
 80021b8:	20006655 	.word	0x20006655
 80021bc:	0800c05c 	.word	0x0800c05c
 80021c0:	2000002c 	.word	0x2000002c
 80021c4:	200056b1 	.word	0x200056b1
 80021c8:	200056b0 	.word	0x200056b0
 80021cc:	20000004 	.word	0x20000004
 80021d0:	20005688 	.word	0x20005688
 80021d4:	49742400 	.word	0x49742400
 80021d8:	20005114 	.word	0x20005114
 80021dc:	0800c014 	.word	0x0800c014
 80021e0:	40020400 	.word	0x40020400
 80021e4:	0800c018 	.word	0x0800c018
				  }
				  else {
					  float adjusted_freq = freq[5] * pow(2.0f, pitch_offsets[5] / 12.0f);
 80021e8:	4bd3      	ldr	r3, [pc, #844]	@ (8002538 <main+0xa38>)
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe f9cb 	bl	8000588 <__aeabi_f2d>
 80021f2:	4604      	mov	r4, r0
 80021f4:	460d      	mov	r5, r1
 80021f6:	4bd1      	ldr	r3, [pc, #836]	@ (800253c <main+0xa3c>)
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	ee07 3a90 	vmov	s15, r3
 80021fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002202:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800220a:	ee16 0a90 	vmov	r0, s13
 800220e:	f7fe f9bb 	bl	8000588 <__aeabi_f2d>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	ec43 2b11 	vmov	d1, r2, r3
 800221a:	ed9f 0bc5 	vldr	d0, [pc, #788]	@ 8002530 <main+0xa30>
 800221e:	f008 ff41 	bl	800b0a4 <pow>
 8002222:	ec53 2b10 	vmov	r2, r3, d0
 8002226:	4620      	mov	r0, r4
 8002228:	4629      	mov	r1, r5
 800222a:	f7fe fa05 	bl	8000638 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fcd7 	bl	8000be8 <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	667b      	str	r3, [r7, #100]	@ 0x64
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 800223e:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8002540 <main+0xa40>
 8002242:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800224e:	4bbd      	ldr	r3, [pc, #756]	@ (8002544 <main+0xa44>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	ee17 2a90 	vmov	r2, s15
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002258:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 8002540 <main+0xa40>
 800225c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002260:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002268:	ee17 2a90 	vmov	r2, s15
 800226c:	4bb5      	ldr	r3, [pc, #724]	@ (8002544 <main+0xa44>)
 800226e:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 8002270:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 8002540 <main+0xa40>
 8002274:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002284:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002288:	ee17 3a90 	vmov	r3, s15
 800228c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8002290:	4bac      	ldr	r3, [pc, #688]	@ (8002544 <main+0xa44>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8002298:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("5");
 800229a:	48ab      	ldr	r0, [pc, #684]	@ (8002548 <main+0xa48>)
 800229c:	f7ff f86c 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_Delay(300);
 80022a0:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80022a4:	f001 fbe0 	bl	8003a68 <HAL_Delay>
	              break;
 80022a8:	f000 bd9d 	b.w	8002de6 <main+0x12e6>
	          case '6':
	        	  if (awaiting_song_selection) {
 80022ac:	4ba7      	ldr	r3, [pc, #668]	@ (800254c <main+0xa4c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d032      	beq.n	800231a <main+0x81a>
					  uint8_t song_id = key - '0';
 80022b4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80022b8:	3b30      	subs	r3, #48	@ 0x30
 80022ba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
					  LCD16_Clear();
 80022be:	f7fe fea3 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 80022c2:	2100      	movs	r1, #0
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fea9 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 80022ca:	48a1      	ldr	r0, [pc, #644]	@ (8002550 <main+0xa50>)
 80022cc:	f7fe feca 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 80022d0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80022d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80022d8:	2300      	movs	r3, #0
 80022da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80022de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe febe 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 80022e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022ec:	f001 fbbc 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 80022f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80022f4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	4a95      	ldr	r2, [pc, #596]	@ (8002554 <main+0xa54>)
 80022fe:	4413      	add	r3, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f9c9 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8002306:	4b91      	ldr	r3, [pc, #580]	@ (800254c <main+0xa4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 800230c:	4b92      	ldr	r3, [pc, #584]	@ (8002558 <main+0xa58>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8002312:	4b92      	ldr	r3, [pc, #584]	@ (800255c <main+0xa5c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e05b      	b.n	80023d2 <main+0x8d2>
				  }
				  else {
					  float adjusted_freq = freq[6] * pow(2.0f, pitch_offsets[6] / 12.0f);
 800231a:	4b87      	ldr	r3, [pc, #540]	@ (8002538 <main+0xa38>)
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe f932 	bl	8000588 <__aeabi_f2d>
 8002324:	4604      	mov	r4, r0
 8002326:	460d      	mov	r5, r1
 8002328:	4b84      	ldr	r3, [pc, #528]	@ (800253c <main+0xa3c>)
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002334:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002338:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800233c:	ee16 0a90 	vmov	r0, s13
 8002340:	f7fe f922 	bl	8000588 <__aeabi_f2d>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	ec43 2b11 	vmov	d1, r2, r3
 800234c:	ed9f 0b78 	vldr	d0, [pc, #480]	@ 8002530 <main+0xa30>
 8002350:	f008 fea8 	bl	800b0a4 <pow>
 8002354:	ec53 2b10 	vmov	r2, r3, d0
 8002358:	4620      	mov	r0, r4
 800235a:	4629      	mov	r1, r5
 800235c:	f7fe f96c 	bl	8000638 <__aeabi_dmul>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fc3e 	bl	8000be8 <__aeabi_d2f>
 800236c:	4603      	mov	r3, r0
 800236e:	66fb      	str	r3, [r7, #108]	@ 0x6c
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 8002370:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8002540 <main+0xa40>
 8002374:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002380:	4b70      	ldr	r3, [pc, #448]	@ (8002544 <main+0xa44>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	ee17 2a90 	vmov	r2, s15
 8002388:	62da      	str	r2, [r3, #44]	@ 0x2c
 800238a:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002540 <main+0xa40>
 800238e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8002392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239a:	ee17 2a90 	vmov	r2, s15
 800239e:	4b69      	ldr	r3, [pc, #420]	@ (8002544 <main+0xa44>)
 80023a0:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 80023a2:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8002540 <main+0xa40>
 80023a6:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80023aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80023b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023ba:	ee17 3a90 	vmov	r3, s15
 80023be:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 80023c2:	4b60      	ldr	r3, [pc, #384]	@ (8002544 <main+0xa44>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 80023ca:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("6");
 80023cc:	4864      	ldr	r0, [pc, #400]	@ (8002560 <main+0xa60>)
 80023ce:	f7fe ffd3 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_WritePin(GPIOB, LED_1_Pin | LED_3_Pin, GPIO_PIN_SET);
 80023d2:	2201      	movs	r2, #1
 80023d4:	f244 0101 	movw	r1, #16385	@ 0x4001
 80023d8:	4862      	ldr	r0, [pc, #392]	@ (8002564 <main+0xa64>)
 80023da:	f002 faad 	bl	8004938 <HAL_GPIO_WritePin>
	              HAL_Delay(300);
 80023de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80023e2:	f001 fb41 	bl	8003a68 <HAL_Delay>
	              break;
 80023e6:	f000 bcfe 	b.w	8002de6 <main+0x12e6>
	          case '7':
	        	  if (awaiting_song_selection) {
 80023ea:	4b58      	ldr	r3, [pc, #352]	@ (800254c <main+0xa4c>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d032      	beq.n	8002458 <main+0x958>
					  uint8_t song_id = key - '0';
 80023f2:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80023f6:	3b30      	subs	r3, #48	@ 0x30
 80023f8:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
					  LCD16_Clear();
 80023fc:	f7fe fe04 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8002400:	2100      	movs	r1, #0
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe fe0a 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8002408:	4851      	ldr	r0, [pc, #324]	@ (8002550 <main+0xa50>)
 800240a:	f7fe fe2b 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 800240e:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002412:	f887 3020 	strb.w	r3, [r7, #32]
 8002416:	2300      	movs	r3, #0
 8002418:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 800241c:	f107 0320 	add.w	r3, r7, #32
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fe1f 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 8002426:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800242a:	f001 fb1d 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 800242e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8002432:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002436:	fb02 f303 	mul.w	r3, r2, r3
 800243a:	4a46      	ldr	r2, [pc, #280]	@ (8002554 <main+0xa54>)
 800243c:	4413      	add	r3, r2
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f92a 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8002444:	4b41      	ldr	r3, [pc, #260]	@ (800254c <main+0xa4c>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 800244a:	4b43      	ldr	r3, [pc, #268]	@ (8002558 <main+0xa58>)
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8002450:	4b42      	ldr	r3, [pc, #264]	@ (800255c <main+0xa5c>)
 8002452:	2200      	movs	r2, #0
 8002454:	701a      	strb	r2, [r3, #0]
 8002456:	e05b      	b.n	8002510 <main+0xa10>
				  }
				  else {
					  float adjusted_freq = freq[7] * pow(2.0f, pitch_offsets[7] / 12.0f);
 8002458:	4b37      	ldr	r3, [pc, #220]	@ (8002538 <main+0xa38>)
 800245a:	69db      	ldr	r3, [r3, #28]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f893 	bl	8000588 <__aeabi_f2d>
 8002462:	4604      	mov	r4, r0
 8002464:	460d      	mov	r5, r1
 8002466:	4b35      	ldr	r3, [pc, #212]	@ (800253c <main+0xa3c>)
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002472:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002476:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800247a:	ee16 0a90 	vmov	r0, s13
 800247e:	f7fe f883 	bl	8000588 <__aeabi_f2d>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	ec43 2b11 	vmov	d1, r2, r3
 800248a:	ed9f 0b29 	vldr	d0, [pc, #164]	@ 8002530 <main+0xa30>
 800248e:	f008 fe09 	bl	800b0a4 <pow>
 8002492:	ec53 2b10 	vmov	r2, r3, d0
 8002496:	4620      	mov	r0, r4
 8002498:	4629      	mov	r1, r5
 800249a:	f7fe f8cd 	bl	8000638 <__aeabi_dmul>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7fe fb9f 	bl	8000be8 <__aeabi_d2f>
 80024aa:	4603      	mov	r3, r0
 80024ac:	677b      	str	r3, [r7, #116]	@ 0x74
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 80024ae:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8002540 <main+0xa40>
 80024b2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80024b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024be:	4b21      	ldr	r3, [pc, #132]	@ (8002544 <main+0xa44>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	ee17 2a90 	vmov	r2, s15
 80024c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024c8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002540 <main+0xa40>
 80024cc:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80024d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d8:	ee17 2a90 	vmov	r2, s15
 80024dc:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <main+0xa44>)
 80024de:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 80024e0:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8002540 <main+0xa40>
 80024e4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80024e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024ec:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80024f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f8:	ee17 3a90 	vmov	r3, s15
 80024fc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8002500:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <main+0xa44>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8002508:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("7");
 800250a:	4817      	ldr	r0, [pc, #92]	@ (8002568 <main+0xa68>)
 800250c:	f7fe ff34 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 8002510:	2101      	movs	r1, #1
 8002512:	4814      	ldr	r0, [pc, #80]	@ (8002564 <main+0xa64>)
 8002514:	f002 fa29 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(200);
 8002518:	20c8      	movs	r0, #200	@ 0xc8
 800251a:	f001 faa5 	bl	8003a68 <HAL_Delay>
	              HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 800251e:	2101      	movs	r1, #1
 8002520:	4810      	ldr	r0, [pc, #64]	@ (8002564 <main+0xa64>)
 8002522:	f002 fa22 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(100);
 8002526:	2064      	movs	r0, #100	@ 0x64
 8002528:	f001 fa9e 	bl	8003a68 <HAL_Delay>
	              break;
 800252c:	f000 bc5b 	b.w	8002de6 <main+0x12e6>
 8002530:	00000000 	.word	0x00000000
 8002534:	40000000 	.word	0x40000000
 8002538:	20000004 	.word	0x20000004
 800253c:	20005688 	.word	0x20005688
 8002540:	49742400 	.word	0x49742400
 8002544:	20005114 	.word	0x20005114
 8002548:	0800c01c 	.word	0x0800c01c
 800254c:	20006655 	.word	0x20006655
 8002550:	0800c05c 	.word	0x0800c05c
 8002554:	2000002c 	.word	0x2000002c
 8002558:	200056b1 	.word	0x200056b1
 800255c:	200056b0 	.word	0x200056b0
 8002560:	0800c020 	.word	0x0800c020
 8002564:	40020400 	.word	0x40020400
 8002568:	0800c024 	.word	0x0800c024
	          case '8':
	        	  if (awaiting_song_selection) {
 800256c:	4bbe      	ldr	r3, [pc, #760]	@ (8002868 <main+0xd68>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d030      	beq.n	80025d6 <main+0xad6>
					  uint8_t song_id = key - '0';
 8002574:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002578:	3b30      	subs	r3, #48	@ 0x30
 800257a:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
					  LCD16_Clear();
 800257e:	f7fe fd43 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8002582:	2100      	movs	r1, #0
 8002584:	2000      	movs	r0, #0
 8002586:	f7fe fd49 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 800258a:	48b8      	ldr	r0, [pc, #736]	@ (800286c <main+0xd6c>)
 800258c:	f7fe fd6a 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8002590:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 8002594:	773b      	strb	r3, [r7, #28]
 8002596:	2300      	movs	r3, #0
 8002598:	777b      	strb	r3, [r7, #29]
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fd60 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 80025a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80025a8:	f001 fa5e 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 80025ac:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80025b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	4aad      	ldr	r2, [pc, #692]	@ (8002870 <main+0xd70>)
 80025ba:	4413      	add	r3, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff f86b 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 80025c2:	4ba9      	ldr	r3, [pc, #676]	@ (8002868 <main+0xd68>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 80025c8:	4baa      	ldr	r3, [pc, #680]	@ (8002874 <main+0xd74>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 80025ce:	4baa      	ldr	r3, [pc, #680]	@ (8002878 <main+0xd78>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e05b      	b.n	800268e <main+0xb8e>
				  }
				  else {
					  float adjusted_freq = freq[8] * pow(2.0f, pitch_offsets[8] / 12.0f);
 80025d6:	4ba9      	ldr	r3, [pc, #676]	@ (800287c <main+0xd7c>)
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ffd4 	bl	8000588 <__aeabi_f2d>
 80025e0:	4604      	mov	r4, r0
 80025e2:	460d      	mov	r5, r1
 80025e4:	4ba6      	ldr	r3, [pc, #664]	@ (8002880 <main+0xd80>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	ee07 3a90 	vmov	s15, r3
 80025ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80025f4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025f8:	ee16 0a90 	vmov	r0, s13
 80025fc:	f7fd ffc4 	bl	8000588 <__aeabi_f2d>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	ec43 2b11 	vmov	d1, r2, r3
 8002608:	ed9f 0b95 	vldr	d0, [pc, #596]	@ 8002860 <main+0xd60>
 800260c:	f008 fd4a 	bl	800b0a4 <pow>
 8002610:	ec53 2b10 	vmov	r2, r3, d0
 8002614:	4620      	mov	r0, r4
 8002616:	4629      	mov	r1, r5
 8002618:	f7fe f80e 	bl	8000638 <__aeabi_dmul>
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4610      	mov	r0, r2
 8002622:	4619      	mov	r1, r3
 8002624:	f7fe fae0 	bl	8000be8 <__aeabi_d2f>
 8002628:	4603      	mov	r3, r0
 800262a:	67fb      	str	r3, [r7, #124]	@ 0x7c
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 800262c:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8002884 <main+0xd84>
 8002630:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8002634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800263c:	4b92      	ldr	r3, [pc, #584]	@ (8002888 <main+0xd88>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	ee17 2a90 	vmov	r2, s15
 8002644:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002646:	eddf 6a8f 	vldr	s13, [pc, #572]	@ 8002884 <main+0xd84>
 800264a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800264e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002656:	ee17 2a90 	vmov	r2, s15
 800265a:	4b8b      	ldr	r3, [pc, #556]	@ (8002888 <main+0xd88>)
 800265c:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 800265e:	eddf 6a89 	vldr	s13, [pc, #548]	@ 8002884 <main+0xd84>
 8002662:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8002666:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800266a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800266e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002672:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002676:	ee17 3a90 	vmov	r3, s15
 800267a:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 800267e:	4b82      	ldr	r3, [pc, #520]	@ (8002888 <main+0xd88>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8002686:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("8");
 8002688:	4880      	ldr	r0, [pc, #512]	@ (800288c <main+0xd8c>)
 800268a:	f7fe fe75 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 800268e:	2180      	movs	r1, #128	@ 0x80
 8002690:	487f      	ldr	r0, [pc, #508]	@ (8002890 <main+0xd90>)
 8002692:	f002 f96a 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(200);
 8002696:	20c8      	movs	r0, #200	@ 0xc8
 8002698:	f001 f9e6 	bl	8003a68 <HAL_Delay>
	              HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 800269c:	2180      	movs	r1, #128	@ 0x80
 800269e:	487c      	ldr	r0, [pc, #496]	@ (8002890 <main+0xd90>)
 80026a0:	f002 f963 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(100);
 80026a4:	2064      	movs	r0, #100	@ 0x64
 80026a6:	f001 f9df 	bl	8003a68 <HAL_Delay>
	              break;
 80026aa:	e39c      	b.n	8002de6 <main+0x12e6>
	          case '9':

	        	  if (awaiting_song_selection) {
 80026ac:	4b6e      	ldr	r3, [pc, #440]	@ (8002868 <main+0xd68>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d030      	beq.n	8002716 <main+0xc16>
					  uint8_t song_id = key - '0';
 80026b4:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80026b8:	3b30      	subs	r3, #48	@ 0x30
 80026ba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
					  LCD16_Clear();
 80026be:	f7fe fca3 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 80026c2:	2100      	movs	r1, #0
 80026c4:	2000      	movs	r0, #0
 80026c6:	f7fe fca9 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 80026ca:	4868      	ldr	r0, [pc, #416]	@ (800286c <main+0xd6c>)
 80026cc:	f7fe fcca 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 80026d0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80026d4:	763b      	strb	r3, [r7, #24]
 80026d6:	2300      	movs	r3, #0
 80026d8:	767b      	strb	r3, [r7, #25]
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fe fcc0 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 80026e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026e8:	f001 f9be 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 80026ec:	f897 3081 	ldrb.w	r3, [r7, #129]	@ 0x81
 80026f0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	4a5d      	ldr	r2, [pc, #372]	@ (8002870 <main+0xd70>)
 80026fa:	4413      	add	r3, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fe ffcb 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8002702:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <main+0xd68>)
 8002704:	2200      	movs	r2, #0
 8002706:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 8002708:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <main+0xd74>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 800270e:	4b5a      	ldr	r3, [pc, #360]	@ (8002878 <main+0xd78>)
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e05c      	b.n	80027d0 <main+0xcd0>
				  }
				  else {
					  float adjusted_freq = freq[9] * pow(2.0f, pitch_offsets[9] / 12.0f);
 8002716:	4b59      	ldr	r3, [pc, #356]	@ (800287c <main+0xd7c>)
 8002718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800271a:	4618      	mov	r0, r3
 800271c:	f7fd ff34 	bl	8000588 <__aeabi_f2d>
 8002720:	4604      	mov	r4, r0
 8002722:	460d      	mov	r5, r1
 8002724:	4b56      	ldr	r3, [pc, #344]	@ (8002880 <main+0xd80>)
 8002726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002734:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002738:	ee16 0a90 	vmov	r0, s13
 800273c:	f7fd ff24 	bl	8000588 <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	ec43 2b11 	vmov	d1, r2, r3
 8002748:	ed9f 0b45 	vldr	d0, [pc, #276]	@ 8002860 <main+0xd60>
 800274c:	f008 fcaa 	bl	800b0a4 <pow>
 8002750:	ec53 2b10 	vmov	r2, r3, d0
 8002754:	4620      	mov	r0, r4
 8002756:	4629      	mov	r1, r5
 8002758:	f7fd ff6e 	bl	8000638 <__aeabi_dmul>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f7fe fa40 	bl	8000be8 <__aeabi_d2f>
 8002768:	4603      	mov	r3, r0
 800276a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 800276e:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8002884 <main+0xd84>
 8002772:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800277a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800277e:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <main+0xd88>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	ee17 2a90 	vmov	r2, s15
 8002786:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002788:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 8002884 <main+0xd84>
 800278c:	ed97 7a21 	vldr	s14, [r7, #132]	@ 0x84
 8002790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002798:	ee17 2a90 	vmov	r2, s15
 800279c:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <main+0xd88>)
 800279e:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 80027a0:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002884 <main+0xd84>
 80027a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80027a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80027b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80027b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027b8:	ee17 3a90 	vmov	r3, s15
 80027bc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <main+0xd88>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 80027c8:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("9");
 80027ca:	4832      	ldr	r0, [pc, #200]	@ (8002894 <main+0xd94>)
 80027cc:	f7fe fdd4 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	              HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 80027d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027d4:	482e      	ldr	r0, [pc, #184]	@ (8002890 <main+0xd90>)
 80027d6:	f002 f8c8 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(200);
 80027da:	20c8      	movs	r0, #200	@ 0xc8
 80027dc:	f001 f944 	bl	8003a68 <HAL_Delay>
	              HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 80027e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027e4:	482a      	ldr	r0, [pc, #168]	@ (8002890 <main+0xd90>)
 80027e6:	f002 f8c0 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_Delay(100);
 80027ea:	2064      	movs	r0, #100	@ 0x64
 80027ec:	f001 f93c 	bl	8003a68 <HAL_Delay>
	              break;
 80027f0:	e2f9      	b.n	8002de6 <main+0x12e6>
	          case '0':


	        	  if (awaiting_song_selection) {
 80027f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002868 <main+0xd68>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04e      	beq.n	8002898 <main+0xd98>
	        	  	  uint8_t song_id = key - '0';
 80027fa:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 80027fe:	3b30      	subs	r3, #48	@ 0x30
 8002800:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
					  LCD16_Clear();
 8002804:	f7fe fc00 	bl	8001008 <LCD16_Clear>
					  LCD16_SetCursor(0, 0);
 8002808:	2100      	movs	r1, #0
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe fc06 	bl	800101c <LCD16_SetCursor>
					  LCD16_PrintStr("Playing song ");
 8002810:	4816      	ldr	r0, [pc, #88]	@ (800286c <main+0xd6c>)
 8002812:	f7fe fc27 	bl	8001064 <LCD16_PrintStr>
					  LCD16_PrintStr((char[]){key, '\0'});
 8002816:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800281a:	753b      	strb	r3, [r7, #20]
 800281c:	2300      	movs	r3, #0
 800281e:	757b      	strb	r3, [r7, #21]
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe fc1d 	bl	8001064 <LCD16_PrintStr>
					  HAL_Delay(1000);
 800282a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800282e:	f001 f91b 	bl	8003a68 <HAL_Delay>

					  Play_Song(songs[song_id]);
 8002832:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8002836:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	4a0c      	ldr	r2, [pc, #48]	@ (8002870 <main+0xd70>)
 8002840:	4413      	add	r3, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe ff28 	bl	8001698 <Play_Song>
					  awaiting_song_selection = 0;
 8002848:	4b07      	ldr	r3, [pc, #28]	@ (8002868 <main+0xd68>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
					  lcd_row=0;
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <main+0xd74>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
					  lcd_col=0;
 8002854:	4b08      	ldr	r3, [pc, #32]	@ (8002878 <main+0xd78>)
 8002856:	2200      	movs	r2, #0
 8002858:	701a      	strb	r2, [r3, #0]
 800285a:	e079      	b.n	8002950 <main+0xe50>
 800285c:	f3af 8000 	nop.w
 8002860:	00000000 	.word	0x00000000
 8002864:	40000000 	.word	0x40000000
 8002868:	20006655 	.word	0x20006655
 800286c:	0800c05c 	.word	0x0800c05c
 8002870:	2000002c 	.word	0x2000002c
 8002874:	200056b1 	.word	0x200056b1
 8002878:	200056b0 	.word	0x200056b0
 800287c:	20000004 	.word	0x20000004
 8002880:	20005688 	.word	0x20005688
 8002884:	49742400 	.word	0x49742400
 8002888:	20005114 	.word	0x20005114
 800288c:	0800c028 	.word	0x0800c028
 8002890:	40020400 	.word	0x40020400
 8002894:	0800c02c 	.word	0x0800c02c
				  }
	        	  else {
	        		  float adjusted_freq = freq[0] * pow(2.0f, pitch_offsets[0] / 12.0f);
 8002898:	4bc7      	ldr	r3, [pc, #796]	@ (8002bb8 <main+0x10b8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7fd fe73 	bl	8000588 <__aeabi_f2d>
 80028a2:	4604      	mov	r4, r0
 80028a4:	460d      	mov	r5, r1
 80028a6:	4bc5      	ldr	r3, [pc, #788]	@ (8002bbc <main+0x10bc>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80028b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80028ba:	ee16 0a90 	vmov	r0, s13
 80028be:	f7fd fe63 	bl	8000588 <__aeabi_f2d>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	ec43 2b11 	vmov	d1, r2, r3
 80028ca:	ed9f 0bb9 	vldr	d0, [pc, #740]	@ 8002bb0 <main+0x10b0>
 80028ce:	f008 fbe9 	bl	800b0a4 <pow>
 80028d2:	ec53 2b10 	vmov	r2, r3, d0
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fead 	bl	8000638 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4610      	mov	r0, r2
 80028e4:	4619      	mov	r1, r3
 80028e6:	f7fe f97f 	bl	8000be8 <__aeabi_d2f>
 80028ea:	4603      	mov	r3, r0
 80028ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
					  __HAL_TIM_SET_AUTORELOAD(&htim3, (int)(CLOCK_FREQ / adjusted_freq));
 80028ee:	eddf 6ab4 	vldr	s13, [pc, #720]	@ 8002bc0 <main+0x10c0>
 80028f2:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80028f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028fe:	4bb1      	ldr	r3, [pc, #708]	@ (8002bc4 <main+0x10c4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	ee17 2a90 	vmov	r2, s15
 8002906:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002908:	eddf 6aad 	vldr	s13, [pc, #692]	@ 8002bc0 <main+0x10c0>
 800290c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002910:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002918:	ee17 2a90 	vmov	r2, s15
 800291c:	4ba9      	ldr	r3, [pc, #676]	@ (8002bc4 <main+0x10c4>)
 800291e:	60da      	str	r2, [r3, #12]
					  width = (int)(CLOCK_FREQ / adjusted_freq / 2);
 8002920:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8002bc0 <main+0x10c0>
 8002924:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002928:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800292c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002930:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002938:	ee17 3a90 	vmov	r3, s15
 800293c:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
					  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, width);
 8002940:	4ba0      	ldr	r3, [pc, #640]	@ (8002bc4 <main+0x10c4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 8002948:	63da      	str	r2, [r3, #60]	@ 0x3c
					  LCD16_PrintNoteStr("0");
 800294a:	489f      	ldr	r0, [pc, #636]	@ (8002bc8 <main+0x10c8>)
 800294c:	f7fe fd14 	bl	8001378 <LCD16_PrintNoteStr>
				  }
	        	  HAL_Delay(300);
 8002950:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002954:	f001 f888 	bl	8003a68 <HAL_Delay>
	              // ?  ?  ??  ?  ? �????? �??? ?????????????
	              break;
 8002958:	e245      	b.n	8002de6 <main+0x12e6>
	          case 'A':  // 跑馬???
	        	  awaiting_song_selection = 1;
 800295a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bcc <main+0x10cc>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
				  LCD16_Clear();
 8002960:	f7fe fb52 	bl	8001008 <LCD16_Clear>
				  LCD16_SetCursor(0, 0);
 8002964:	2100      	movs	r1, #0
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fb58 	bl	800101c <LCD16_SetCursor>
				  LCD16_PrintStr("Select song 0-9");
 800296c:	4898      	ldr	r0, [pc, #608]	@ (8002bd0 <main+0x10d0>)
 800296e:	f7fe fb79 	bl	8001064 <LCD16_PrintStr>
				  LCD16_SetCursor(0, 1);
 8002972:	2101      	movs	r1, #1
 8002974:	2000      	movs	r0, #0
 8002976:	f7fe fb51 	bl	800101c <LCD16_SetCursor>
				  LCD16_PrintStr("Press # to stop");
 800297a:	4896      	ldr	r0, [pc, #600]	@ (8002bd4 <main+0x10d4>)
 800297c:	f7fe fb72 	bl	8001064 <LCD16_PrintStr>
				  break;
 8002980:	e231      	b.n	8002de6 <main+0x12e6>
	                  HAL_GPIO_WritePin(GPIOB, LED_3_Pin, GPIO_PIN_RESET);
	              }
	              break;
	          case 'B':
	          {
	              for (int i = 0; i < 10; i++) {
 8002982:	2300      	movs	r3, #0
 8002984:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002988:	e054      	b.n	8002a34 <main+0xf34>
	                  LCD16_Clear();
 800298a:	f7fe fb3d 	bl	8001008 <LCD16_Clear>
	                  LCD16_SetCursor(0, 0);
 800298e:	2100      	movs	r1, #0
 8002990:	2000      	movs	r0, #0
 8002992:	f7fe fb43 	bl	800101c <LCD16_SetCursor>
	                  LCD16_PrintStr("Set pitch for ");
 8002996:	4890      	ldr	r0, [pc, #576]	@ (8002bd8 <main+0x10d8>)
 8002998:	f7fe fb64 	bl	8001064 <LCD16_PrintStr>
	                  LCD16_SetCursor(14, 0);
 800299c:	2100      	movs	r1, #0
 800299e:	200e      	movs	r0, #14
 80029a0:	f7fe fb3c 	bl	800101c <LCD16_SetCursor>
	                  LCD16_PrintChar('0' + i);  // 顯示 0~9 ?��符�?��?�數�???
 80029a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029a8:	3330      	adds	r3, #48	@ 0x30
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fc26 	bl	80011fc <LCD16_PrintChar>

	                  int last_offset = -100; // ??��?��?�為不可?��??��?��?�確保第�???次�?定�?�顯�???
 80029b0:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 80029b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	                  while (1) {
	                      uint32_t adc_val = Read_Potentiometer();
 80029b8:	f7fe fc32 	bl	8001220 <Read_Potentiometer>
 80029bc:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
	                      int offset = (adc_val * 11) / 4096 - 5; // -5 ~ +5
 80029c0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80029c4:	4613      	mov	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4413      	add	r3, r2
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	4413      	add	r3, r2
 80029ce:	0b1b      	lsrs	r3, r3, #12
 80029d0:	3b05      	subs	r3, #5
 80029d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	                      if (offset != last_offset) {
 80029d6:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80029da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029de:	429a      	cmp	r2, r3
 80029e0:	d012      	beq.n	8002a08 <main+0xf08>
	                          char buf[16];
	                          sprintf(buf, "Offset: %+d   ", offset);  // 顯示?��式�??+3??-5 �???
 80029e2:	1d3b      	adds	r3, r7, #4
 80029e4:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 80029e8:	497c      	ldr	r1, [pc, #496]	@ (8002bdc <main+0x10dc>)
 80029ea:	4618      	mov	r0, r3
 80029ec:	f006 fa06 	bl	8008dfc <siprintf>
	                          LCD16_SetCursor(0, 1);
 80029f0:	2101      	movs	r1, #1
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe fb12 	bl	800101c <LCD16_SetCursor>
	                          LCD16_PrintStr(buf);
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7fe fb32 	bl	8001064 <LCD16_PrintStr>
	                          last_offset = offset;
 8002a00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
	                      }

	                      char key = Read_Keypad();
 8002a08:	f7fe fc3e 	bl	8001288 <Read_Keypad>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	                      if (key == '#') {
 8002a12:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8002a16:	2b23      	cmp	r3, #35	@ 0x23
 8002a18:	d1ce      	bne.n	80029b8 <main+0xeb8>
	                          pitch_offsets[i] = offset;
 8002a1a:	4968      	ldr	r1, [pc, #416]	@ (8002bbc <main+0x10bc>)
 8002a1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a20:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8002a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	                          break;
 8002a28:	bf00      	nop
	              for (int i = 0; i < 10; i++) {
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a38:	2b09      	cmp	r3, #9
 8002a3a:	dda6      	ble.n	800298a <main+0xe8a>
	                      }
	                  }
	              }

	              LCD16_Clear();
 8002a3c:	f7fe fae4 	bl	8001008 <LCD16_Clear>
	              LCD16_SetCursor(0, 0);
 8002a40:	2100      	movs	r1, #0
 8002a42:	2000      	movs	r0, #0
 8002a44:	f7fe faea 	bl	800101c <LCD16_SetCursor>
	              LCD16_PrintStr("Pitch Set Done");
 8002a48:	4865      	ldr	r0, [pc, #404]	@ (8002be0 <main+0x10e0>)
 8002a4a:	f7fe fb0b 	bl	8001064 <LCD16_PrintStr>
	              HAL_Delay(1000);
 8002a4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002a52:	f001 f809 	bl	8003a68 <HAL_Delay>
	              LCD16_Clear();
 8002a56:	f7fe fad7 	bl	8001008 <LCD16_Clear>
	              LCD16_SetCursor(0, 0);
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fadd 	bl	800101c <LCD16_SetCursor>
	              lcd_row=0;
 8002a62:	4b60      	ldr	r3, [pc, #384]	@ (8002be4 <main+0x10e4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
	              lcd_col=0;
 8002a68:	4b5f      	ldr	r3, [pc, #380]	@ (8002be8 <main+0x10e8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	701a      	strb	r2, [r3, #0]
	          }
	          break;
 8002a6e:	e1ba      	b.n	8002de6 <main+0x12e6>
	          case 'C':  // 歌曲?��?��?��?��??�能
	          {
	              uint8_t song_selected = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	              uint32_t last_key_time = HAL_GetTick();
 8002a76:	f000 ffeb 	bl	8003a50 <HAL_GetTick>
 8002a7a:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
	              uint8_t global_interrupt = 0;  // ?���???中断??��??
 8002a7e:	2300      	movs	r3, #0
 8002a80:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	              LCD16_Clear();
 8002a84:	f7fe fac0 	bl	8001008 <LCD16_Clear>
	              LCD16_SetCursor(0, 0);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7fe fac6 	bl	800101c <LCD16_SetCursor>
	              LCD16_PrintStr("C:0-9=Song");
 8002a90:	4856      	ldr	r0, [pc, #344]	@ (8002bec <main+0x10ec>)
 8002a92:	f7fe fae7 	bl	8001064 <LCD16_PrintStr>
	              LCD16_SetCursor(0, 1);
 8002a96:	2101      	movs	r1, #1
 8002a98:	2000      	movs	r0, #0
 8002a9a:	f7fe fabf 	bl	800101c <LCD16_SetCursor>
	              LCD16_PrintStr("*=Loop #=Random");
 8002a9e:	4854      	ldr	r0, [pc, #336]	@ (8002bf0 <main+0x10f0>)
 8002aa0:	f7fe fae0 	bl	8001064 <LCD16_PrintStr>

	              // 等�?�用?��输入，带超时
	              while (!song_selected && (HAL_GetTick() - last_key_time < 5000) && !global_interrupt) {
 8002aa4:	e0ef      	b.n	8002c86 <main+0x1186>
	                  char key = Read_Keypad();
 8002aa6:	f7fe fbef 	bl	8001288 <Read_Keypad>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a

	                  if (key != 0) {
 8002ab0:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80e3 	beq.w	8002c80 <main+0x1180>
	                      last_key_time = HAL_GetTick();
 8002aba:	f000 ffc9 	bl	8003a50 <HAL_GetTick>
 8002abe:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8

	                      if (key == '*') {  // 循环?��?��????��?�曲
 8002ac2:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8002ac6:	2b2a      	cmp	r3, #42	@ 0x2a
 8002ac8:	d14e      	bne.n	8002b68 <main+0x1068>
	                          LCD16_Clear();
 8002aca:	f7fe fa9d 	bl	8001008 <LCD16_Clear>
	                          LCD16_SetCursor(0, 0);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe faa3 	bl	800101c <LCD16_SetCursor>
	                          LCD16_PrintStr("Looping All");
 8002ad6:	4847      	ldr	r0, [pc, #284]	@ (8002bf4 <main+0x10f4>)
 8002ad8:	f7fe fac4 	bl	8001064 <LCD16_PrintStr>
	                          LCD16_SetCursor(0, 1);
 8002adc:	2101      	movs	r1, #1
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f7fe fa9c 	bl	800101c <LCD16_SetCursor>
	                          LCD16_PrintStr("#=Stop");
 8002ae4:	4844      	ldr	r0, [pc, #272]	@ (8002bf8 <main+0x10f8>)
 8002ae6:	f7fe fabd 	bl	8001064 <LCD16_PrintStr>

	                          uint8_t loop_exit = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	                          while (!loop_exit && !global_interrupt) {
 8002af0:	e02e      	b.n	8002b50 <main+0x1050>
	                              for (int i = 0; i < MAX_SONGS && !loop_exit && !global_interrupt; i++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002af8:	e01e      	b.n	8002b38 <main+0x1038>
	                                  global_interrupt = Play_Song_With_Interrupt(songs[i]);
 8002afa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002afe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b02:	fb02 f303 	mul.w	r3, r2, r3
 8002b06:	4a3d      	ldr	r2, [pc, #244]	@ (8002bfc <main+0x10fc>)
 8002b08:	4413      	add	r3, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fef8 	bl	8001900 <Play_Song_With_Interrupt>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	                                  // �????��?��?��要�?�止
	                                  if (Read_Keypad() == '#') {
 8002b16:	f7fe fbb7 	bl	8001288 <Read_Keypad>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b23      	cmp	r3, #35	@ 0x23
 8002b1e:	d102      	bne.n	8002b26 <main+0x1026>
	                                      loop_exit = 1;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 30b6 	strb.w	r3, [r7, #182]	@ 0xb6
	                                  }
	                                  HAL_Delay(300);  // 歌曲?��延�??
 8002b26:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002b2a:	f000 ff9d 	bl	8003a68 <HAL_Delay>
	                              for (int i = 0; i < MAX_SONGS && !loop_exit && !global_interrupt; i++) {
 8002b2e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b32:	3301      	adds	r3, #1
 8002b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3c:	2b13      	cmp	r3, #19
 8002b3e:	dc07      	bgt.n	8002b50 <main+0x1050>
 8002b40:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d103      	bne.n	8002b50 <main+0x1050>
 8002b48:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0d4      	beq.n	8002afa <main+0xffa>
	                          while (!loop_exit && !global_interrupt) {
 8002b50:	f897 30b6 	ldrb.w	r3, [r7, #182]	@ 0xb6
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d103      	bne.n	8002b60 <main+0x1060>
 8002b58:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d0c8      	beq.n	8002af2 <main+0xff2>
	                              }
	                          }
	                          song_selected = 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
 8002b66:	e08b      	b.n	8002c80 <main+0x1180>
	                      }
	                      else if (key == '#') {  // ??�机?��?��
 8002b68:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8002b6c:	2b23      	cmp	r3, #35	@ 0x23
 8002b6e:	f040 8087 	bne.w	8002c80 <main+0x1180>
	                          LCD16_Clear();
 8002b72:	f7fe fa49 	bl	8001008 <LCD16_Clear>
	                          LCD16_SetCursor(0, 0);
 8002b76:	2100      	movs	r1, #0
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe fa4f 	bl	800101c <LCD16_SetCursor>
	                          LCD16_PrintStr("Random Play");
 8002b7e:	4820      	ldr	r0, [pc, #128]	@ (8002c00 <main+0x1100>)
 8002b80:	f7fe fa70 	bl	8001064 <LCD16_PrintStr>
	                          LCD16_SetCursor(0, 1);
 8002b84:	2101      	movs	r1, #1
 8002b86:	2000      	movs	r0, #0
 8002b88:	f7fe fa48 	bl	800101c <LCD16_SetCursor>
	                          LCD16_PrintStr("#=Stop");
 8002b8c:	481a      	ldr	r0, [pc, #104]	@ (8002bf8 <main+0x10f8>)
 8002b8e:	f7fe fa69 	bl	8001064 <LCD16_PrintStr>

	                          srand(HAL_GetTick());  // ??��?��?��?�机种�??
 8002b92:	f000 ff5d 	bl	8003a50 <HAL_GetTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f005 fba9 	bl	80082f0 <srand>
	                          uint8_t random_exit = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

	                          for (int i = 0; i < 20 && !random_exit && !global_interrupt; i++) {
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002baa:	e05a      	b.n	8002c62 <main+0x1162>
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40000000 	.word	0x40000000
 8002bb8:	20000004 	.word	0x20000004
 8002bbc:	20005688 	.word	0x20005688
 8002bc0:	49742400 	.word	0x49742400
 8002bc4:	20005114 	.word	0x20005114
 8002bc8:	0800c008 	.word	0x0800c008
 8002bcc:	20006655 	.word	0x20006655
 8002bd0:	0800c06c 	.word	0x0800c06c
 8002bd4:	0800c07c 	.word	0x0800c07c
 8002bd8:	0800c08c 	.word	0x0800c08c
 8002bdc:	0800c09c 	.word	0x0800c09c
 8002be0:	0800c0ac 	.word	0x0800c0ac
 8002be4:	200056b1 	.word	0x200056b1
 8002be8:	200056b0 	.word	0x200056b0
 8002bec:	0800c0bc 	.word	0x0800c0bc
 8002bf0:	0800c0c8 	.word	0x0800c0c8
 8002bf4:	0800c0d8 	.word	0x0800c0d8
 8002bf8:	0800c03c 	.word	0x0800c03c
 8002bfc:	2000002c 	.word	0x2000002c
 8002c00:	0800c0e4 	.word	0x0800c0e4
	                              int r = rand() % MAX_SONGS;
 8002c04:	f005 fba2 	bl	800834c <rand>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b7a      	ldr	r3, [pc, #488]	@ (8002df4 <main+0x12f4>)
 8002c0c:	fb83 1302 	smull	r1, r3, r3, r2
 8002c10:	10d9      	asrs	r1, r3, #3
 8002c12:	17d3      	asrs	r3, r2, #31
 8002c14:	1ac9      	subs	r1, r1, r3
 8002c16:	460b      	mov	r3, r1
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	                              global_interrupt = Play_Song_With_Interrupt(songs[r]);
 8002c24:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c28:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c2c:	fb02 f303 	mul.w	r3, r2, r3
 8002c30:	4a71      	ldr	r2, [pc, #452]	@ (8002df8 <main+0x12f8>)
 8002c32:	4413      	add	r3, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fe63 	bl	8001900 <Play_Song_With_Interrupt>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

	                              // �????��?��?��要�?�止
	                              if (Read_Keypad() == '#') {
 8002c40:	f7fe fb22 	bl	8001288 <Read_Keypad>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b23      	cmp	r3, #35	@ 0x23
 8002c48:	d102      	bne.n	8002c50 <main+0x1150>
	                                  random_exit = 1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	                              }
	                              HAL_Delay(300);  // 歌曲?��延�??
 8002c50:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c54:	f000 ff08 	bl	8003a68 <HAL_Delay>
	                          for (int i = 0; i < 20 && !random_exit && !global_interrupt; i++) {
 8002c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002c62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c66:	2b13      	cmp	r3, #19
 8002c68:	dc07      	bgt.n	8002c7a <main+0x117a>
 8002c6a:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d103      	bne.n	8002c7a <main+0x117a>
 8002c72:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0c4      	beq.n	8002c04 <main+0x1104>
	                          }
	                          song_selected = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
	                      }
	                  }
	                  HAL_Delay(50);  // ?��止�?��?��?��?��?测�?�键
 8002c80:	2032      	movs	r0, #50	@ 0x32
 8002c82:	f000 fef1 	bl	8003a68 <HAL_Delay>
	              while (!song_selected && (HAL_GetTick() - last_key_time < 5000) && !global_interrupt) {
 8002c86:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10e      	bne.n	8002cac <main+0x11ac>
 8002c8e:	f000 fedf 	bl	8003a50 <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d804      	bhi.n	8002cac <main+0x11ac>
 8002ca2:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f43f aefd 	beq.w	8002aa6 <main+0xfa6>
	              }

	              // 清�?�显�???
	              LCD16_Clear();
 8002cac:	f7fe f9ac 	bl	8001008 <LCD16_Clear>
	              if (global_interrupt) {
 8002cb0:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <main+0x11d0>
	                  LCD16_SetCursor(0, 0);
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f7fe f9ae 	bl	800101c <LCD16_SetCursor>
	                  LCD16_PrintStr("Stopped by User");
 8002cc0:	484e      	ldr	r0, [pc, #312]	@ (8002dfc <main+0x12fc>)
 8002cc2:	f7fe f9cf 	bl	8001064 <LCD16_PrintStr>
	                  HAL_Delay(1000);
 8002cc6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cca:	f000 fecd 	bl	8003a68 <HAL_Delay>
 8002cce:	e00e      	b.n	8002cee <main+0x11ee>
	              }
	              else if (!song_selected) {
 8002cd0:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <main+0x11ee>
	                  LCD16_SetCursor(0, 0);
 8002cd8:	2100      	movs	r1, #0
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe f99e 	bl	800101c <LCD16_SetCursor>
	                  LCD16_PrintStr("Timeout");
 8002ce0:	4847      	ldr	r0, [pc, #284]	@ (8002e00 <main+0x1300>)
 8002ce2:	f7fe f9bf 	bl	8001064 <LCD16_PrintStr>
	                  HAL_Delay(1000);
 8002ce6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002cea:	f000 febd 	bl	8003a68 <HAL_Delay>
	              }
	              LCD16_Clear();
 8002cee:	f7fe f98b 	bl	8001008 <LCD16_Clear>
	              break;
 8002cf2:	e078      	b.n	8002de6 <main+0x12e6>
	          }
	          case 'D':
	              LCD16_Clear();
 8002cf4:	f7fe f988 	bl	8001008 <LCD16_Clear>
	              LCD16_PrintStr("Recording...");
 8002cf8:	4842      	ldr	r0, [pc, #264]	@ (8002e04 <main+0x1304>)
 8002cfa:	f7fe f9b3 	bl	8001064 <LCD16_PrintStr>
	              LCD16_SetCursor(0, 1);
 8002cfe:	2101      	movs	r1, #1
 8002d00:	2000      	movs	r0, #0
 8002d02:	f7fe f98b 	bl	800101c <LCD16_SetCursor>
	              LCD16_PrintStr("Please speak");
 8002d06:	4840      	ldr	r0, [pc, #256]	@ (8002e08 <main+0x1308>)
 8002d08:	f7fe f9ac 	bl	8001064 <LCD16_PrintStr>

	              HAL_UART_Transmit(&huart3, (uint8_t *)"START_RECORDING\n", strlen("START_RECORDING\n"), 100);
 8002d0c:	2364      	movs	r3, #100	@ 0x64
 8002d0e:	2210      	movs	r2, #16
 8002d10:	493e      	ldr	r1, [pc, #248]	@ (8002e0c <main+0x130c>)
 8002d12:	483f      	ldr	r0, [pc, #252]	@ (8002e10 <main+0x1310>)
 8002d14:	f003 ffe6 	bl	8006ce4 <HAL_UART_Transmit>
	              break;
 8002d18:	e065      	b.n	8002de6 <main+0x12e6>
	          case '*':  // �??? ?  ?  ? ?��?
	        	  PlayNoteHistory();
 8002d1a:	f7fe fb81 	bl	8001420 <PlayNoteHistory>
	        	  lcd_row = 0;
 8002d1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e14 <main+0x1314>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
	        	  lcd_col = 0;
 8002d24:	4b3c      	ldr	r3, [pc, #240]	@ (8002e18 <main+0x1318>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
	              for (int i = 0; i < 3; i++) {
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d30:	e00c      	b.n	8002d4c <main+0x124c>
	                  HAL_GPIO_TogglePin(GPIOB, LED_1_Pin | LED_2_Pin | LED_3_Pin);
 8002d32:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002d36:	4839      	ldr	r0, [pc, #228]	@ (8002e1c <main+0x131c>)
 8002d38:	f001 fe17 	bl	800496a <HAL_GPIO_TogglePin>
	                  HAL_Delay(100);
 8002d3c:	2064      	movs	r0, #100	@ 0x64
 8002d3e:	f000 fe93 	bl	8003a68 <HAL_Delay>
	              for (int i = 0; i < 3; i++) {
 8002d42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d46:	3301      	adds	r3, #1
 8002d48:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	ddee      	ble.n	8002d32 <main+0x1232>
	              }
	              break;
 8002d54:	e047      	b.n	8002de6 <main+0x12e6>
	          case '#':  // ??  ?  ????
	        	  awaiting_song_selection=0;
 8002d56:	4b32      	ldr	r3, [pc, #200]	@ (8002e20 <main+0x1320>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	701a      	strb	r2, [r3, #0]
	        	  LCD16_Clear();
 8002d5c:	f7fe f954 	bl	8001008 <LCD16_Clear>
	        	  lcd_row=0;
 8002d60:	4b2c      	ldr	r3, [pc, #176]	@ (8002e14 <main+0x1314>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	701a      	strb	r2, [r3, #0]
	        	  lcd_col=0;
 8002d66:	4b2c      	ldr	r3, [pc, #176]	@ (8002e18 <main+0x1318>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
	        	  for (int i = 0; i < 10; i++) {
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d72:	e007      	b.n	8002d84 <main+0x1284>
					  pitch_offsets[0] = 0;
 8002d74:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <main+0x1324>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
	        	  for (int i = 0; i < 10; i++) {
 8002d7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002d88:	2b09      	cmp	r3, #9
 8002d8a:	ddf3      	ble.n	8002d74 <main+0x1274>
				  }
	        	  for (int i = 0; i < 50; i++) {
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d92:	e00a      	b.n	8002daa <main+0x12aa>
	        	      note_history[i][0] = '\0'; // ??�填�??? " " 也可�???
 8002d94:	4a24      	ldr	r2, [pc, #144]	@ (8002e28 <main+0x1328>)
 8002d96:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	        	  for (int i = 0; i < 50; i++) {
 8002da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002dae:	2b31      	cmp	r3, #49	@ 0x31
 8002db0:	ddf0      	ble.n	8002d94 <main+0x1294>
	        	  }

	        	  LCD16_PrintStr("Note cleared!");
 8002db2:	481e      	ldr	r0, [pc, #120]	@ (8002e2c <main+0x132c>)
 8002db4:	f7fe f956 	bl	8001064 <LCD16_PrintStr>
	        	  note_index=0;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <main+0x1330>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	701a      	strb	r2, [r3, #0]
	        	  HAL_Delay(1000);
 8002dbe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dc2:	f000 fe51 	bl	8003a68 <HAL_Delay>
	        	  LCD16_Clear();
 8002dc6:	f7fe f91f 	bl	8001008 <LCD16_Clear>
	              HAL_GPIO_TogglePin(GPIOB, LED_1_Pin);
 8002dca:	2101      	movs	r1, #1
 8002dcc:	4813      	ldr	r0, [pc, #76]	@ (8002e1c <main+0x131c>)
 8002dce:	f001 fdcc 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_GPIO_TogglePin(GPIOB, LED_2_Pin);
 8002dd2:	2180      	movs	r1, #128	@ 0x80
 8002dd4:	4811      	ldr	r0, [pc, #68]	@ (8002e1c <main+0x131c>)
 8002dd6:	f001 fdc8 	bl	800496a <HAL_GPIO_TogglePin>
	              HAL_GPIO_TogglePin(GPIOB, LED_3_Pin);
 8002dda:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002dde:	480f      	ldr	r0, [pc, #60]	@ (8002e1c <main+0x131c>)
 8002de0:	f001 fdc3 	bl	800496a <HAL_GPIO_TogglePin>

	              break;
 8002de4:	bf00      	nop
	          }

	      }
	      __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8002de6:	4b13      	ldr	r3, [pc, #76]	@ (8002e34 <main+0x1334>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2200      	movs	r2, #0
 8002dec:	63da      	str	r2, [r3, #60]	@ 0x3c
  {
 8002dee:	f7fe bead 	b.w	8001b4c <main+0x4c>
 8002df2:	bf00      	nop
 8002df4:	66666667 	.word	0x66666667
 8002df8:	2000002c 	.word	0x2000002c
 8002dfc:	0800c0f0 	.word	0x0800c0f0
 8002e00:	0800c100 	.word	0x0800c100
 8002e04:	0800c108 	.word	0x0800c108
 8002e08:	0800c118 	.word	0x0800c118
 8002e0c:	0800c128 	.word	0x0800c128
 8002e10:	2000515c 	.word	0x2000515c
 8002e14:	200056b1 	.word	0x200056b1
 8002e18:	200056b0 	.word	0x200056b0
 8002e1c:	40020400 	.word	0x40020400
 8002e20:	20006655 	.word	0x20006655
 8002e24:	20005688 	.word	0x20005688
 8002e28:	200056b4 	.word	0x200056b4
 8002e2c:	0800c13c 	.word	0x0800c13c
 8002e30:	20006654 	.word	0x20006654
 8002e34:	20005114 	.word	0x20005114

08002e38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b094      	sub	sp, #80	@ 0x50
 8002e3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e3e:	f107 0320 	add.w	r3, r7, #32
 8002e42:	2230      	movs	r2, #48	@ 0x30
 8002e44:	2100      	movs	r1, #0
 8002e46:	4618      	mov	r0, r3
 8002e48:	f006 f83b 	bl	8008ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e4c:	f107 030c 	add.w	r3, r7, #12
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	4b28      	ldr	r3, [pc, #160]	@ (8002f04 <SystemClock_Config+0xcc>)
 8002e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e64:	4a27      	ldr	r2, [pc, #156]	@ (8002f04 <SystemClock_Config+0xcc>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e6c:	4b25      	ldr	r3, [pc, #148]	@ (8002f04 <SystemClock_Config+0xcc>)
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
 8002e7c:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <SystemClock_Config+0xd0>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a21      	ldr	r2, [pc, #132]	@ (8002f08 <SystemClock_Config+0xd0>)
 8002e82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e86:	6013      	str	r3, [r2, #0]
 8002e88:	4b1f      	ldr	r3, [pc, #124]	@ (8002f08 <SystemClock_Config+0xd0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002e94:	2301      	movs	r3, #1
 8002e96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002e98:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ea2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002eac:	23a8      	movs	r3, #168	@ 0xa8
 8002eae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002eb4:	2307      	movs	r3, #7
 8002eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb8:	f107 0320 	add.w	r3, r7, #32
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fb97 	bl	80055f0 <HAL_RCC_OscConfig>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002ec8:	f000 fa60 	bl	800338c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ecc:	230f      	movs	r3, #15
 8002ece:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002ed8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002edc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ede:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ee2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002ee4:	f107 030c 	add.w	r3, r7, #12
 8002ee8:	2105      	movs	r1, #5
 8002eea:	4618      	mov	r0, r3
 8002eec:	f002 fdf8 	bl	8005ae0 <HAL_RCC_ClockConfig>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002ef6:	f000 fa49 	bl	800338c <Error_Handler>
  }
}
 8002efa:	bf00      	nop
 8002efc:	3750      	adds	r7, #80	@ 0x50
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000

08002f0c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f1e:	4b21      	ldr	r3, [pc, #132]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f20:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <MX_ADC1_Init+0x9c>)
 8002f22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f24:	4b1f      	ldr	r3, [pc, #124]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002f2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f32:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f38:	4b1a      	ldr	r3, [pc, #104]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f3e:	4b19      	ldr	r3, [pc, #100]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f46:	4b17      	ldr	r3, [pc, #92]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f4c:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f4e:	4a17      	ldr	r2, [pc, #92]	@ (8002fac <MX_ADC1_Init+0xa0>)
 8002f50:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f52:	4b14      	ldr	r3, [pc, #80]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f58:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f5e:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f66:	4b0f      	ldr	r3, [pc, #60]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f6c:	480d      	ldr	r0, [pc, #52]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f6e:	f000 fd9f 	bl	8003ab0 <HAL_ADC_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f78:	f000 fa08 	bl	800338c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4805      	ldr	r0, [pc, #20]	@ (8002fa4 <MX_ADC1_Init+0x98>)
 8002f8e:	f000 ff3d 	bl	8003e0c <HAL_ADC_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002f98:	f000 f9f8 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20005078 	.word	0x20005078
 8002fa8:	40012000 	.word	0x40012000
 8002fac:	0f000001 	.word	0x0f000001

08002fb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8003028 <MX_I2C1_Init+0x78>)
 8002fb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002fba:	4b1a      	ldr	r3, [pc, #104]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	@ (800302c <MX_I2C1_Init+0x7c>)
 8002fbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fc0:	4b18      	ldr	r3, [pc, #96]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc6:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fcc:	4b15      	ldr	r3, [pc, #84]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002fd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b12      	ldr	r3, [pc, #72]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe0:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002fec:	480d      	ldr	r0, [pc, #52]	@ (8003024 <MX_I2C1_Init+0x74>)
 8002fee:	f001 fcd7 	bl	80049a0 <HAL_I2C_Init>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002ff8:	f000 f9c8 	bl	800338c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4809      	ldr	r0, [pc, #36]	@ (8003024 <MX_I2C1_Init+0x74>)
 8003000:	f002 f96b 	bl	80052da <HAL_I2CEx_ConfigAnalogFilter>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800300a:	f000 f9bf 	bl	800338c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800300e:	2100      	movs	r1, #0
 8003010:	4804      	ldr	r0, [pc, #16]	@ (8003024 <MX_I2C1_Init+0x74>)
 8003012:	f002 f99e 	bl	8005352 <HAL_I2CEx_ConfigDigitalFilter>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800301c:	f000 f9b6 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200050c0 	.word	0x200050c0
 8003028:	40005400 	.word	0x40005400
 800302c:	000186a0 	.word	0x000186a0

08003030 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b08e      	sub	sp, #56	@ 0x38
 8003034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003036:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	605a      	str	r2, [r3, #4]
 8003040:	609a      	str	r2, [r3, #8]
 8003042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003044:	f107 0320 	add.w	r3, r7, #32
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800304e:	1d3b      	adds	r3, r7, #4
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	60da      	str	r2, [r3, #12]
 800305a:	611a      	str	r2, [r3, #16]
 800305c:	615a      	str	r2, [r3, #20]
 800305e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003060:	4b2c      	ldr	r3, [pc, #176]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003062:	4a2d      	ldr	r2, [pc, #180]	@ (8003118 <MX_TIM3_Init+0xe8>)
 8003064:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8003066:	4b2b      	ldr	r3, [pc, #172]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003068:	2253      	movs	r2, #83	@ 0x53
 800306a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800306c:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <MX_TIM3_Init+0xe4>)
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003072:	4b28      	ldr	r3, [pc, #160]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003074:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003078:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800307a:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <MX_TIM3_Init+0xe4>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003080:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003082:	2200      	movs	r2, #0
 8003084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003086:	4823      	ldr	r0, [pc, #140]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003088:	f002 ff4a 	bl	8005f20 <HAL_TIM_Base_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8003092:	f000 f97b 	bl	800338c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800309c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80030a0:	4619      	mov	r1, r3
 80030a2:	481c      	ldr	r0, [pc, #112]	@ (8003114 <MX_TIM3_Init+0xe4>)
 80030a4:	f003 f96e 	bl	8006384 <HAL_TIM_ConfigClockSource>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80030ae:	f000 f96d 	bl	800338c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80030b2:	4818      	ldr	r0, [pc, #96]	@ (8003114 <MX_TIM3_Init+0xe4>)
 80030b4:	f002 ff83 	bl	8005fbe <HAL_TIM_PWM_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80030be:	f000 f965 	bl	800338c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80030ca:	f107 0320 	add.w	r3, r7, #32
 80030ce:	4619      	mov	r1, r3
 80030d0:	4810      	ldr	r0, [pc, #64]	@ (8003114 <MX_TIM3_Init+0xe4>)
 80030d2:	f003 fd3b 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80030dc:	f000 f956 	bl	800338c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030e0:	2360      	movs	r3, #96	@ 0x60
 80030e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e8:	2300      	movs	r3, #0
 80030ea:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030f0:	1d3b      	adds	r3, r7, #4
 80030f2:	2208      	movs	r2, #8
 80030f4:	4619      	mov	r1, r3
 80030f6:	4807      	ldr	r0, [pc, #28]	@ (8003114 <MX_TIM3_Init+0xe4>)
 80030f8:	f003 f882 	bl	8006200 <HAL_TIM_PWM_ConfigChannel>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8003102:	f000 f943 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003106:	4803      	ldr	r0, [pc, #12]	@ (8003114 <MX_TIM3_Init+0xe4>)
 8003108:	f000 fa1c 	bl	8003544 <HAL_TIM_MspPostInit>

}
 800310c:	bf00      	nop
 800310e:	3738      	adds	r7, #56	@ 0x38
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	20005114 	.word	0x20005114
 8003118:	40000400 	.word	0x40000400

0800311c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <MX_USART3_UART_Init+0x50>)
 8003124:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003128:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800312c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800312e:	4b0e      	ldr	r3, [pc, #56]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800313a:	4b0b      	ldr	r3, [pc, #44]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 800313c:	2200      	movs	r2, #0
 800313e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003140:	4b09      	ldr	r3, [pc, #36]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003142:	220c      	movs	r2, #12
 8003144:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003152:	4805      	ldr	r0, [pc, #20]	@ (8003168 <MX_USART3_UART_Init+0x4c>)
 8003154:	f003 fd76 	bl	8006c44 <HAL_UART_Init>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800315e:	f000 f915 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003162:	bf00      	nop
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000515c 	.word	0x2000515c
 800316c:	40004800 	.word	0x40004800

08003170 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003174:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003176:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800317a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800317c:	4b12      	ldr	r3, [pc, #72]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800317e:	2204      	movs	r2, #4
 8003180:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003182:	4b11      	ldr	r3, [pc, #68]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003184:	2202      	movs	r2, #2
 8003186:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8003188:	4b0f      	ldr	r3, [pc, #60]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800318a:	2200      	movs	r2, #0
 800318c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800318e:	4b0e      	ldr	r3, [pc, #56]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003190:	2202      	movs	r2, #2
 8003192:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8003194:	4b0c      	ldr	r3, [pc, #48]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003196:	2201      	movs	r2, #1
 8003198:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800319a:	4b0b      	ldr	r3, [pc, #44]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800319c:	2200      	movs	r2, #0
 800319e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031a0:	4b09      	ldr	r3, [pc, #36]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80031a6:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031ac:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031b2:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b4:	f002 f90c 	bl	80053d0 <HAL_PCD_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031be:	f000 f8e5 	bl	800338c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200051a4 	.word	0x200051a4

080031cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	@ 0x28
 80031d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d2:	f107 0314 	add.w	r3, r7, #20
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
 80031e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	4b45      	ldr	r3, [pc, #276]	@ (80032fc <MX_GPIO_Init+0x130>)
 80031e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ea:	4a44      	ldr	r2, [pc, #272]	@ (80032fc <MX_GPIO_Init+0x130>)
 80031ec:	f043 0304 	orr.w	r3, r3, #4
 80031f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80031f2:	4b42      	ldr	r3, [pc, #264]	@ (80032fc <MX_GPIO_Init+0x130>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	4b3e      	ldr	r3, [pc, #248]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	4a3d      	ldr	r2, [pc, #244]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800320c:	6313      	str	r3, [r2, #48]	@ 0x30
 800320e:	4b3b      	ldr	r3, [pc, #236]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	4b37      	ldr	r3, [pc, #220]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a36      	ldr	r2, [pc, #216]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b34      	ldr	r3, [pc, #208]	@ (80032fc <MX_GPIO_Init+0x130>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	607b      	str	r3, [r7, #4]
 800323a:	4b30      	ldr	r3, [pc, #192]	@ (80032fc <MX_GPIO_Init+0x130>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	4a2f      	ldr	r2, [pc, #188]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003240:	f043 0302 	orr.w	r3, r3, #2
 8003244:	6313      	str	r3, [r2, #48]	@ 0x30
 8003246:	4b2d      	ldr	r3, [pc, #180]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	607b      	str	r3, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003252:	2300      	movs	r3, #0
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4b29      	ldr	r3, [pc, #164]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	4a28      	ldr	r2, [pc, #160]	@ (80032fc <MX_GPIO_Init+0x130>)
 800325c:	f043 0308 	orr.w	r3, r3, #8
 8003260:	6313      	str	r3, [r2, #48]	@ 0x30
 8003262:	4b26      	ldr	r3, [pc, #152]	@ (80032fc <MX_GPIO_Init+0x130>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	211e      	movs	r1, #30
 8003272:	4823      	ldr	r0, [pc, #140]	@ (8003300 <MX_GPIO_Init+0x134>)
 8003274:	f001 fb60 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_3_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8003278:	2200      	movs	r2, #0
 800327a:	f244 0181 	movw	r1, #16513	@ 0x4081
 800327e:	4821      	ldr	r0, [pc, #132]	@ (8003304 <MX_GPIO_Init+0x138>)
 8003280:	f001 fb5a 	bl	8004938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003284:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800328a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800328e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003290:	2300      	movs	r3, #0
 8003292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003294:	f107 0314 	add.w	r3, r7, #20
 8003298:	4619      	mov	r1, r3
 800329a:	481b      	ldr	r0, [pc, #108]	@ (8003308 <MX_GPIO_Init+0x13c>)
 800329c:	f001 f988 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80032a0:	231e      	movs	r3, #30
 80032a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a4:	2301      	movs	r3, #1
 80032a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	4619      	mov	r1, r3
 80032b6:	4812      	ldr	r0, [pc, #72]	@ (8003300 <MX_GPIO_Init+0x134>)
 80032b8:	f001 f97a 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_3_Pin LED_2_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_3_Pin|LED_2_Pin;
 80032bc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80032c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032c2:	2301      	movs	r3, #1
 80032c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4619      	mov	r1, r3
 80032d4:	480b      	ldr	r0, [pc, #44]	@ (8003304 <MX_GPIO_Init+0x138>)
 80032d6:	f001 f96b 	bl	80045b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1_Pin|GPIO_PIN_2_Pin|GPIO_PIN_3_Pin|GPIO_PIN_4_Pin;
 80032da:	231e      	movs	r3, #30
 80032dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032e2:	2301      	movs	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e6:	f107 0314 	add.w	r3, r7, #20
 80032ea:	4619      	mov	r1, r3
 80032ec:	4805      	ldr	r0, [pc, #20]	@ (8003304 <MX_GPIO_Init+0x138>)
 80032ee:	f001 f95f 	bl	80045b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032f2:	bf00      	nop
 80032f4:	3728      	adds	r7, #40	@ 0x28
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800
 8003300:	40020000 	.word	0x40020000
 8003304:	40020400 	.word	0x40020400
 8003308:	40020800 	.word	0x40020800

0800330c <HAL_UART_RxCpltCallback>:
//}



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a17      	ldr	r2, [pc, #92]	@ (8003378 <HAL_UART_RxCpltCallback+0x6c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d128      	bne.n	8003370 <HAL_UART_RxCpltCallback+0x64>
    {
        rx_buffer[15] = '\0';  // 加結尾
 800331e:	4b17      	ldr	r3, [pc, #92]	@ (800337c <HAL_UART_RxCpltCallback+0x70>)
 8003320:	2200      	movs	r2, #0
 8003322:	73da      	strb	r2, [r3, #15]
        LCD16_Clear();
 8003324:	f7fd fe70 	bl	8001008 <LCD16_Clear>
        LCD16_SetCursor(0, 0);
 8003328:	2100      	movs	r1, #0
 800332a:	2000      	movs	r0, #0
 800332c:	f7fd fe76 	bl	800101c <LCD16_SetCursor>
        LCD16_PrintStr("Now Playing:");
 8003330:	4813      	ldr	r0, [pc, #76]	@ (8003380 <HAL_UART_RxCpltCallback+0x74>)
 8003332:	f7fd fe97 	bl	8001064 <LCD16_PrintStr>
        LCD16_SetCursor(0, 1);
 8003336:	2101      	movs	r1, #1
 8003338:	2000      	movs	r0, #0
 800333a:	f7fd fe6f 	bl	800101c <LCD16_SetCursor>
        LCD16_PrintStr((char *)rx_buffer);
 800333e:	480f      	ldr	r0, [pc, #60]	@ (800337c <HAL_UART_RxCpltCallback+0x70>)
 8003340:	f7fd fe90 	bl	8001064 <LCD16_PrintStr>

        // 根據歌曲名稱找到索引
        int song_index = Match_Song_Name((char *)rx_buffer);
 8003344:	480d      	ldr	r0, [pc, #52]	@ (800337c <HAL_UART_RxCpltCallback+0x70>)
 8003346:	f7fd ff7d 	bl	8001244 <Match_Song_Name>
 800334a:	60f8      	str	r0, [r7, #12]
        if (song_index >= 0) {
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	db09      	blt.n	8003366 <HAL_UART_RxCpltCallback+0x5a>
            Play_Song_With_Interrupt(songs[song_index]);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003358:	fb02 f303 	mul.w	r3, r2, r3
 800335c:	4a09      	ldr	r2, [pc, #36]	@ (8003384 <HAL_UART_RxCpltCallback+0x78>)
 800335e:	4413      	add	r3, r2
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe facd 	bl	8001900 <Play_Song_With_Interrupt>
        }

        HAL_UART_Receive_IT(&huart3, rx_buffer, 16);  // 重啟接收
 8003366:	2210      	movs	r2, #16
 8003368:	4904      	ldr	r1, [pc, #16]	@ (800337c <HAL_UART_RxCpltCallback+0x70>)
 800336a:	4807      	ldr	r0, [pc, #28]	@ (8003388 <HAL_UART_RxCpltCallback+0x7c>)
 800336c:	f003 fd45 	bl	8006dfa <HAL_UART_Receive_IT>
    }
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40004800 	.word	0x40004800
 800337c:	20006658 	.word	0x20006658
 8003380:	0800c14c 	.word	0x0800c14c
 8003384:	2000002c 	.word	0x2000002c
 8003388:	2000515c 	.word	0x2000515c

0800338c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003390:	b672      	cpsid	i
}
 8003392:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003394:	bf00      	nop
 8003396:	e7fd      	b.n	8003394 <Error_Handler+0x8>

08003398 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	607b      	str	r3, [r7, #4]
 80033a2:	4b10      	ldr	r3, [pc, #64]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a6:	4a0f      	ldr	r2, [pc, #60]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80033ae:	4b0d      	ldr	r3, [pc, #52]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033b6:	607b      	str	r3, [r7, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a08      	ldr	r2, [pc, #32]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b06      	ldr	r3, [pc, #24]	@ (80033e4 <HAL_MspInit+0x4c>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033d6:	bf00      	nop
 80033d8:	370c      	adds	r7, #12
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	40023800 	.word	0x40023800

080033e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08a      	sub	sp, #40	@ 0x28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 0314 	add.w	r3, r7, #20
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <HAL_ADC_MspInit+0x7c>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d127      	bne.n	800345a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
 800340e:	4b16      	ldr	r3, [pc, #88]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	4a15      	ldr	r2, [pc, #84]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 8003414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003418:	6453      	str	r3, [r2, #68]	@ 0x44
 800341a:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	613b      	str	r3, [r7, #16]
 8003424:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b0f      	ldr	r3, [pc, #60]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800342e:	4a0e      	ldr	r2, [pc, #56]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6313      	str	r3, [r2, #48]	@ 0x30
 8003436:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_ADC_MspInit+0x80>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003442:	2301      	movs	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003446:	2303      	movs	r3, #3
 8003448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	4805      	ldr	r0, [pc, #20]	@ (800346c <HAL_ADC_MspInit+0x84>)
 8003456:	f001 f8ab 	bl	80045b0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	@ 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40012000 	.word	0x40012000
 8003468:	40023800 	.word	0x40023800
 800346c:	40020800 	.word	0x40020800

08003470 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	@ 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003478:	f107 0314 	add.w	r3, r7, #20
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]
 8003486:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a19      	ldr	r2, [pc, #100]	@ (80034f4 <HAL_I2C_MspInit+0x84>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d12c      	bne.n	80034ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	4b18      	ldr	r3, [pc, #96]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 8003498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349a:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 800349c:	f043 0302 	orr.w	r3, r3, #2
 80034a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80034a2:	4b15      	ldr	r3, [pc, #84]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 80034a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80034ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034b4:	2312      	movs	r3, #18
 80034b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034bc:	2303      	movs	r3, #3
 80034be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80034c0:	2304      	movs	r3, #4
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	4619      	mov	r1, r3
 80034ca:	480c      	ldr	r0, [pc, #48]	@ (80034fc <HAL_I2C_MspInit+0x8c>)
 80034cc:	f001 f870 	bl	80045b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	60fb      	str	r3, [r7, #12]
 80034d4:	4b08      	ldr	r3, [pc, #32]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	4a07      	ldr	r2, [pc, #28]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 80034da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80034de:	6413      	str	r3, [r2, #64]	@ 0x40
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <HAL_I2C_MspInit+0x88>)
 80034e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80034ec:	bf00      	nop
 80034ee:	3728      	adds	r7, #40	@ 0x28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40005400 	.word	0x40005400
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40020400 	.word	0x40020400

08003500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a0b      	ldr	r2, [pc, #44]	@ (800353c <HAL_TIM_Base_MspInit+0x3c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <HAL_TIM_Base_MspInit+0x40>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351a:	4a09      	ldr	r2, [pc, #36]	@ (8003540 <HAL_TIM_Base_MspInit+0x40>)
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	6413      	str	r3, [r2, #64]	@ 0x40
 8003522:	4b07      	ldr	r3, [pc, #28]	@ (8003540 <HAL_TIM_Base_MspInit+0x40>)
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800352e:	bf00      	nop
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40000400 	.word	0x40000400
 8003540:	40023800 	.word	0x40023800

08003544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a12      	ldr	r2, [pc, #72]	@ (80035ac <HAL_TIM_MspPostInit+0x68>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d11e      	bne.n	80035a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <HAL_TIM_MspPostInit+0x6c>)
 800356c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <HAL_TIM_MspPostInit+0x6c>)
 8003570:	f043 0304 	orr.w	r3, r3, #4
 8003574:	6313      	str	r3, [r2, #48]	@ 0x30
 8003576:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <HAL_TIM_MspPostInit+0x6c>)
 8003578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	60bb      	str	r3, [r7, #8]
 8003580:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003582:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003586:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003588:	2302      	movs	r3, #2
 800358a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358c:	2300      	movs	r3, #0
 800358e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003590:	2300      	movs	r3, #0
 8003592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003594:	2302      	movs	r3, #2
 8003596:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003598:	f107 030c 	add.w	r3, r7, #12
 800359c:	4619      	mov	r1, r3
 800359e:	4805      	ldr	r0, [pc, #20]	@ (80035b4 <HAL_TIM_MspPostInit+0x70>)
 80035a0:	f001 f806 	bl	80045b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035a4:	bf00      	nop
 80035a6:	3720      	adds	r7, #32
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40023800 	.word	0x40023800
 80035b4:	40020800 	.word	0x40020800

080035b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08a      	sub	sp, #40	@ 0x28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c0:	f107 0314 	add.w	r3, r7, #20
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
 80035ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	@ (800364c <HAL_UART_MspInit+0x94>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d134      	bne.n	8003644 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80035da:	2300      	movs	r3, #0
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <HAL_UART_MspInit+0x98>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003650 <HAL_UART_MspInit+0x98>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ea:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_UART_MspInit+0x98>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <HAL_UART_MspInit+0x98>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	4a14      	ldr	r2, [pc, #80]	@ (8003650 <HAL_UART_MspInit+0x98>)
 8003600:	f043 0308 	orr.w	r3, r3, #8
 8003604:	6313      	str	r3, [r2, #48]	@ 0x30
 8003606:	4b12      	ldr	r3, [pc, #72]	@ (8003650 <HAL_UART_MspInit+0x98>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8003612:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003624:	2307      	movs	r3, #7
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003628:	f107 0314 	add.w	r3, r7, #20
 800362c:	4619      	mov	r1, r3
 800362e:	4809      	ldr	r0, [pc, #36]	@ (8003654 <HAL_UART_MspInit+0x9c>)
 8003630:	f000 ffbe 	bl	80045b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8003634:	2200      	movs	r2, #0
 8003636:	2101      	movs	r1, #1
 8003638:	2027      	movs	r0, #39	@ 0x27
 800363a:	f000 fef0 	bl	800441e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800363e:	2027      	movs	r0, #39	@ 0x27
 8003640:	f000 ff09 	bl	8004456 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	@ 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40004800 	.word	0x40004800
 8003650:	40023800 	.word	0x40023800
 8003654:	40020c00 	.word	0x40020c00

08003658 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b08a      	sub	sp, #40	@ 0x28
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003660:	f107 0314 	add.w	r3, r7, #20
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003678:	d13f      	bne.n	80036fa <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	4b21      	ldr	r3, [pc, #132]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	4a20      	ldr	r2, [pc, #128]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	6313      	str	r3, [r2, #48]	@ 0x30
 800368a:	4b1e      	ldr	r3, [pc, #120]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 800368c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	613b      	str	r3, [r7, #16]
 8003694:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8003696:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800369a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a4:	2303      	movs	r3, #3
 80036a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80036a8:	230a      	movs	r3, #10
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	4815      	ldr	r0, [pc, #84]	@ (8003708 <HAL_PCD_MspInit+0xb0>)
 80036b4:	f000 ff7c 	bl	80045b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80036b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80036c6:	f107 0314 	add.w	r3, r7, #20
 80036ca:	4619      	mov	r1, r3
 80036cc:	480e      	ldr	r0, [pc, #56]	@ (8003708 <HAL_PCD_MspInit+0xb0>)
 80036ce:	f000 ff6f 	bl	80045b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80036d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 80036d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 80036d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036dc:	6353      	str	r3, [r2, #52]	@ 0x34
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 80036e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e6:	4a07      	ldr	r2, [pc, #28]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 80036e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ee:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <HAL_PCD_MspInit+0xac>)
 80036f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f6:	60fb      	str	r3, [r7, #12]
 80036f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80036fa:	bf00      	nop
 80036fc:	3728      	adds	r7, #40	@ 0x28
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40020000 	.word	0x40020000

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <NMI_Handler+0x4>

08003714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <HardFault_Handler+0x4>

0800371c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <MemManage_Handler+0x4>

08003724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <UsageFault_Handler+0x4>

08003734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800375e:	b580      	push	{r7, lr}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003762:	f000 f961 	bl	8003a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
	...

0800376c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003770:	4802      	ldr	r0, [pc, #8]	@ (800377c <USART3_IRQHandler+0x10>)
 8003772:	f003 fb67 	bl	8006e44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	2000515c 	.word	0x2000515c

08003780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return 1;
 8003784:	2301      	movs	r3, #1
}
 8003786:	4618      	mov	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <_kill>:

int _kill(int pid, int sig)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800379a:	f005 fc0d 	bl	8008fb8 <__errno>
 800379e:	4603      	mov	r3, r0
 80037a0:	2216      	movs	r2, #22
 80037a2:	601a      	str	r2, [r3, #0]
  return -1;
 80037a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_exit>:

void _exit (int status)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff ffe7 	bl	8003790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037c2:	bf00      	nop
 80037c4:	e7fd      	b.n	80037c2 <_exit+0x12>

080037c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e00a      	b.n	80037ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037d8:	f3af 8000 	nop.w
 80037dc:	4601      	mov	r1, r0
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	60ba      	str	r2, [r7, #8]
 80037e4:	b2ca      	uxtb	r2, r1
 80037e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	3301      	adds	r3, #1
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	dbf0      	blt.n	80037d8 <_read+0x12>
  }

  return len;
 80037f6:	687b      	ldr	r3, [r7, #4]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e009      	b.n	8003826 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	60ba      	str	r2, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	3301      	adds	r3, #1
 8003824:	617b      	str	r3, [r7, #20]
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	429a      	cmp	r2, r3
 800382c:	dbf1      	blt.n	8003812 <_write+0x12>
  }
  return len;
 800382e:	687b      	ldr	r3, [r7, #4]
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <_close>:

int _close(int file)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003860:	605a      	str	r2, [r3, #4]
  return 0;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <_isatty>:

int _isatty(int file)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003878:	2301      	movs	r3, #1
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038a8:	4a14      	ldr	r2, [pc, #80]	@ (80038fc <_sbrk+0x5c>)
 80038aa:	4b15      	ldr	r3, [pc, #84]	@ (8003900 <_sbrk+0x60>)
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038b4:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <_sbrk+0x64>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d102      	bne.n	80038c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <_sbrk+0x64>)
 80038be:	4a12      	ldr	r2, [pc, #72]	@ (8003908 <_sbrk+0x68>)
 80038c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <_sbrk+0x64>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038d0:	f005 fb72 	bl	8008fb8 <__errno>
 80038d4:	4603      	mov	r3, r0
 80038d6:	220c      	movs	r2, #12
 80038d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	e009      	b.n	80038f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038e0:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <_sbrk+0x64>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4413      	add	r3, r2
 80038ee:	4a05      	ldr	r2, [pc, #20]	@ (8003904 <_sbrk+0x64>)
 80038f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	20030000 	.word	0x20030000
 8003900:	00000400 	.word	0x00000400
 8003904:	20006678 	.word	0x20006678
 8003908:	200067d0 	.word	0x200067d0

0800390c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003910:	4b06      	ldr	r3, [pc, #24]	@ (800392c <SystemInit+0x20>)
 8003912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003916:	4a05      	ldr	r2, [pc, #20]	@ (800392c <SystemInit+0x20>)
 8003918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800391c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003920:	bf00      	nop
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00

08003930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003968 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003934:	f7ff ffea 	bl	800390c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003938:	480c      	ldr	r0, [pc, #48]	@ (800396c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800393a:	490d      	ldr	r1, [pc, #52]	@ (8003970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800393c:	4a0d      	ldr	r2, [pc, #52]	@ (8003974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800393e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003940:	e002      	b.n	8003948 <LoopCopyDataInit>

08003942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003946:	3304      	adds	r3, #4

08003948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800394a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800394c:	d3f9      	bcc.n	8003942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800394e:	4a0a      	ldr	r2, [pc, #40]	@ (8003978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003950:	4c0a      	ldr	r4, [pc, #40]	@ (800397c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003954:	e001      	b.n	800395a <LoopFillZerobss>

08003956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003958:	3204      	adds	r2, #4

0800395a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800395a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800395c:	d3fb      	bcc.n	8003956 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800395e:	f005 fb31 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003962:	f7fe f8cd 	bl	8001b00 <main>
  bx  lr    
 8003966:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003968:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800396c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003970:	20005058 	.word	0x20005058
  ldr r2, =_sidata
 8003974:	0800c580 	.word	0x0800c580
  ldr r2, =_sbss
 8003978:	20005058 	.word	0x20005058
  ldr r4, =_ebss
 800397c:	200067cc 	.word	0x200067cc

08003980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003980:	e7fe      	b.n	8003980 <ADC_IRQHandler>
	...

08003984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003988:	4b0e      	ldr	r3, [pc, #56]	@ (80039c4 <HAL_Init+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <HAL_Init+0x40>)
 800398e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003994:	4b0b      	ldr	r3, [pc, #44]	@ (80039c4 <HAL_Init+0x40>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a0a      	ldr	r2, [pc, #40]	@ (80039c4 <HAL_Init+0x40>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800399e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039a0:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <HAL_Init+0x40>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a07      	ldr	r2, [pc, #28]	@ (80039c4 <HAL_Init+0x40>)
 80039a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039ac:	2003      	movs	r0, #3
 80039ae:	f000 fd2b 	bl	8004408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f000 f808 	bl	80039c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039b8:	f7ff fcee 	bl	8003398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023c00 	.word	0x40023c00

080039c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039d0:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_InitTick+0x54>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b12      	ldr	r3, [pc, #72]	@ (8003a20 <HAL_InitTick+0x58>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039de:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fd43 	bl	8004472 <HAL_SYSTICK_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00e      	b.n	8003a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0f      	cmp	r3, #15
 80039fa:	d80a      	bhi.n	8003a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039fc:	2200      	movs	r2, #0
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f000 fd0b 	bl	800441e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a08:	4a06      	ldr	r2, [pc, #24]	@ (8003a24 <HAL_InitTick+0x5c>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	20004e74 	.word	0x20004e74
 8003a20:	20004e7c 	.word	0x20004e7c
 8003a24:	20004e78 	.word	0x20004e78

08003a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <HAL_IncTick+0x20>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_IncTick+0x24>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	@ (8003a4c <HAL_IncTick+0x24>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	20004e7c 	.word	0x20004e7c
 8003a4c:	2000667c 	.word	0x2000667c

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	2000667c 	.word	0x2000667c

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_Delay+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	20004e7c 	.word	0x20004e7c

08003ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e033      	b.n	8003b2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff fc8a 	bl	80033e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d118      	bne.n	8003b20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003af6:	f023 0302 	bic.w	r3, r3, #2
 8003afa:	f043 0202 	orr.w	r2, r3, #2
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 fab4 	bl	8004070 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f043 0201 	orr.w	r2, r3, #1
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8003b1e:	e001      	b.n	8003b24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_Start+0x1a>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e0b2      	b.n	8003cb8 <HAL_ADC_Start+0x180>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d018      	beq.n	8003b9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003b78:	4b52      	ldr	r3, [pc, #328]	@ (8003cc4 <HAL_ADC_Start+0x18c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	@ (8003cc8 <HAL_ADC_Start+0x190>)
 8003b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b82:	0c9a      	lsrs	r2, r3, #18
 8003b84:	4613      	mov	r3, r2
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	4413      	add	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b8c:	e002      	b.n	8003b94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f9      	bne.n	8003b8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d17a      	bne.n	8003c9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003bb0:	f023 0301 	bic.w	r3, r3, #1
 8003bb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d007      	beq.n	8003bda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bce:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bd2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be6:	d106      	bne.n	8003bf6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bec:	f023 0206 	bic.w	r2, r3, #6
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	645a      	str	r2, [r3, #68]	@ 0x44
 8003bf4:	e002      	b.n	8003bfc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c04:	4b31      	ldr	r3, [pc, #196]	@ (8003ccc <HAL_ADC_Start+0x194>)
 8003c06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003c10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 031f 	and.w	r3, r3, #31
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d12a      	bne.n	8003c74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	@ (8003cd0 <HAL_ADC_Start+0x198>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d015      	beq.n	8003c54 <HAL_ADC_Start+0x11c>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a29      	ldr	r2, [pc, #164]	@ (8003cd4 <HAL_ADC_Start+0x19c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d105      	bne.n	8003c3e <HAL_ADC_Start+0x106>
 8003c32:	4b26      	ldr	r3, [pc, #152]	@ (8003ccc <HAL_ADC_Start+0x194>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00a      	beq.n	8003c54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a25      	ldr	r2, [pc, #148]	@ (8003cd8 <HAL_ADC_Start+0x1a0>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d136      	bne.n	8003cb6 <HAL_ADC_Start+0x17e>
 8003c48:	4b20      	ldr	r3, [pc, #128]	@ (8003ccc <HAL_ADC_Start+0x194>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f003 0310 	and.w	r3, r3, #16
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d130      	bne.n	8003cb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d129      	bne.n	8003cb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c70:	609a      	str	r2, [r3, #8]
 8003c72:	e020      	b.n	8003cb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a15      	ldr	r2, [pc, #84]	@ (8003cd0 <HAL_ADC_Start+0x198>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d11b      	bne.n	8003cb6 <HAL_ADC_Start+0x17e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d114      	bne.n	8003cb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c9a:	609a      	str	r2, [r3, #8]
 8003c9c:	e00b      	b.n	8003cb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca2:	f043 0210 	orr.w	r2, r3, #16
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cae:	f043 0201 	orr.w	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	20004e74 	.word	0x20004e74
 8003cc8:	431bde83 	.word	0x431bde83
 8003ccc:	40012300 	.word	0x40012300
 8003cd0:	40012000 	.word	0x40012000
 8003cd4:	40012100 	.word	0x40012100
 8003cd8:	40012200 	.word	0x40012200

08003cdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cf8:	d113      	bne.n	8003d22 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003d04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d08:	d10b      	bne.n	8003d22 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f043 0220 	orr.w	r2, r3, #32
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e063      	b.n	8003dea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d22:	f7ff fe95 	bl	8003a50 <HAL_GetTick>
 8003d26:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d28:	e021      	b.n	8003d6e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d01d      	beq.n	8003d6e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d007      	beq.n	8003d48 <HAL_ADC_PollForConversion+0x6c>
 8003d38:	f7ff fe8a 	bl	8003a50 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d212      	bcs.n	8003d6e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d00b      	beq.n	8003d6e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f043 0204 	orr.w	r2, r3, #4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e03d      	b.n	8003dea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d1d6      	bne.n	8003d2a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f06f 0212 	mvn.w	r2, #18
 8003d84:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d123      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d11f      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d006      	beq.n	8003dc4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d111      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de0:	f043 0201 	orr.w	r2, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b085      	sub	sp, #20
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x1c>
 8003e24:	2302      	movs	r3, #2
 8003e26:	e113      	b.n	8004050 <HAL_ADC_ConfigChannel+0x244>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b09      	cmp	r3, #9
 8003e36:	d925      	bls.n	8003e84 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68d9      	ldr	r1, [r3, #12]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3b1e      	subs	r3, #30
 8003e4e:	2207      	movs	r2, #7
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	43da      	mvns	r2, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	400a      	ands	r2, r1
 8003e5c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68d9      	ldr	r1, [r3, #12]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	4618      	mov	r0, r3
 8003e70:	4603      	mov	r3, r0
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4403      	add	r3, r0
 8003e76:	3b1e      	subs	r3, #30
 8003e78:	409a      	lsls	r2, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	60da      	str	r2, [r3, #12]
 8003e82:	e022      	b.n	8003eca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6919      	ldr	r1, [r3, #16]
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	2207      	movs	r2, #7
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	43da      	mvns	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	400a      	ands	r2, r1
 8003ea6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6919      	ldr	r1, [r3, #16]
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	4618      	mov	r0, r3
 8003eba:	4603      	mov	r3, r0
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	4403      	add	r3, r0
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d824      	bhi.n	8003f1c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	4613      	mov	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	3b05      	subs	r3, #5
 8003ee4:	221f      	movs	r2, #31
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	43da      	mvns	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	400a      	ands	r2, r1
 8003ef2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	4618      	mov	r0, r3
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	4613      	mov	r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3b05      	subs	r3, #5
 8003f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	635a      	str	r2, [r3, #52]	@ 0x34
 8003f1a:	e04c      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	d824      	bhi.n	8003f6e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	3b23      	subs	r3, #35	@ 0x23
 8003f36:	221f      	movs	r2, #31
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	400a      	ands	r2, r1
 8003f44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	3b23      	subs	r3, #35	@ 0x23
 8003f60:	fa00 f203 	lsl.w	r2, r0, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f6c:	e023      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3b41      	subs	r3, #65	@ 0x41
 8003f80:	221f      	movs	r2, #31
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3b41      	subs	r3, #65	@ 0x41
 8003faa:	fa00 f203 	lsl.w	r2, r0, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fb6:	4b29      	ldr	r3, [pc, #164]	@ (800405c <HAL_ADC_ConfigChannel+0x250>)
 8003fb8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a28      	ldr	r2, [pc, #160]	@ (8004060 <HAL_ADC_ConfigChannel+0x254>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x1d8>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b12      	cmp	r3, #18
 8003fca:	d10b      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8004060 <HAL_ADC_ConfigChannel+0x254>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d12b      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x23a>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8004064 <HAL_ADC_ConfigChannel+0x258>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <HAL_ADC_ConfigChannel+0x1f4>
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b11      	cmp	r3, #17
 8003ffe:	d122      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a11      	ldr	r2, [pc, #68]	@ (8004064 <HAL_ADC_ConfigChannel+0x258>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d111      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004022:	4b11      	ldr	r3, [pc, #68]	@ (8004068 <HAL_ADC_ConfigChannel+0x25c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a11      	ldr	r2, [pc, #68]	@ (800406c <HAL_ADC_ConfigChannel+0x260>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	0c9a      	lsrs	r2, r3, #18
 800402e:	4613      	mov	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004038:	e002      	b.n	8004040 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3b01      	subs	r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f9      	bne.n	800403a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40012300 	.word	0x40012300
 8004060:	40012000 	.word	0x40012000
 8004064:	10000012 	.word	0x10000012
 8004068:	20004e74 	.word	0x20004e74
 800406c:	431bde83 	.word	0x431bde83

08004070 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004078:	4b79      	ldr	r3, [pc, #484]	@ (8004260 <ADC_Init+0x1f0>)
 800407a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	431a      	orrs	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	6859      	ldr	r1, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	021a      	lsls	r2, r3, #8
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80040c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6859      	ldr	r1, [r3, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004102:	4a58      	ldr	r2, [pc, #352]	@ (8004264 <ADC_Init+0x1f4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689a      	ldr	r2, [r3, #8]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004116:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6899      	ldr	r1, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004138:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6899      	ldr	r1, [r3, #8]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	430a      	orrs	r2, r1
 800414a:	609a      	str	r2, [r3, #8]
 800414c:	e00f      	b.n	800416e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800415c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689a      	ldr	r2, [r3, #8]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800416c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0202 	bic.w	r2, r2, #2
 800417c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6899      	ldr	r1, [r3, #8]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	7e1b      	ldrb	r3, [r3, #24]
 8004188:	005a      	lsls	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	430a      	orrs	r2, r1
 8004190:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01b      	beq.n	80041d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80041ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6859      	ldr	r1, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c6:	3b01      	subs	r3, #1
 80041c8:	035a      	lsls	r2, r3, #13
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e007      	b.n	80041e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80041f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	3b01      	subs	r3, #1
 8004200:	051a      	lsls	r2, r3, #20
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004218:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004226:	025a      	lsls	r2, r3, #9
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689a      	ldr	r2, [r3, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800423e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6899      	ldr	r1, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	029a      	lsls	r2, r3, #10
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	609a      	str	r2, [r3, #8]
}
 8004254:	bf00      	nop
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr
 8004260:	40012300 	.word	0x40012300
 8004264:	0f000001 	.word	0x0f000001

08004268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004278:	4b0c      	ldr	r3, [pc, #48]	@ (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800429a:	4a04      	ldr	r2, [pc, #16]	@ (80042ac <__NVIC_SetPriorityGrouping+0x44>)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	60d3      	str	r3, [r2, #12]
}
 80042a0:	bf00      	nop
 80042a2:	3714      	adds	r7, #20
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	e000ed00 	.word	0xe000ed00

080042b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042b4:	4b04      	ldr	r3, [pc, #16]	@ (80042c8 <__NVIC_GetPriorityGrouping+0x18>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	0a1b      	lsrs	r3, r3, #8
 80042ba:	f003 0307 	and.w	r3, r3, #7
}
 80042be:	4618      	mov	r0, r3
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	db0b      	blt.n	80042f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 021f 	and.w	r2, r3, #31
 80042e4:	4907      	ldr	r1, [pc, #28]	@ (8004304 <__NVIC_EnableIRQ+0x38>)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	095b      	lsrs	r3, r3, #5
 80042ec:	2001      	movs	r0, #1
 80042ee:	fa00 f202 	lsl.w	r2, r0, r2
 80042f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042f6:	bf00      	nop
 80042f8:	370c      	adds	r7, #12
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	e000e100 	.word	0xe000e100

08004308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	@ (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800435c:	b480      	push	{r7}
 800435e:	b089      	sub	sp, #36	@ 0x24
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f1c3 0307 	rsb	r3, r3, #7
 8004376:	2b04      	cmp	r3, #4
 8004378:	bf28      	it	cs
 800437a:	2304      	movcs	r3, #4
 800437c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	3304      	adds	r3, #4
 8004382:	2b06      	cmp	r3, #6
 8004384:	d902      	bls.n	800438c <NVIC_EncodePriority+0x30>
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3b03      	subs	r3, #3
 800438a:	e000      	b.n	800438e <NVIC_EncodePriority+0x32>
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	f04f 32ff 	mov.w	r2, #4294967295
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	43da      	mvns	r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	401a      	ands	r2, r3
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043a4:	f04f 31ff 	mov.w	r1, #4294967295
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	43d9      	mvns	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043b4:	4313      	orrs	r3, r2
         );
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3724      	adds	r7, #36	@ 0x24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
	...

080043c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043d4:	d301      	bcc.n	80043da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043d6:	2301      	movs	r3, #1
 80043d8:	e00f      	b.n	80043fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043da:	4a0a      	ldr	r2, [pc, #40]	@ (8004404 <SysTick_Config+0x40>)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3b01      	subs	r3, #1
 80043e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043e2:	210f      	movs	r1, #15
 80043e4:	f04f 30ff 	mov.w	r0, #4294967295
 80043e8:	f7ff ff8e 	bl	8004308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043ec:	4b05      	ldr	r3, [pc, #20]	@ (8004404 <SysTick_Config+0x40>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043f2:	4b04      	ldr	r3, [pc, #16]	@ (8004404 <SysTick_Config+0x40>)
 80043f4:	2207      	movs	r2, #7
 80043f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000e010 	.word	0xe000e010

08004408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7ff ff29 	bl	8004268 <__NVIC_SetPriorityGrouping>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
 800442a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004430:	f7ff ff3e 	bl	80042b0 <__NVIC_GetPriorityGrouping>
 8004434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	68b9      	ldr	r1, [r7, #8]
 800443a:	6978      	ldr	r0, [r7, #20]
 800443c:	f7ff ff8e 	bl	800435c <NVIC_EncodePriority>
 8004440:	4602      	mov	r2, r0
 8004442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004446:	4611      	mov	r1, r2
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff ff5d 	bl	8004308 <__NVIC_SetPriority>
}
 800444e:	bf00      	nop
 8004450:	3718      	adds	r7, #24
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004456:	b580      	push	{r7, lr}
 8004458:	b082      	sub	sp, #8
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff31 	bl	80042cc <__NVIC_EnableIRQ>
}
 800446a:	bf00      	nop
 800446c:	3708      	adds	r7, #8
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ffa2 	bl	80043c4 <SysTick_Config>
 8004480:	4603      	mov	r3, r0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b084      	sub	sp, #16
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004496:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7ff fada 	bl	8003a50 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d008      	beq.n	80044bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2280      	movs	r2, #128	@ 0x80
 80044ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e052      	b.n	8004562 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0216 	bic.w	r2, r2, #22
 80044ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d103      	bne.n	80044ec <HAL_DMA_Abort+0x62>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0208 	bic.w	r2, r2, #8
 80044fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0201 	bic.w	r2, r2, #1
 800450a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800450c:	e013      	b.n	8004536 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800450e:	f7ff fa9f 	bl	8003a50 <HAL_GetTick>
 8004512:	4602      	mov	r2, r0
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	2b05      	cmp	r3, #5
 800451a:	d90c      	bls.n	8004536 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2203      	movs	r2, #3
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e015      	b.n	8004562 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1e4      	bne.n	800450e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004548:	223f      	movs	r2, #63	@ 0x3f
 800454a:	409a      	lsls	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}

0800456a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d004      	beq.n	8004588 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2280      	movs	r2, #128	@ 0x80
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e00c      	b.n	80045a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2205      	movs	r2, #5
 800458c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
	...

080045b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b089      	sub	sp, #36	@ 0x24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	e177      	b.n	80048bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045cc:	2201      	movs	r2, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	fa02 f303 	lsl.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4013      	ands	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	f040 8166 	bne.w	80048b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d005      	beq.n	8004602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d130      	bne.n	8004664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	2203      	movs	r2, #3
 800460e:	fa02 f303 	lsl.w	r3, r2, r3
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004638:	2201      	movs	r2, #1
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	fa02 f303 	lsl.w	r3, r2, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4013      	ands	r3, r2
 8004646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	091b      	lsrs	r3, r3, #4
 800464e:	f003 0201 	and.w	r2, r3, #1
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f003 0303 	and.w	r3, r3, #3
 800466c:	2b03      	cmp	r3, #3
 800466e:	d017      	beq.n	80046a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	2203      	movs	r2, #3
 800467c:	fa02 f303 	lsl.w	r3, r2, r3
 8004680:	43db      	mvns	r3, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4013      	ands	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689a      	ldr	r2, [r3, #8]
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69ba      	ldr	r2, [r7, #24]
 800469e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	2b02      	cmp	r3, #2
 80046aa:	d123      	bne.n	80046f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	08da      	lsrs	r2, r3, #3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3208      	adds	r2, #8
 80046b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	220f      	movs	r2, #15
 80046c4:	fa02 f303 	lsl.w	r3, r2, r3
 80046c8:	43db      	mvns	r3, r3
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	4013      	ands	r3, r2
 80046ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691a      	ldr	r2, [r3, #16]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	4313      	orrs	r3, r2
 80046e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046e6:	69fb      	ldr	r3, [r7, #28]
 80046e8:	08da      	lsrs	r2, r3, #3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	3208      	adds	r2, #8
 80046ee:	69b9      	ldr	r1, [r7, #24]
 80046f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	005b      	lsls	r3, r3, #1
 80046fe:	2203      	movs	r2, #3
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f003 0203 	and.w	r2, r3, #3
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69ba      	ldr	r2, [r7, #24]
 8004726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80c0 	beq.w	80048b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004736:	2300      	movs	r3, #0
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	4b66      	ldr	r3, [pc, #408]	@ (80048d4 <HAL_GPIO_Init+0x324>)
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	4a65      	ldr	r2, [pc, #404]	@ (80048d4 <HAL_GPIO_Init+0x324>)
 8004740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004744:	6453      	str	r3, [r2, #68]	@ 0x44
 8004746:	4b63      	ldr	r3, [pc, #396]	@ (80048d4 <HAL_GPIO_Init+0x324>)
 8004748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800474a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004752:	4a61      	ldr	r2, [pc, #388]	@ (80048d8 <HAL_GPIO_Init+0x328>)
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	089b      	lsrs	r3, r3, #2
 8004758:	3302      	adds	r3, #2
 800475a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	220f      	movs	r2, #15
 800476a:	fa02 f303 	lsl.w	r3, r2, r3
 800476e:	43db      	mvns	r3, r3
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4013      	ands	r3, r2
 8004774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a58      	ldr	r2, [pc, #352]	@ (80048dc <HAL_GPIO_Init+0x32c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d037      	beq.n	80047ee <HAL_GPIO_Init+0x23e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a57      	ldr	r2, [pc, #348]	@ (80048e0 <HAL_GPIO_Init+0x330>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d031      	beq.n	80047ea <HAL_GPIO_Init+0x23a>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a56      	ldr	r2, [pc, #344]	@ (80048e4 <HAL_GPIO_Init+0x334>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d02b      	beq.n	80047e6 <HAL_GPIO_Init+0x236>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a55      	ldr	r2, [pc, #340]	@ (80048e8 <HAL_GPIO_Init+0x338>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d025      	beq.n	80047e2 <HAL_GPIO_Init+0x232>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a54      	ldr	r2, [pc, #336]	@ (80048ec <HAL_GPIO_Init+0x33c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <HAL_GPIO_Init+0x22e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a53      	ldr	r2, [pc, #332]	@ (80048f0 <HAL_GPIO_Init+0x340>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d019      	beq.n	80047da <HAL_GPIO_Init+0x22a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_GPIO_Init+0x344>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d013      	beq.n	80047d6 <HAL_GPIO_Init+0x226>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a51      	ldr	r2, [pc, #324]	@ (80048f8 <HAL_GPIO_Init+0x348>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00d      	beq.n	80047d2 <HAL_GPIO_Init+0x222>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a50      	ldr	r2, [pc, #320]	@ (80048fc <HAL_GPIO_Init+0x34c>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x21e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004900 <HAL_GPIO_Init+0x350>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d101      	bne.n	80047ca <HAL_GPIO_Init+0x21a>
 80047c6:	2309      	movs	r3, #9
 80047c8:	e012      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047ca:	230a      	movs	r3, #10
 80047cc:	e010      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047ce:	2308      	movs	r3, #8
 80047d0:	e00e      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e00c      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047d6:	2306      	movs	r3, #6
 80047d8:	e00a      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047da:	2305      	movs	r3, #5
 80047dc:	e008      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047de:	2304      	movs	r3, #4
 80047e0:	e006      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047e2:	2303      	movs	r3, #3
 80047e4:	e004      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e002      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_GPIO_Init+0x240>
 80047ee:	2300      	movs	r3, #0
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	f002 0203 	and.w	r2, r2, #3
 80047f6:	0092      	lsls	r2, r2, #2
 80047f8:	4093      	lsls	r3, r2
 80047fa:	69ba      	ldr	r2, [r7, #24]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004800:	4935      	ldr	r1, [pc, #212]	@ (80048d8 <HAL_GPIO_Init+0x328>)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	089b      	lsrs	r3, r3, #2
 8004806:	3302      	adds	r3, #2
 8004808:	69ba      	ldr	r2, [r7, #24]
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800480e:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_GPIO_Init+0x354>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	43db      	mvns	r3, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4013      	ands	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800482a:	69ba      	ldr	r2, [r7, #24]
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4313      	orrs	r3, r2
 8004830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004832:	4a34      	ldr	r2, [pc, #208]	@ (8004904 <HAL_GPIO_Init+0x354>)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004838:	4b32      	ldr	r3, [pc, #200]	@ (8004904 <HAL_GPIO_Init+0x354>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d003      	beq.n	800485c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800485c:	4a29      	ldr	r2, [pc, #164]	@ (8004904 <HAL_GPIO_Init+0x354>)
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <HAL_GPIO_Init+0x354>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800487e:	69ba      	ldr	r2, [r7, #24]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004886:	4a1f      	ldr	r2, [pc, #124]	@ (8004904 <HAL_GPIO_Init+0x354>)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800488c:	4b1d      	ldr	r3, [pc, #116]	@ (8004904 <HAL_GPIO_Init+0x354>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d003      	beq.n	80048b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80048a8:	69ba      	ldr	r2, [r7, #24]
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048b0:	4a14      	ldr	r2, [pc, #80]	@ (8004904 <HAL_GPIO_Init+0x354>)
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	3301      	adds	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	2b0f      	cmp	r3, #15
 80048c0:	f67f ae84 	bls.w	80045cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	@ 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40020000 	.word	0x40020000
 80048e0:	40020400 	.word	0x40020400
 80048e4:	40020800 	.word	0x40020800
 80048e8:	40020c00 	.word	0x40020c00
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40021400 	.word	0x40021400
 80048f4:	40021800 	.word	0x40021800
 80048f8:	40021c00 	.word	0x40021c00
 80048fc:	40022000 	.word	0x40022000
 8004900:	40022400 	.word	0x40022400
 8004904:	40013c00 	.word	0x40013c00

08004908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691a      	ldr	r2, [r3, #16]
 8004918:	887b      	ldrh	r3, [r7, #2]
 800491a:	4013      	ands	r3, r2
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
 8004924:	e001      	b.n	800492a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800492a:	7bfb      	ldrb	r3, [r7, #15]
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	460b      	mov	r3, r1
 8004942:	807b      	strh	r3, [r7, #2]
 8004944:	4613      	mov	r3, r2
 8004946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004948:	787b      	ldrb	r3, [r7, #1]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800494e:	887a      	ldrh	r2, [r7, #2]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004954:	e003      	b.n	800495e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004956:	887b      	ldrh	r3, [r7, #2]
 8004958:	041a      	lsls	r2, r3, #16
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	619a      	str	r2, [r3, #24]
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800497c:	887a      	ldrh	r2, [r7, #2]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4013      	ands	r3, r2
 8004982:	041a      	lsls	r2, r3, #16
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	43d9      	mvns	r1, r3
 8004988:	887b      	ldrh	r3, [r7, #2]
 800498a:	400b      	ands	r3, r1
 800498c:	431a      	orrs	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	619a      	str	r2, [r3, #24]
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
	...

080049a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e12b      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fe fd52 	bl	8003470 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	@ 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004a04:	f001 fa64 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 8004a08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a81      	ldr	r2, [pc, #516]	@ (8004c14 <HAL_I2C_Init+0x274>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d807      	bhi.n	8004a24 <HAL_I2C_Init+0x84>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	4a80      	ldr	r2, [pc, #512]	@ (8004c18 <HAL_I2C_Init+0x278>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	bf94      	ite	ls
 8004a1c:	2301      	movls	r3, #1
 8004a1e:	2300      	movhi	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e006      	b.n	8004a32 <HAL_I2C_Init+0x92>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a7d      	ldr	r2, [pc, #500]	@ (8004c1c <HAL_I2C_Init+0x27c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	bf94      	ite	ls
 8004a2c:	2301      	movls	r3, #1
 8004a2e:	2300      	movhi	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e0e7      	b.n	8004c0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	4a78      	ldr	r2, [pc, #480]	@ (8004c20 <HAL_I2C_Init+0x280>)
 8004a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a42:	0c9b      	lsrs	r3, r3, #18
 8004a44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	4a6a      	ldr	r2, [pc, #424]	@ (8004c14 <HAL_I2C_Init+0x274>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d802      	bhi.n	8004a74 <HAL_I2C_Init+0xd4>
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3301      	adds	r3, #1
 8004a72:	e009      	b.n	8004a88 <HAL_I2C_Init+0xe8>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a7a:	fb02 f303 	mul.w	r3, r2, r3
 8004a7e:	4a69      	ldr	r2, [pc, #420]	@ (8004c24 <HAL_I2C_Init+0x284>)
 8004a80:	fba2 2303 	umull	r2, r3, r2, r3
 8004a84:	099b      	lsrs	r3, r3, #6
 8004a86:	3301      	adds	r3, #1
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a9a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	495c      	ldr	r1, [pc, #368]	@ (8004c14 <HAL_I2C_Init+0x274>)
 8004aa4:	428b      	cmp	r3, r1
 8004aa6:	d819      	bhi.n	8004adc <HAL_I2C_Init+0x13c>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1e59      	subs	r1, r3, #1
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ab6:	1c59      	adds	r1, r3, #1
 8004ab8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004abc:	400b      	ands	r3, r1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <HAL_I2C_Init+0x138>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	1e59      	subs	r1, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad6:	e051      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004ad8:	2304      	movs	r3, #4
 8004ada:	e04f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d111      	bne.n	8004b08 <HAL_I2C_Init+0x168>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	1e58      	subs	r0, r3, #1
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6859      	ldr	r1, [r3, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	e012      	b.n	8004b2e <HAL_I2C_Init+0x18e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	1e58      	subs	r0, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6859      	ldr	r1, [r3, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	0099      	lsls	r1, r3, #2
 8004b18:	440b      	add	r3, r1
 8004b1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1e:	3301      	adds	r3, #1
 8004b20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	bf0c      	ite	eq
 8004b28:	2301      	moveq	r3, #1
 8004b2a:	2300      	movne	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <HAL_I2C_Init+0x196>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e022      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10e      	bne.n	8004b5c <HAL_I2C_Init+0x1bc>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1e58      	subs	r0, r3, #1
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6859      	ldr	r1, [r3, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	440b      	add	r3, r1
 8004b4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b50:	3301      	adds	r3, #1
 8004b52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b5a:	e00f      	b.n	8004b7c <HAL_I2C_Init+0x1dc>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	1e58      	subs	r0, r3, #1
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6859      	ldr	r1, [r3, #4]
 8004b64:	460b      	mov	r3, r1
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	440b      	add	r3, r1
 8004b6a:	0099      	lsls	r1, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b72:	3301      	adds	r3, #1
 8004b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	6809      	ldr	r1, [r1, #0]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69da      	ldr	r2, [r3, #28]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004baa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	6911      	ldr	r1, [r2, #16]
 8004bb2:	687a      	ldr	r2, [r7, #4]
 8004bb4:	68d2      	ldr	r2, [r2, #12]
 8004bb6:	4311      	orrs	r1, r2
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6812      	ldr	r2, [r2, #0]
 8004bbc:	430b      	orrs	r3, r1
 8004bbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695a      	ldr	r2, [r3, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 0201 	orr.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	000186a0 	.word	0x000186a0
 8004c18:	001e847f 	.word	0x001e847f
 8004c1c:	003d08ff 	.word	0x003d08ff
 8004c20:	431bde83 	.word	0x431bde83
 8004c24:	10624dd3 	.word	0x10624dd3

08004c28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	607a      	str	r2, [r7, #4]
 8004c32:	461a      	mov	r2, r3
 8004c34:	460b      	mov	r3, r1
 8004c36:	817b      	strh	r3, [r7, #10]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c3c:	f7fe ff08 	bl	8003a50 <HAL_GetTick>
 8004c40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	f040 80e0 	bne.w	8004e10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	2319      	movs	r3, #25
 8004c56:	2201      	movs	r2, #1
 8004c58:	4970      	ldr	r1, [pc, #448]	@ (8004e1c <HAL_I2C_Master_Transmit+0x1f4>)
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f964 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004c66:	2302      	movs	r3, #2
 8004c68:	e0d3      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d101      	bne.n	8004c78 <HAL_I2C_Master_Transmit+0x50>
 8004c74:	2302      	movs	r3, #2
 8004c76:	e0cc      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d007      	beq.n	8004c9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0201 	orr.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2221      	movs	r2, #33	@ 0x21
 8004cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2210      	movs	r2, #16
 8004cba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	893a      	ldrh	r2, [r7, #8]
 8004cce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	4a50      	ldr	r2, [pc, #320]	@ (8004e20 <HAL_I2C_Master_Transmit+0x1f8>)
 8004cde:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ce0:	8979      	ldrh	r1, [r7, #10]
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	6a3a      	ldr	r2, [r7, #32]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f89c 	bl	8004e24 <I2C_MasterRequestWrite>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e08d      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	613b      	str	r3, [r7, #16]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004d0c:	e066      	b.n	8004ddc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	6a39      	ldr	r1, [r7, #32]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 fa22 	bl	800515c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00d      	beq.n	8004d3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	d107      	bne.n	8004d36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e06b      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	781a      	ldrb	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	b29a      	uxth	r2, r3
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d11b      	bne.n	8004db0 <HAL_I2C_Master_Transmit+0x188>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d017      	beq.n	8004db0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	781a      	ldrb	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	6a39      	ldr	r1, [r7, #32]
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 fa19 	bl	80051ec <I2C_WaitOnBTFFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d107      	bne.n	8004dd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e01a      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d194      	bne.n	8004d0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	e000      	b.n	8004e12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004e10:	2302      	movs	r3, #2
  }
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	00100002 	.word	0x00100002
 8004e20:	ffff0000 	.word	0xffff0000

08004e24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b088      	sub	sp, #32
 8004e28:	af02      	add	r7, sp, #8
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	460b      	mov	r3, r1
 8004e32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d006      	beq.n	8004e4e <I2C_MasterRequestWrite+0x2a>
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d003      	beq.n	8004e4e <I2C_MasterRequestWrite+0x2a>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e4c:	d108      	bne.n	8004e60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e00b      	b.n	8004e78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e64:	2b12      	cmp	r3, #18
 8004e66:	d107      	bne.n	8004e78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f84f 	bl	8004f28 <I2C_WaitOnFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00d      	beq.n	8004eac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9e:	d103      	bne.n	8004ea8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e035      	b.n	8004f18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb4:	d108      	bne.n	8004ec8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eb6:	897b      	ldrh	r3, [r7, #10]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ec4:	611a      	str	r2, [r3, #16]
 8004ec6:	e01b      	b.n	8004f00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004ec8:	897b      	ldrh	r3, [r7, #10]
 8004eca:	11db      	asrs	r3, r3, #7
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0306 	and.w	r3, r3, #6
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f063 030f 	orn	r3, r3, #15
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	490e      	ldr	r1, [pc, #56]	@ (8004f20 <I2C_MasterRequestWrite+0xfc>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f898 	bl	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e010      	b.n	8004f18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004ef6:	897b      	ldrh	r3, [r7, #10]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4907      	ldr	r1, [pc, #28]	@ (8004f24 <I2C_MasterRequestWrite+0x100>)
 8004f06:	68f8      	ldr	r0, [r7, #12]
 8004f08:	f000 f888 	bl	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	00010008 	.word	0x00010008
 8004f24:	00010002 	.word	0x00010002

08004f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	603b      	str	r3, [r7, #0]
 8004f34:	4613      	mov	r3, r2
 8004f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f38:	e048      	b.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d044      	beq.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fe fd85 	bl	8003a50 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	683a      	ldr	r2, [r7, #0]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d139      	bne.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0c1b      	lsrs	r3, r3, #16
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d10d      	bne.n	8004f7e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	43da      	mvns	r2, r3
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	e00c      	b.n	8004f98 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	43da      	mvns	r2, r3
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	bf0c      	ite	eq
 8004f90:	2301      	moveq	r3, #1
 8004f92:	2300      	movne	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d116      	bne.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e023      	b.n	8005014 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	0c1b      	lsrs	r3, r3, #16
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d10d      	bne.n	8004ff2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	43da      	mvns	r2, r3
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	461a      	mov	r2, r3
 8004ff0:	e00c      	b.n	800500c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	43da      	mvns	r2, r3
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	429a      	cmp	r2, r3
 8005010:	d093      	beq.n	8004f3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
 8005028:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502a:	e071      	b.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800503a:	d123      	bne.n	8005084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800504a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005054:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2220      	movs	r2, #32
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005070:	f043 0204 	orr.w	r2, r3, #4
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e067      	b.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508a:	d041      	beq.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fe fce0 	bl	8003a50 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d136      	bne.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0c1b      	lsrs	r3, r3, #16
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d10c      	bne.n	80050c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	43da      	mvns	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4013      	ands	r3, r2
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	bf14      	ite	ne
 80050be:	2301      	movne	r3, #1
 80050c0:	2300      	moveq	r3, #0
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	e00b      	b.n	80050de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	43da      	mvns	r2, r3
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	bf14      	ite	ne
 80050d8:	2301      	movne	r3, #1
 80050da:	2300      	moveq	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e021      	b.n	8005154 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	0c1b      	lsrs	r3, r3, #16
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b01      	cmp	r3, #1
 8005118:	d10c      	bne.n	8005134 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	43da      	mvns	r2, r3
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	4013      	ands	r3, r2
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e00b      	b.n	800514c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	43da      	mvns	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4013      	ands	r3, r2
 8005140:	b29b      	uxth	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f af6d 	bne.w	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005168:	e034      	b.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 f886 	bl	800527c <I2C_IsAcknowledgeFailed>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e034      	b.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d028      	beq.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005182:	f7fe fc65 	bl	8003a50 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	429a      	cmp	r2, r3
 8005190:	d302      	bcc.n	8005198 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d11d      	bne.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051a2:	2b80      	cmp	r3, #128	@ 0x80
 80051a4:	d016      	beq.n	80051d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051de:	2b80      	cmp	r3, #128	@ 0x80
 80051e0:	d1c3      	bne.n	800516a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f8:	e034      	b.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f000 f83e 	bl	800527c <I2C_IsAcknowledgeFailed>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d001      	beq.n	800520a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e034      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d028      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005212:	f7fe fc1d 	bl	8003a50 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d302      	bcc.n	8005228 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11d      	bne.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0304 	and.w	r3, r3, #4
 8005232:	2b04      	cmp	r3, #4
 8005234:	d016      	beq.n	8005264 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2200      	movs	r2, #0
 800523a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	f043 0220 	orr.w	r2, r3, #32
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e007      	b.n	8005274 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	2b04      	cmp	r3, #4
 8005270:	d1c3      	bne.n	80051fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800528e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005292:	d11b      	bne.n	80052cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800529c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b8:	f043 0204 	orr.w	r2, r3, #4
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2200      	movs	r2, #0
 80052c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e000      	b.n	80052ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	370c      	adds	r7, #12
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b20      	cmp	r3, #32
 80052ee:	d129      	bne.n	8005344 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2224      	movs	r2, #36	@ 0x24
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f022 0210 	bic.w	r2, r2, #16
 8005316:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0201 	orr.w	r2, r2, #1
 8005336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2220      	movs	r2, #32
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005340:	2300      	movs	r3, #0
 8005342:	e000      	b.n	8005346 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005344:	2302      	movs	r3, #2
  }
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b20      	cmp	r3, #32
 800536a:	d12a      	bne.n	80053c2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	@ 0x24
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0201 	bic.w	r2, r2, #1
 8005382:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800538c:	89fb      	ldrh	r3, [r7, #14]
 800538e:	f023 030f 	bic.w	r3, r3, #15
 8005392:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	b29a      	uxth	r2, r3
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	4313      	orrs	r3, r2
 800539c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	89fa      	ldrh	r2, [r7, #14]
 80053a4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f042 0201 	orr.w	r2, r2, #1
 80053b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80053be:	2300      	movs	r3, #0
 80053c0:	e000      	b.n	80053c4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80053c2:	2302      	movs	r3, #2
  }
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af02      	add	r7, sp, #8
 80053d6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e101      	b.n	80055e6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7fe f92b 	bl	8003658 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2203      	movs	r2, #3
 8005406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005410:	d102      	bne.n	8005418 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f002 fccb 	bl	8007db8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6818      	ldr	r0, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	7c1a      	ldrb	r2, [r3, #16]
 800542a:	f88d 2000 	strb.w	r2, [sp]
 800542e:	3304      	adds	r3, #4
 8005430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005432:	f002 fc5d 	bl	8007cf0 <USB_CoreInit>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e0ce      	b.n	80055e6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2100      	movs	r1, #0
 800544e:	4618      	mov	r0, r3
 8005450:	f002 fcc3 	bl	8007dda <USB_SetCurrentMode>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d005      	beq.n	8005466 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e0bf      	b.n	80055e6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005466:	2300      	movs	r3, #0
 8005468:	73fb      	strb	r3, [r7, #15]
 800546a:	e04a      	b.n	8005502 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	6879      	ldr	r1, [r7, #4]
 8005470:	4613      	mov	r3, r2
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	3315      	adds	r3, #21
 800547c:	2201      	movs	r2, #1
 800547e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005480:	7bfa      	ldrb	r2, [r7, #15]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	3314      	adds	r3, #20
 8005490:	7bfa      	ldrb	r2, [r7, #15]
 8005492:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	b298      	uxth	r0, r3
 800549a:	6879      	ldr	r1, [r7, #4]
 800549c:	4613      	mov	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	4413      	add	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	440b      	add	r3, r1
 80054a6:	332e      	adds	r3, #46	@ 0x2e
 80054a8:	4602      	mov	r2, r0
 80054aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054ac:	7bfa      	ldrb	r2, [r7, #15]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	00db      	lsls	r3, r3, #3
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3318      	adds	r3, #24
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054c0:	7bfa      	ldrb	r2, [r7, #15]
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	331c      	adds	r3, #28
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054d4:	7bfa      	ldrb	r2, [r7, #15]
 80054d6:	6879      	ldr	r1, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	4413      	add	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	440b      	add	r3, r1
 80054e2:	3320      	adds	r3, #32
 80054e4:	2200      	movs	r2, #0
 80054e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054e8:	7bfa      	ldrb	r2, [r7, #15]
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	440b      	add	r3, r1
 80054f6:	3324      	adds	r3, #36	@ 0x24
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	3301      	adds	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	791b      	ldrb	r3, [r3, #4]
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	429a      	cmp	r2, r3
 800550a:	d3af      	bcc.n	800546c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800550c:	2300      	movs	r3, #0
 800550e:	73fb      	strb	r3, [r7, #15]
 8005510:	e044      	b.n	800559c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005512:	7bfa      	ldrb	r2, [r7, #15]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	00db      	lsls	r3, r3, #3
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005524:	2200      	movs	r2, #0
 8005526:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005528:	7bfa      	ldrb	r2, [r7, #15]
 800552a:	6879      	ldr	r1, [r7, #4]
 800552c:	4613      	mov	r3, r2
 800552e:	00db      	lsls	r3, r3, #3
 8005530:	4413      	add	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	440b      	add	r3, r1
 8005536:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800553a:	7bfa      	ldrb	r2, [r7, #15]
 800553c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800553e:	7bfa      	ldrb	r2, [r7, #15]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	00db      	lsls	r3, r3, #3
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800556a:	7bfa      	ldrb	r2, [r7, #15]
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	440b      	add	r3, r1
 8005578:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800557c:	2200      	movs	r2, #0
 800557e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	3301      	adds	r3, #1
 800559a:	73fb      	strb	r3, [r7, #15]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	791b      	ldrb	r3, [r3, #4]
 80055a0:	7bfa      	ldrb	r2, [r7, #15]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d3b5      	bcc.n	8005512 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	7c1a      	ldrb	r2, [r3, #16]
 80055ae:	f88d 2000 	strb.w	r2, [sp]
 80055b2:	3304      	adds	r3, #4
 80055b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055b6:	f002 fc5d 	bl	8007e74 <USB_DevInit>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e00c      	b.n	80055e6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f002 fe25 	bl	800822e <USB_DevDisconnect>

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b086      	sub	sp, #24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e267      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	d075      	beq.n	80056fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800560e:	4b88      	ldr	r3, [pc, #544]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d00c      	beq.n	8005634 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800561a:	4b85      	ldr	r3, [pc, #532]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005622:	2b08      	cmp	r3, #8
 8005624:	d112      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005626:	4b82      	ldr	r3, [pc, #520]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800562e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005632:	d10b      	bne.n	800564c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005634:	4b7e      	ldr	r3, [pc, #504]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d05b      	beq.n	80056f8 <HAL_RCC_OscConfig+0x108>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d157      	bne.n	80056f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e242      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005654:	d106      	bne.n	8005664 <HAL_RCC_OscConfig+0x74>
 8005656:	4b76      	ldr	r3, [pc, #472]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a75      	ldr	r2, [pc, #468]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800565c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	e01d      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800566c:	d10c      	bne.n	8005688 <HAL_RCC_OscConfig+0x98>
 800566e:	4b70      	ldr	r3, [pc, #448]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a6f      	ldr	r2, [pc, #444]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005678:	6013      	str	r3, [r2, #0]
 800567a:	4b6d      	ldr	r3, [pc, #436]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a6c      	ldr	r2, [pc, #432]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	e00b      	b.n	80056a0 <HAL_RCC_OscConfig+0xb0>
 8005688:	4b69      	ldr	r3, [pc, #420]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a68      	ldr	r2, [pc, #416]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800568e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005692:	6013      	str	r3, [r2, #0]
 8005694:	4b66      	ldr	r3, [pc, #408]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a65      	ldr	r2, [pc, #404]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800569a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800569e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d013      	beq.n	80056d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a8:	f7fe f9d2 	bl	8003a50 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056b0:	f7fe f9ce 	bl	8003a50 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b64      	cmp	r3, #100	@ 0x64
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e207      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056c2:	4b5b      	ldr	r3, [pc, #364]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0xc0>
 80056ce:	e014      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d0:	f7fe f9be 	bl	8003a50 <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056d6:	e008      	b.n	80056ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056d8:	f7fe f9ba 	bl	8003a50 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e1f3      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ea:	4b51      	ldr	r3, [pc, #324]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f0      	bne.n	80056d8 <HAL_RCC_OscConfig+0xe8>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d063      	beq.n	80057ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005706:	4b4a      	ldr	r3, [pc, #296]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800571a:	2b08      	cmp	r3, #8
 800571c:	d11c      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800571e:	4b44      	ldr	r3, [pc, #272]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d116      	bne.n	8005758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800572a:	4b41      	ldr	r3, [pc, #260]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d005      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b01      	cmp	r3, #1
 800573c:	d001      	beq.n	8005742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e1c7      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4937      	ldr	r1, [pc, #220]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005752:	4313      	orrs	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005756:	e03a      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005760:	4b34      	ldr	r3, [pc, #208]	@ (8005834 <HAL_RCC_OscConfig+0x244>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fe f973 	bl	8003a50 <HAL_GetTick>
 800576a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576c:	e008      	b.n	8005780 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800576e:	f7fe f96f 	bl	8003a50 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d901      	bls.n	8005780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e1a8      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005780:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d0f0      	beq.n	800576e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800578c:	4b28      	ldr	r3, [pc, #160]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4925      	ldr	r1, [pc, #148]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80057a2:	4b24      	ldr	r3, [pc, #144]	@ (8005834 <HAL_RCC_OscConfig+0x244>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fe f952 	bl	8003a50 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057b0:	f7fe f94e 	bl	8003a50 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e187      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80057c2:	4b1b      	ldr	r3, [pc, #108]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 0308 	and.w	r3, r3, #8
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d036      	beq.n	8005848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d016      	beq.n	8005810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057e2:	4b15      	ldr	r3, [pc, #84]	@ (8005838 <HAL_RCC_OscConfig+0x248>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057e8:	f7fe f932 	bl	8003a50 <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057f0:	f7fe f92e 	bl	8003a50 <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e167      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005802:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_OscConfig+0x240>)
 8005804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0f0      	beq.n	80057f0 <HAL_RCC_OscConfig+0x200>
 800580e:	e01b      	b.n	8005848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005810:	4b09      	ldr	r3, [pc, #36]	@ (8005838 <HAL_RCC_OscConfig+0x248>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005816:	f7fe f91b 	bl	8003a50 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800581c:	e00e      	b.n	800583c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800581e:	f7fe f917 	bl	8003a50 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d907      	bls.n	800583c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e150      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005830:	40023800 	.word	0x40023800
 8005834:	42470000 	.word	0x42470000
 8005838:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800583c:	4b88      	ldr	r3, [pc, #544]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800583e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1ea      	bne.n	800581e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8097 	beq.w	8005984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800585a:	4b81      	ldr	r3, [pc, #516]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800585c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10f      	bne.n	8005886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005866:	2300      	movs	r3, #0
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	4b7d      	ldr	r3, [pc, #500]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800586c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800586e:	4a7c      	ldr	r2, [pc, #496]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005874:	6413      	str	r3, [r2, #64]	@ 0x40
 8005876:	4b7a      	ldr	r3, [pc, #488]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800587a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005882:	2301      	movs	r3, #1
 8005884:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005886:	4b77      	ldr	r3, [pc, #476]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800588e:	2b00      	cmp	r3, #0
 8005890:	d118      	bne.n	80058c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005892:	4b74      	ldr	r3, [pc, #464]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a73      	ldr	r2, [pc, #460]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 8005898:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800589c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800589e:	f7fe f8d7 	bl	8003a50 <HAL_GetTick>
 80058a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058a6:	f7fe f8d3 	bl	8003a50 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e10c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80058b8:	4b6a      	ldr	r3, [pc, #424]	@ (8005a64 <HAL_RCC_OscConfig+0x474>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d106      	bne.n	80058da <HAL_RCC_OscConfig+0x2ea>
 80058cc:	4b64      	ldr	r3, [pc, #400]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d0:	4a63      	ldr	r2, [pc, #396]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80058d8:	e01c      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d10c      	bne.n	80058fc <HAL_RCC_OscConfig+0x30c>
 80058e2:	4b5f      	ldr	r3, [pc, #380]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058e6:	4a5e      	ldr	r2, [pc, #376]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80058ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058f2:	4a5b      	ldr	r2, [pc, #364]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058f4:	f043 0301 	orr.w	r3, r3, #1
 80058f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80058fa:	e00b      	b.n	8005914 <HAL_RCC_OscConfig+0x324>
 80058fc:	4b58      	ldr	r3, [pc, #352]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80058fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005900:	4a57      	ldr	r2, [pc, #348]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6713      	str	r3, [r2, #112]	@ 0x70
 8005908:	4b55      	ldr	r3, [pc, #340]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800590c:	4a54      	ldr	r2, [pc, #336]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800590e:	f023 0304 	bic.w	r3, r3, #4
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d015      	beq.n	8005948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591c:	f7fe f898 	bl	8003a50 <HAL_GetTick>
 8005920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005922:	e00a      	b.n	800593a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fe f894 	bl	8003a50 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e0cb      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593a:	4b49      	ldr	r3, [pc, #292]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800593c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ee      	beq.n	8005924 <HAL_RCC_OscConfig+0x334>
 8005946:	e014      	b.n	8005972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005948:	f7fe f882 	bl	8003a50 <HAL_GetTick>
 800594c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800594e:	e00a      	b.n	8005966 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005950:	f7fe f87e 	bl	8003a50 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800595e:	4293      	cmp	r3, r2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e0b5      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005966:	4b3e      	ldr	r3, [pc, #248]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1ee      	bne.n	8005950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005972:	7dfb      	ldrb	r3, [r7, #23]
 8005974:	2b01      	cmp	r3, #1
 8005976:	d105      	bne.n	8005984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005978:	4b39      	ldr	r3, [pc, #228]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	4a38      	ldr	r2, [pc, #224]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 800597e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005982:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 80a1 	beq.w	8005ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800598e:	4b34      	ldr	r3, [pc, #208]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 030c 	and.w	r3, r3, #12
 8005996:	2b08      	cmp	r3, #8
 8005998:	d05c      	beq.n	8005a54 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d141      	bne.n	8005a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059a2:	4b31      	ldr	r3, [pc, #196]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059a8:	f7fe f852 	bl	8003a50 <HAL_GetTick>
 80059ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059ae:	e008      	b.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059b0:	f7fe f84e 	bl	8003a50 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b02      	cmp	r3, #2
 80059bc:	d901      	bls.n	80059c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e087      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059c2:	4b27      	ldr	r3, [pc, #156]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1f0      	bne.n	80059b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	69da      	ldr	r2, [r3, #28]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	431a      	orrs	r2, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	019b      	lsls	r3, r3, #6
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	3b01      	subs	r3, #1
 80059e8:	041b      	lsls	r3, r3, #16
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	491b      	ldr	r1, [pc, #108]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fe:	f7fe f827 	bl	8003a50 <HAL_GetTick>
 8005a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a04:	e008      	b.n	8005a18 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a06:	f7fe f823 	bl	8003a50 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d901      	bls.n	8005a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e05c      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a18:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d0f0      	beq.n	8005a06 <HAL_RCC_OscConfig+0x416>
 8005a24:	e054      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b10      	ldr	r3, [pc, #64]	@ (8005a68 <HAL_RCC_OscConfig+0x478>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a2c:	f7fe f810 	bl	8003a50 <HAL_GetTick>
 8005a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a32:	e008      	b.n	8005a46 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a34:	f7fe f80c 	bl	8003a50 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e045      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a46:	4b06      	ldr	r3, [pc, #24]	@ (8005a60 <HAL_RCC_OscConfig+0x470>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f0      	bne.n	8005a34 <HAL_RCC_OscConfig+0x444>
 8005a52:	e03d      	b.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e038      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40007000 	.word	0x40007000
 8005a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005adc <HAL_RCC_OscConfig+0x4ec>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d028      	beq.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d121      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d11a      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d111      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	085b      	lsrs	r3, r3, #1
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d107      	bne.n	8005acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d001      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e000      	b.n	8005ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	40023800 	.word	0x40023800

08005ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e0cc      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005af4:	4b68      	ldr	r3, [pc, #416]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d90c      	bls.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b65      	ldr	r3, [pc, #404]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b0a:	4b63      	ldr	r3, [pc, #396]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	683a      	ldr	r2, [r7, #0]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d001      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0b8      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0302 	and.w	r3, r3, #2
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d020      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d005      	beq.n	8005b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b34:	4b59      	ldr	r3, [pc, #356]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4a58      	ldr	r2, [pc, #352]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b4c:	4b53      	ldr	r3, [pc, #332]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	4a52      	ldr	r2, [pc, #328]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b58:	4b50      	ldr	r3, [pc, #320]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	494d      	ldr	r1, [pc, #308]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d044      	beq.n	8005c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7e:	4b47      	ldr	r3, [pc, #284]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d119      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e07f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d003      	beq.n	8005b9e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b9a:	2b03      	cmp	r3, #3
 8005b9c:	d107      	bne.n	8005bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d109      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e06f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bae:	4b3b      	ldr	r3, [pc, #236]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e067      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005bbe:	4b37      	ldr	r3, [pc, #220]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f023 0203 	bic.w	r2, r3, #3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	4934      	ldr	r1, [pc, #208]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bd0:	f7fd ff3e 	bl	8003a50 <HAL_GetTick>
 8005bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bd6:	e00a      	b.n	8005bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bd8:	f7fd ff3a 	bl	8003a50 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e04f      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bee:	4b2b      	ldr	r3, [pc, #172]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 020c 	and.w	r2, r3, #12
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d1eb      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c00:	4b25      	ldr	r3, [pc, #148]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d20c      	bcs.n	8005c28 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c0e:	4b22      	ldr	r3, [pc, #136]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c10:	683a      	ldr	r2, [r7, #0]
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c16:	4b20      	ldr	r3, [pc, #128]	@ (8005c98 <HAL_RCC_ClockConfig+0x1b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 030f 	and.w	r3, r3, #15
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e032      	b.n	8005c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d008      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005c34:	4b19      	ldr	r3, [pc, #100]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4916      	ldr	r1, [pc, #88]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0308 	and.w	r3, r3, #8
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d009      	beq.n	8005c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c52:	4b12      	ldr	r3, [pc, #72]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	490e      	ldr	r1, [pc, #56]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c66:	f000 f821 	bl	8005cac <HAL_RCC_GetSysClockFreq>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c9c <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	091b      	lsrs	r3, r3, #4
 8005c72:	f003 030f 	and.w	r3, r3, #15
 8005c76:	490a      	ldr	r1, [pc, #40]	@ (8005ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8005c78:	5ccb      	ldrb	r3, [r1, r3]
 8005c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7e:	4a09      	ldr	r2, [pc, #36]	@ (8005ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c82:	4b09      	ldr	r3, [pc, #36]	@ (8005ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f7fd fe9e 	bl	80039c8 <HAL_InitTick>

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	40023c00 	.word	0x40023c00
 8005c9c:	40023800 	.word	0x40023800
 8005ca0:	0800c15c 	.word	0x0800c15c
 8005ca4:	20004e74 	.word	0x20004e74
 8005ca8:	20004e78 	.word	0x20004e78

08005cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cb0:	b094      	sub	sp, #80	@ 0x50
 8005cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cc4:	4b79      	ldr	r3, [pc, #484]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f003 030c 	and.w	r3, r3, #12
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d00d      	beq.n	8005cec <HAL_RCC_GetSysClockFreq+0x40>
 8005cd0:	2b08      	cmp	r3, #8
 8005cd2:	f200 80e1 	bhi.w	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d003      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005cde:	e0db      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ce0:	4b73      	ldr	r3, [pc, #460]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ce4:	e0db      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ce6:	4b73      	ldr	r3, [pc, #460]	@ (8005eb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ce8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cea:	e0d8      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cec:	4b6f      	ldr	r3, [pc, #444]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cf4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d063      	beq.n	8005dca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d02:	4b6a      	ldr	r3, [pc, #424]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	099b      	lsrs	r3, r3, #6
 8005d08:	2200      	movs	r2, #0
 8005d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d14:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d16:	2300      	movs	r3, #0
 8005d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f04f 0100 	mov.w	r1, #0
 8005d2a:	0159      	lsls	r1, r3, #5
 8005d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005d30:	0150      	lsls	r0, r2, #5
 8005d32:	4602      	mov	r2, r0
 8005d34:	460b      	mov	r3, r1
 8005d36:	4621      	mov	r1, r4
 8005d38:	1a51      	subs	r1, r2, r1
 8005d3a:	6139      	str	r1, [r7, #16]
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005d42:	617b      	str	r3, [r7, #20]
 8005d44:	f04f 0200 	mov.w	r2, #0
 8005d48:	f04f 0300 	mov.w	r3, #0
 8005d4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d50:	4659      	mov	r1, fp
 8005d52:	018b      	lsls	r3, r1, #6
 8005d54:	4651      	mov	r1, sl
 8005d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d5a:	4651      	mov	r1, sl
 8005d5c:	018a      	lsls	r2, r1, #6
 8005d5e:	4651      	mov	r1, sl
 8005d60:	ebb2 0801 	subs.w	r8, r2, r1
 8005d64:	4659      	mov	r1, fp
 8005d66:	eb63 0901 	sbc.w	r9, r3, r1
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	f04f 0300 	mov.w	r3, #0
 8005d72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d7e:	4690      	mov	r8, r2
 8005d80:	4699      	mov	r9, r3
 8005d82:	4623      	mov	r3, r4
 8005d84:	eb18 0303 	adds.w	r3, r8, r3
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	462b      	mov	r3, r5
 8005d8c:	eb49 0303 	adc.w	r3, r9, r3
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	f04f 0300 	mov.w	r3, #0
 8005d9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d9e:	4629      	mov	r1, r5
 8005da0:	024b      	lsls	r3, r1, #9
 8005da2:	4621      	mov	r1, r4
 8005da4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005da8:	4621      	mov	r1, r4
 8005daa:	024a      	lsls	r2, r1, #9
 8005dac:	4610      	mov	r0, r2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005db2:	2200      	movs	r2, #0
 8005db4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005db8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dbc:	f7fa ff64 	bl	8000c88 <__aeabi_uldivmod>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc8:	e058      	b.n	8005e7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dca:	4b38      	ldr	r3, [pc, #224]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	099b      	lsrs	r3, r3, #6
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005dda:	623b      	str	r3, [r7, #32]
 8005ddc:	2300      	movs	r3, #0
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005de0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	f04f 0000 	mov.w	r0, #0
 8005dec:	f04f 0100 	mov.w	r1, #0
 8005df0:	0159      	lsls	r1, r3, #5
 8005df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005df6:	0150      	lsls	r0, r2, #5
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005e02:	4649      	mov	r1, r9
 8005e04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005e14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005e18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005e1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005e20:	eb63 050b 	sbc.w	r5, r3, fp
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	00eb      	lsls	r3, r5, #3
 8005e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e32:	00e2      	lsls	r2, r4, #3
 8005e34:	4614      	mov	r4, r2
 8005e36:	461d      	mov	r5, r3
 8005e38:	4643      	mov	r3, r8
 8005e3a:	18e3      	adds	r3, r4, r3
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	464b      	mov	r3, r9
 8005e40:	eb45 0303 	adc.w	r3, r5, r3
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	f04f 0300 	mov.w	r3, #0
 8005e4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e52:	4629      	mov	r1, r5
 8005e54:	028b      	lsls	r3, r1, #10
 8005e56:	4621      	mov	r1, r4
 8005e58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	028a      	lsls	r2, r1, #10
 8005e60:	4610      	mov	r0, r2
 8005e62:	4619      	mov	r1, r3
 8005e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e66:	2200      	movs	r2, #0
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	61fa      	str	r2, [r7, #28]
 8005e6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e70:	f7fa ff0a 	bl	8000c88 <__aeabi_uldivmod>
 8005e74:	4602      	mov	r2, r0
 8005e76:	460b      	mov	r3, r1
 8005e78:	4613      	mov	r3, r2
 8005e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005eac <HAL_RCC_GetSysClockFreq+0x200>)
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	0c1b      	lsrs	r3, r3, #16
 8005e82:	f003 0303 	and.w	r3, r3, #3
 8005e86:	3301      	adds	r3, #1
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e94:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e96:	e002      	b.n	8005e9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e98:	4b05      	ldr	r3, [pc, #20]	@ (8005eb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3750      	adds	r7, #80	@ 0x50
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005eaa:	bf00      	nop
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	00f42400 	.word	0x00f42400
 8005eb4:	007a1200 	.word	0x007a1200

08005eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ebc:	4b03      	ldr	r3, [pc, #12]	@ (8005ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	20004e74 	.word	0x20004e74

08005ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ed4:	f7ff fff0 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b05      	ldr	r3, [pc, #20]	@ (8005ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0a9b      	lsrs	r3, r3, #10
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4903      	ldr	r1, [pc, #12]	@ (8005ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	0800c16c 	.word	0x0800c16c

08005ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005efc:	f7ff ffdc 	bl	8005eb8 <HAL_RCC_GetHCLKFreq>
 8005f00:	4602      	mov	r2, r0
 8005f02:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	0b5b      	lsrs	r3, r3, #13
 8005f08:	f003 0307 	and.w	r3, r3, #7
 8005f0c:	4903      	ldr	r1, [pc, #12]	@ (8005f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f0e:	5ccb      	ldrb	r3, [r1, r3]
 8005f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	0800c16c 	.word	0x0800c16c

08005f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e041      	b.n	8005fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fd fada 	bl	8003500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 fad8 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e041      	b.n	8006054 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f839 	bl	800605c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2202      	movs	r2, #2
 8005fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f000 fa89 	bl	8006514 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3708      	adds	r7, #8
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_TIM_PWM_Start+0x24>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b01      	cmp	r3, #1
 800608a:	bf14      	ite	ne
 800608c:	2301      	movne	r3, #1
 800608e:	2300      	moveq	r3, #0
 8006090:	b2db      	uxtb	r3, r3
 8006092:	e022      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b04      	cmp	r3, #4
 8006098:	d109      	bne.n	80060ae <HAL_TIM_PWM_Start+0x3e>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	bf14      	ite	ne
 80060a6:	2301      	movne	r3, #1
 80060a8:	2300      	moveq	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	e015      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d109      	bne.n	80060c8 <HAL_TIM_PWM_Start+0x58>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
 80060c6:	e008      	b.n	80060da <HAL_TIM_PWM_Start+0x6a>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	bf14      	ite	ne
 80060d4:	2301      	movne	r3, #1
 80060d6:	2300      	moveq	r3, #0
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e07c      	b.n	80061dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x82>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060f0:	e013      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d104      	bne.n	8006102 <HAL_TIM_PWM_Start+0x92>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2202      	movs	r2, #2
 80060fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006100:	e00b      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b08      	cmp	r3, #8
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0xa2>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006110:	e003      	b.n	800611a <HAL_TIM_PWM_Start+0xaa>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2202      	movs	r2, #2
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2201      	movs	r2, #1
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 fcec 	bl	8006b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2d      	ldr	r2, [pc, #180]	@ (80061e4 <HAL_TIM_PWM_Start+0x174>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d004      	beq.n	800613c <HAL_TIM_PWM_Start+0xcc>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2c      	ldr	r2, [pc, #176]	@ (80061e8 <HAL_TIM_PWM_Start+0x178>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d101      	bne.n	8006140 <HAL_TIM_PWM_Start+0xd0>
 800613c:	2301      	movs	r3, #1
 800613e:	e000      	b.n	8006142 <HAL_TIM_PWM_Start+0xd2>
 8006140:	2300      	movs	r3, #0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d007      	beq.n	8006156 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006154:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a22      	ldr	r2, [pc, #136]	@ (80061e4 <HAL_TIM_PWM_Start+0x174>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006168:	d01d      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1f      	ldr	r2, [pc, #124]	@ (80061ec <HAL_TIM_PWM_Start+0x17c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <HAL_TIM_PWM_Start+0x180>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1c      	ldr	r2, [pc, #112]	@ (80061f4 <HAL_TIM_PWM_Start+0x184>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a16      	ldr	r2, [pc, #88]	@ (80061e8 <HAL_TIM_PWM_Start+0x178>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <HAL_TIM_PWM_Start+0x188>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x136>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <HAL_TIM_PWM_Start+0x18c>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d111      	bne.n	80061ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b06      	cmp	r3, #6
 80061b6:	d010      	beq.n	80061da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c8:	e007      	b.n	80061da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400
 80061ec:	40000400 	.word	0x40000400
 80061f0:	40000800 	.word	0x40000800
 80061f4:	40000c00 	.word	0x40000c00
 80061f8:	40014000 	.word	0x40014000
 80061fc:	40001800 	.word	0x40001800

08006200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800620c:	2300      	movs	r3, #0
 800620e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800621a:	2302      	movs	r3, #2
 800621c:	e0ae      	b.n	800637c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b0c      	cmp	r3, #12
 800622a:	f200 809f 	bhi.w	800636c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800622e:	a201      	add	r2, pc, #4	@ (adr r2, 8006234 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006234:	08006269 	.word	0x08006269
 8006238:	0800636d 	.word	0x0800636d
 800623c:	0800636d 	.word	0x0800636d
 8006240:	0800636d 	.word	0x0800636d
 8006244:	080062a9 	.word	0x080062a9
 8006248:	0800636d 	.word	0x0800636d
 800624c:	0800636d 	.word	0x0800636d
 8006250:	0800636d 	.word	0x0800636d
 8006254:	080062eb 	.word	0x080062eb
 8006258:	0800636d 	.word	0x0800636d
 800625c:	0800636d 	.word	0x0800636d
 8006260:	0800636d 	.word	0x0800636d
 8006264:	0800632b 	.word	0x0800632b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	4618      	mov	r0, r3
 8006270:	f000 f9fc 	bl	800666c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0208 	orr.w	r2, r2, #8
 8006282:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699a      	ldr	r2, [r3, #24]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0204 	bic.w	r2, r2, #4
 8006292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6999      	ldr	r1, [r3, #24]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	430a      	orrs	r2, r1
 80062a4:	619a      	str	r2, [r3, #24]
      break;
 80062a6:	e064      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68b9      	ldr	r1, [r7, #8]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fa4c 	bl	800674c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	6999      	ldr	r1, [r3, #24]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	021a      	lsls	r2, r3, #8
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	619a      	str	r2, [r3, #24]
      break;
 80062e8:	e043      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68b9      	ldr	r1, [r7, #8]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 faa1 	bl	8006838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	69da      	ldr	r2, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0208 	orr.w	r2, r2, #8
 8006304:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	69da      	ldr	r2, [r3, #28]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0204 	bic.w	r2, r2, #4
 8006314:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	69d9      	ldr	r1, [r3, #28]
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691a      	ldr	r2, [r3, #16]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	430a      	orrs	r2, r1
 8006326:	61da      	str	r2, [r3, #28]
      break;
 8006328:	e023      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 faf5 	bl	8006920 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	69da      	ldr	r2, [r3, #28]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006344:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006354:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69d9      	ldr	r1, [r3, #28]
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	021a      	lsls	r2, r3, #8
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	430a      	orrs	r2, r1
 8006368:	61da      	str	r2, [r3, #28]
      break;
 800636a:	e002      	b.n	8006372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	75fb      	strb	r3, [r7, #23]
      break;
 8006370:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800637a:	7dfb      	ldrb	r3, [r7, #23]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800638e:	2300      	movs	r3, #0
 8006390:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_TIM_ConfigClockSource+0x1c>
 800639c:	2302      	movs	r3, #2
 800639e:	e0b4      	b.n	800650a <HAL_TIM_ConfigClockSource+0x186>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2202      	movs	r2, #2
 80063ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80063be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063d8:	d03e      	beq.n	8006458 <HAL_TIM_ConfigClockSource+0xd4>
 80063da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063de:	f200 8087 	bhi.w	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 80063e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063e6:	f000 8086 	beq.w	80064f6 <HAL_TIM_ConfigClockSource+0x172>
 80063ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ee:	d87f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f0:	2b70      	cmp	r3, #112	@ 0x70
 80063f2:	d01a      	beq.n	800642a <HAL_TIM_ConfigClockSource+0xa6>
 80063f4:	2b70      	cmp	r3, #112	@ 0x70
 80063f6:	d87b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 80063f8:	2b60      	cmp	r3, #96	@ 0x60
 80063fa:	d050      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x11a>
 80063fc:	2b60      	cmp	r3, #96	@ 0x60
 80063fe:	d877      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006400:	2b50      	cmp	r3, #80	@ 0x50
 8006402:	d03c      	beq.n	800647e <HAL_TIM_ConfigClockSource+0xfa>
 8006404:	2b50      	cmp	r3, #80	@ 0x50
 8006406:	d873      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006408:	2b40      	cmp	r3, #64	@ 0x40
 800640a:	d058      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x13a>
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d86f      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006410:	2b30      	cmp	r3, #48	@ 0x30
 8006412:	d064      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x15a>
 8006414:	2b30      	cmp	r3, #48	@ 0x30
 8006416:	d86b      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006418:	2b20      	cmp	r3, #32
 800641a:	d060      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x15a>
 800641c:	2b20      	cmp	r3, #32
 800641e:	d867      	bhi.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d05c      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x15a>
 8006424:	2b10      	cmp	r3, #16
 8006426:	d05a      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x15a>
 8006428:	e062      	b.n	80064f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800643a:	f000 fb41 	bl	8006ac0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800644c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68ba      	ldr	r2, [r7, #8]
 8006454:	609a      	str	r2, [r3, #8]
      break;
 8006456:	e04f      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006468:	f000 fb2a 	bl	8006ac0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800647a:	609a      	str	r2, [r3, #8]
      break;
 800647c:	e03c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648a:	461a      	mov	r2, r3
 800648c:	f000 fa9e 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2150      	movs	r1, #80	@ 0x50
 8006496:	4618      	mov	r0, r3
 8006498:	f000 faf7 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 800649c:	e02c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fabd 	bl	8006a2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2160      	movs	r1, #96	@ 0x60
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fae7 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80064bc:	e01c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fa7e 	bl	80069cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2140      	movs	r1, #64	@ 0x40
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fad7 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80064dc:	e00c      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f000 face 	bl	8006a8a <TIM_ITRx_SetConfig>
      break;
 80064ee:	e003      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	73fb      	strb	r3, [r7, #15]
      break;
 80064f4:	e000      	b.n	80064f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80064f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a46      	ldr	r2, [pc, #280]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d013      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006532:	d00f      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a43      	ldr	r2, [pc, #268]	@ (8006644 <TIM_Base_SetConfig+0x130>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d00b      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a42      	ldr	r2, [pc, #264]	@ (8006648 <TIM_Base_SetConfig+0x134>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a41      	ldr	r2, [pc, #260]	@ (800664c <TIM_Base_SetConfig+0x138>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0x40>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a40      	ldr	r2, [pc, #256]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d108      	bne.n	8006566 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a35      	ldr	r2, [pc, #212]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d02b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006574:	d027      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a32      	ldr	r2, [pc, #200]	@ (8006644 <TIM_Base_SetConfig+0x130>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d023      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a31      	ldr	r2, [pc, #196]	@ (8006648 <TIM_Base_SetConfig+0x134>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01f      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a30      	ldr	r2, [pc, #192]	@ (800664c <TIM_Base_SetConfig+0x138>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d01b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a2f      	ldr	r2, [pc, #188]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d017      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a2e      	ldr	r2, [pc, #184]	@ (8006654 <TIM_Base_SetConfig+0x140>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d013      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	4a2d      	ldr	r2, [pc, #180]	@ (8006658 <TIM_Base_SetConfig+0x144>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00f      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	4a2c      	ldr	r2, [pc, #176]	@ (800665c <TIM_Base_SetConfig+0x148>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00b      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006660 <TIM_Base_SetConfig+0x14c>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d007      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	4a2a      	ldr	r2, [pc, #168]	@ (8006664 <TIM_Base_SetConfig+0x150>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d003      	beq.n	80065c6 <TIM_Base_SetConfig+0xb2>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	4a29      	ldr	r2, [pc, #164]	@ (8006668 <TIM_Base_SetConfig+0x154>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d108      	bne.n	80065d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	689a      	ldr	r2, [r3, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	681a      	ldr	r2, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a10      	ldr	r2, [pc, #64]	@ (8006640 <TIM_Base_SetConfig+0x12c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_Base_SetConfig+0xf8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a12      	ldr	r2, [pc, #72]	@ (8006650 <TIM_Base_SetConfig+0x13c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d103      	bne.n	8006614 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d105      	bne.n	8006632 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f023 0201 	bic.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	611a      	str	r2, [r3, #16]
  }
}
 8006632:	bf00      	nop
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	40010000 	.word	0x40010000
 8006644:	40000400 	.word	0x40000400
 8006648:	40000800 	.word	0x40000800
 800664c:	40000c00 	.word	0x40000c00
 8006650:	40010400 	.word	0x40010400
 8006654:	40014000 	.word	0x40014000
 8006658:	40014400 	.word	0x40014400
 800665c:	40014800 	.word	0x40014800
 8006660:	40001800 	.word	0x40001800
 8006664:	40001c00 	.word	0x40001c00
 8006668:	40002000 	.word	0x40002000

0800666c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f023 0201 	bic.w	r2, r3, #1
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f023 0302 	bic.w	r3, r3, #2
 80066b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4313      	orrs	r3, r2
 80066be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <TIM_OC1_SetConfig+0xd8>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d003      	beq.n	80066d0 <TIM_OC1_SetConfig+0x64>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <TIM_OC1_SetConfig+0xdc>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10c      	bne.n	80066ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f023 0308 	bic.w	r3, r3, #8
 80066d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	697a      	ldr	r2, [r7, #20]
 80066de:	4313      	orrs	r3, r2
 80066e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f023 0304 	bic.w	r3, r3, #4
 80066e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a15      	ldr	r2, [pc, #84]	@ (8006744 <TIM_OC1_SetConfig+0xd8>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d003      	beq.n	80066fa <TIM_OC1_SetConfig+0x8e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a14      	ldr	r2, [pc, #80]	@ (8006748 <TIM_OC1_SetConfig+0xdc>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d111      	bne.n	800671e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	693a      	ldr	r2, [r7, #16]
 800671a:	4313      	orrs	r3, r2
 800671c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	621a      	str	r2, [r3, #32]
}
 8006738:	bf00      	nop
 800673a:	371c      	adds	r7, #28
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	40010000 	.word	0x40010000
 8006748:	40010400 	.word	0x40010400

0800674c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800674c:	b480      	push	{r7}
 800674e:	b087      	sub	sp, #28
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a1b      	ldr	r3, [r3, #32]
 800675a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	f023 0210 	bic.w	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800677a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006782:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	4313      	orrs	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	f023 0320 	bic.w	r3, r3, #32
 8006796:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	011b      	lsls	r3, r3, #4
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	4313      	orrs	r3, r2
 80067a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a22      	ldr	r2, [pc, #136]	@ (8006830 <TIM_OC2_SetConfig+0xe4>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d003      	beq.n	80067b4 <TIM_OC2_SetConfig+0x68>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a21      	ldr	r2, [pc, #132]	@ (8006834 <TIM_OC2_SetConfig+0xe8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d10d      	bne.n	80067d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a17      	ldr	r2, [pc, #92]	@ (8006830 <TIM_OC2_SetConfig+0xe4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d003      	beq.n	80067e0 <TIM_OC2_SetConfig+0x94>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <TIM_OC2_SetConfig+0xe8>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d113      	bne.n	8006808 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80067e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	695b      	ldr	r3, [r3, #20]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	621a      	str	r2, [r3, #32]
}
 8006822:	bf00      	nop
 8006824:	371c      	adds	r7, #28
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40010000 	.word	0x40010000
 8006834:	40010400 	.word	0x40010400

08006838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006838:	b480      	push	{r7}
 800683a:	b087      	sub	sp, #28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69db      	ldr	r3, [r3, #28]
 800685e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f023 0303 	bic.w	r3, r3, #3
 800686e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4313      	orrs	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006880:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	021b      	lsls	r3, r3, #8
 8006888:	697a      	ldr	r2, [r7, #20]
 800688a:	4313      	orrs	r3, r2
 800688c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a21      	ldr	r2, [pc, #132]	@ (8006918 <TIM_OC3_SetConfig+0xe0>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_OC3_SetConfig+0x66>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a20      	ldr	r2, [pc, #128]	@ (800691c <TIM_OC3_SetConfig+0xe4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d10d      	bne.n	80068ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80068a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a16      	ldr	r2, [pc, #88]	@ (8006918 <TIM_OC3_SetConfig+0xe0>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC3_SetConfig+0x92>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a15      	ldr	r2, [pc, #84]	@ (800691c <TIM_OC3_SetConfig+0xe4>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d113      	bne.n	80068f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	011b      	lsls	r3, r3, #4
 80068e0:	693a      	ldr	r2, [r7, #16]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	699b      	ldr	r3, [r3, #24]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	621a      	str	r2, [r3, #32]
}
 800690c:	bf00      	nop
 800690e:	371c      	adds	r7, #28
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40010000 	.word	0x40010000
 800691c:	40010400 	.word	0x40010400

08006920 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006920:	b480      	push	{r7}
 8006922:	b087      	sub	sp, #28
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800694e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	021b      	lsls	r3, r3, #8
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800696a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	693a      	ldr	r2, [r7, #16]
 8006974:	4313      	orrs	r3, r2
 8006976:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a12      	ldr	r2, [pc, #72]	@ (80069c4 <TIM_OC4_SetConfig+0xa4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d003      	beq.n	8006988 <TIM_OC4_SetConfig+0x68>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a11      	ldr	r2, [pc, #68]	@ (80069c8 <TIM_OC4_SetConfig+0xa8>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d109      	bne.n	800699c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800698e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	019b      	lsls	r3, r3, #6
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685a      	ldr	r2, [r3, #4]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	693a      	ldr	r2, [r7, #16]
 80069b4:	621a      	str	r2, [r3, #32]
}
 80069b6:	bf00      	nop
 80069b8:	371c      	adds	r7, #28
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40010400 	.word	0x40010400

080069cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6a1b      	ldr	r3, [r3, #32]
 80069dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f023 0201 	bic.w	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	4313      	orrs	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f023 030a 	bic.w	r3, r3, #10
 8006a08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	621a      	str	r2, [r3, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	371c      	adds	r7, #28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b087      	sub	sp, #28
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	60b9      	str	r1, [r7, #8]
 8006a34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	f023 0210 	bic.w	r2, r3, #16
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	031b      	lsls	r3, r3, #12
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006aa2:	683a      	ldr	r2, [r7, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	f043 0307 	orr.w	r3, r3, #7
 8006aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	bf00      	nop
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr

08006ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b087      	sub	sp, #28
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	021a      	lsls	r2, r3, #8
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	609a      	str	r2, [r3, #8]
}
 8006af4:	bf00      	nop
 8006af6:	371c      	adds	r7, #28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b087      	sub	sp, #28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f003 031f 	and.w	r3, r3, #31
 8006b12:	2201      	movs	r2, #1
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	43db      	mvns	r3, r3
 8006b22:	401a      	ands	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f003 031f 	and.w	r3, r3, #31
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	fa01 f303 	lsl.w	r3, r1, r3
 8006b38:	431a      	orrs	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	621a      	str	r2, [r3, #32]
}
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e05a      	b.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d01d      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1a      	ldr	r2, [pc, #104]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a18      	ldr	r2, [pc, #96]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a17      	ldr	r2, [pc, #92]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a15      	ldr	r2, [pc, #84]	@ (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10c      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40000400 	.word	0x40000400
 8006c30:	40000800 	.word	0x40000800
 8006c34:	40000c00 	.word	0x40000c00
 8006c38:	40010400 	.word	0x40010400
 8006c3c:	40014000 	.word	0x40014000
 8006c40:	40001800 	.word	0x40001800

08006c44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e042      	b.n	8006cdc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fc fca4 	bl	80035b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2224      	movs	r2, #36	@ 0x24
 8006c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fdbd 	bl	8007808 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691a      	ldr	r2, [r3, #16]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	695a      	ldr	r2, [r3, #20]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2220      	movs	r2, #32
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	@ 0x28
 8006ce8:	af02      	add	r7, sp, #8
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b20      	cmp	r3, #32
 8006d02:	d175      	bne.n	8006df0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d002      	beq.n	8006d10 <HAL_UART_Transmit+0x2c>
 8006d0a:	88fb      	ldrh	r3, [r7, #6]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e06e      	b.n	8006df2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2221      	movs	r2, #33	@ 0x21
 8006d1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d22:	f7fc fe95 	bl	8003a50 <HAL_GetTick>
 8006d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	88fa      	ldrh	r2, [r7, #6]
 8006d2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	88fa      	ldrh	r2, [r7, #6]
 8006d32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d3c:	d108      	bne.n	8006d50 <HAL_UART_Transmit+0x6c>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d104      	bne.n	8006d50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d46:	2300      	movs	r3, #0
 8006d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	61bb      	str	r3, [r7, #24]
 8006d4e:	e003      	b.n	8006d58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d58:	e02e      	b.n	8006db8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2200      	movs	r2, #0
 8006d62:	2180      	movs	r1, #128	@ 0x80
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fb1f 	bl	80073a8 <UART_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2220      	movs	r2, #32
 8006d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006d78:	2303      	movs	r3, #3
 8006d7a:	e03a      	b.n	8006df2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d10b      	bne.n	8006d9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	881b      	ldrh	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	3302      	adds	r3, #2
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e007      	b.n	8006daa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1cb      	bne.n	8006d5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	2140      	movs	r1, #64	@ 0x40
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 faeb 	bl	80073a8 <UART_WaitOnFlagUntilTimeout>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d005      	beq.n	8006de4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e006      	b.n	8006df2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006dec:	2300      	movs	r3, #0
 8006dee:	e000      	b.n	8006df2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
  }
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3720      	adds	r7, #32
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	4613      	mov	r3, r2
 8006e06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d112      	bne.n	8006e3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_UART_Receive_IT+0x26>
 8006e1a:	88fb      	ldrh	r3, [r7, #6]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e00b      	b.n	8006e3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	68b9      	ldr	r1, [r7, #8]
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f000 fb12 	bl	800745a <UART_Start_Receive_IT>
 8006e36:	4603      	mov	r3, r0
 8006e38:	e000      	b.n	8006e3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006e3a:	2302      	movs	r3, #2
  }
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b0ba      	sub	sp, #232	@ 0xe8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006e70:	2300      	movs	r3, #0
 8006e72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7a:	f003 030f 	and.w	r3, r3, #15
 8006e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006e82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10f      	bne.n	8006eaa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8e:	f003 0320 	and.w	r3, r3, #32
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_UART_IRQHandler+0x66>
 8006e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e9a:	f003 0320 	and.w	r3, r3, #32
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fbf2 	bl	800768c <UART_Receive_IT>
      return;
 8006ea8:	e25b      	b.n	8007362 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006eaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80de 	beq.w	8007070 <HAL_UART_IRQHandler+0x22c>
 8006eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d106      	bne.n	8006ece <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80d1 	beq.w	8007070 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ed2:	f003 0301 	and.w	r3, r3, #1
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <HAL_UART_IRQHandler+0xae>
 8006eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d005      	beq.n	8006ef2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	f043 0201 	orr.w	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef6:	f003 0304 	and.w	r3, r3, #4
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <HAL_UART_IRQHandler+0xd2>
 8006efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d005      	beq.n	8006f16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f0e:	f043 0202 	orr.w	r2, r3, #2
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00b      	beq.n	8006f3a <HAL_UART_IRQHandler+0xf6>
 8006f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d005      	beq.n	8006f3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f32:	f043 0204 	orr.w	r2, r3, #4
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d011      	beq.n	8006f6a <HAL_UART_IRQHandler+0x126>
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d105      	bne.n	8006f5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d005      	beq.n	8006f6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f62:	f043 0208 	orr.w	r2, r3, #8
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f000 81f2 	beq.w	8007358 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f78:	f003 0320 	and.w	r3, r3, #32
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d008      	beq.n	8006f92 <HAL_UART_IRQHandler+0x14e>
 8006f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f84:	f003 0320 	and.w	r3, r3, #32
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 fb7d 	bl	800768c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695b      	ldr	r3, [r3, #20]
 8006f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f9c:	2b40      	cmp	r3, #64	@ 0x40
 8006f9e:	bf0c      	ite	eq
 8006fa0:	2301      	moveq	r3, #1
 8006fa2:	2300      	movne	r3, #0
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fae:	f003 0308 	and.w	r3, r3, #8
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <HAL_UART_IRQHandler+0x17a>
 8006fb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d04f      	beq.n	800705e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fa85 	bl	80074ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fce:	2b40      	cmp	r3, #64	@ 0x40
 8006fd0:	d141      	bne.n	8007056 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3314      	adds	r3, #20
 8006fd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006fe0:	e853 3f00 	ldrex	r3, [r3]
 8006fe4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006fe8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3314      	adds	r3, #20
 8006ffa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006ffe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007002:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007006:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800700a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1d9      	bne.n	8006fd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d013      	beq.n	800704e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800702a:	4a7e      	ldr	r2, [pc, #504]	@ (8007224 <HAL_UART_IRQHandler+0x3e0>)
 800702c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007032:	4618      	mov	r0, r3
 8007034:	f7fd fa99 	bl	800456a <HAL_DMA_Abort_IT>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704c:	e00e      	b.n	800706c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f994 	bl	800737c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e00a      	b.n	800706c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f990 	bl	800737c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e006      	b.n	800706c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f98c 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800706a:	e175      	b.n	8007358 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800706c:	bf00      	nop
    return;
 800706e:	e173      	b.n	8007358 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007074:	2b01      	cmp	r3, #1
 8007076:	f040 814f 	bne.w	8007318 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800707a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8148 	beq.w	8007318 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8141 	beq.w	8007318 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007096:	2300      	movs	r3, #0
 8007098:	60bb      	str	r3, [r7, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60bb      	str	r3, [r7, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	60bb      	str	r3, [r7, #8]
 80070aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070b6:	2b40      	cmp	r3, #64	@ 0x40
 80070b8:	f040 80b6 	bne.w	8007228 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8145 	beq.w	800735c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80070d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070da:	429a      	cmp	r2, r3
 80070dc:	f080 813e 	bcs.w	800735c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80070e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070f2:	f000 8088 	beq.w	8007206 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	330c      	adds	r3, #12
 80070fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800710c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007114:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	330c      	adds	r3, #12
 800711e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007122:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800712e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800713a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1d9      	bne.n	80070f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3314      	adds	r3, #20
 8007148:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007152:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007154:	f023 0301 	bic.w	r3, r3, #1
 8007158:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	3314      	adds	r3, #20
 8007162:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007166:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800716a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800716e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007178:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e1      	bne.n	8007142 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	3314      	adds	r3, #20
 8007184:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007186:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007188:	e853 3f00 	ldrex	r3, [r3]
 800718c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800718e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3314      	adds	r3, #20
 800719e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80071a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071aa:	e841 2300 	strex	r3, r2, [r1]
 80071ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1e3      	bne.n	800717e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2220      	movs	r2, #32
 80071ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	330c      	adds	r3, #12
 80071ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071d6:	f023 0310 	bic.w	r3, r3, #16
 80071da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	330c      	adds	r3, #12
 80071e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80071e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80071ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e3      	bne.n	80071c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007200:	4618      	mov	r0, r3
 8007202:	f7fd f942 	bl	800448a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007214:	b29b      	uxth	r3, r3
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f8b7 	bl	8007390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007222:	e09b      	b.n	800735c <HAL_UART_IRQHandler+0x518>
 8007224:	08007595 	.word	0x08007595
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007230:	b29b      	uxth	r3, r3
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 808e 	beq.w	8007360 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8089 	beq.w	8007360 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007258:	e853 3f00 	ldrex	r3, [r3]
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800725e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007260:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007264:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007272:	647a      	str	r2, [r7, #68]	@ 0x44
 8007274:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007278:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e3      	bne.n	800724e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3314      	adds	r3, #20
 800728c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	e853 3f00 	ldrex	r3, [r3]
 8007294:	623b      	str	r3, [r7, #32]
   return(result);
 8007296:	6a3b      	ldr	r3, [r7, #32]
 8007298:	f023 0301 	bic.w	r3, r3, #1
 800729c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3314      	adds	r3, #20
 80072a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80072aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80072ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e3      	bne.n	8007286 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60fb      	str	r3, [r7, #12]
   return(result);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f023 0310 	bic.w	r3, r3, #16
 80072e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	330c      	adds	r3, #12
 80072ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80072f0:	61fa      	str	r2, [r7, #28]
 80072f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	617b      	str	r3, [r7, #20]
   return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e3      	bne.n	80072cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800730a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f83d 	bl	8007390 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007316:	e023      	b.n	8007360 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800731c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007320:	2b00      	cmp	r3, #0
 8007322:	d009      	beq.n	8007338 <HAL_UART_IRQHandler+0x4f4>
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f943 	bl	80075bc <UART_Transmit_IT>
    return;
 8007336:	e014      	b.n	8007362 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007338:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007340:	2b00      	cmp	r3, #0
 8007342:	d00e      	beq.n	8007362 <HAL_UART_IRQHandler+0x51e>
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f983 	bl	800765c <UART_EndTransmit_IT>
    return;
 8007356:	e004      	b.n	8007362 <HAL_UART_IRQHandler+0x51e>
    return;
 8007358:	bf00      	nop
 800735a:	e002      	b.n	8007362 <HAL_UART_IRQHandler+0x51e>
      return;
 800735c:	bf00      	nop
 800735e:	e000      	b.n	8007362 <HAL_UART_IRQHandler+0x51e>
      return;
 8007360:	bf00      	nop
  }
}
 8007362:	37e8      	adds	r7, #232	@ 0xe8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	460b      	mov	r3, r1
 800739a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073b8:	e03b      	b.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c0:	d037      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80073c2:	f7fc fb45 	bl	8003a50 <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	6a3a      	ldr	r2, [r7, #32]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d302      	bcc.n	80073d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d101      	bne.n	80073dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	e03a      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	f003 0304 	and.w	r3, r3, #4
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d023      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	2b80      	cmp	r3, #128	@ 0x80
 80073ee:	d020      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b40      	cmp	r3, #64	@ 0x40
 80073f4:	d01d      	beq.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b08      	cmp	r3, #8
 8007402:	d116      	bne.n	8007432 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007404:	2300      	movs	r3, #0
 8007406:	617b      	str	r3, [r7, #20]
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	617b      	str	r3, [r7, #20]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f857 	bl	80074ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2208      	movs	r2, #8
 8007424:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e00f      	b.n	8007452 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4013      	ands	r3, r2
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	429a      	cmp	r2, r3
 8007440:	bf0c      	ite	eq
 8007442:	2301      	moveq	r3, #1
 8007444:	2300      	movne	r3, #0
 8007446:	b2db      	uxtb	r3, r3
 8007448:	461a      	mov	r2, r3
 800744a:	79fb      	ldrb	r3, [r7, #7]
 800744c:	429a      	cmp	r2, r3
 800744e:	d0b4      	beq.n	80073ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3718      	adds	r7, #24
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	60f8      	str	r0, [r7, #12]
 8007462:	60b9      	str	r1, [r7, #8]
 8007464:	4613      	mov	r3, r2
 8007466:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	88fa      	ldrh	r2, [r7, #6]
 8007472:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	88fa      	ldrh	r2, [r7, #6]
 8007478:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2222      	movs	r2, #34	@ 0x22
 8007484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d007      	beq.n	80074a0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800749e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695a      	ldr	r2, [r3, #20]
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f042 0201 	orr.w	r2, r2, #1
 80074ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0220 	orr.w	r2, r2, #32
 80074be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3714      	adds	r7, #20
 80074c6:	46bd      	mov	sp, r7
 80074c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074cc:	4770      	bx	lr

080074ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ce:	b480      	push	{r7}
 80074d0:	b095      	sub	sp, #84	@ 0x54
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	330c      	adds	r3, #12
 80074dc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80074e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	330c      	adds	r3, #12
 80074f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80074f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074fa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80074fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074fe:	e841 2300 	strex	r3, r2, [r1]
 8007502:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1e5      	bne.n	80074d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	61fb      	str	r3, [r7, #28]
   return(result);
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3314      	adds	r3, #20
 8007528:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800752a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800752c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007530:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e5      	bne.n	800750a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007542:	2b01      	cmp	r3, #1
 8007544:	d119      	bne.n	800757a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	330c      	adds	r3, #12
 800754c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	60bb      	str	r3, [r7, #8]
   return(result);
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	f023 0310 	bic.w	r3, r3, #16
 800755c:	647b      	str	r3, [r7, #68]	@ 0x44
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	330c      	adds	r3, #12
 8007564:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007566:	61ba      	str	r2, [r7, #24]
 8007568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6979      	ldr	r1, [r7, #20]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e5      	bne.n	8007546 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007588:	bf00      	nop
 800758a:	3754      	adds	r7, #84	@ 0x54
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2200      	movs	r2, #0
 80075ac:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ae:	68f8      	ldr	r0, [r7, #12]
 80075b0:	f7ff fee4 	bl	800737c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b21      	cmp	r3, #33	@ 0x21
 80075ce:	d13e      	bne.n	800764e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075d8:	d114      	bne.n	8007604 <UART_Transmit_IT+0x48>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d110      	bne.n	8007604 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	1c9a      	adds	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	621a      	str	r2, [r3, #32]
 8007602:	e008      	b.n	8007616 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	1c59      	adds	r1, r3, #1
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	6211      	str	r1, [r2, #32]
 800760e:	781a      	ldrb	r2, [r3, #0]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4619      	mov	r1, r3
 8007624:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007626:	2b00      	cmp	r3, #0
 8007628:	d10f      	bne.n	800764a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68da      	ldr	r2, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007638:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68da      	ldr	r2, [r3, #12]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007648:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800764a:	2300      	movs	r3, #0
 800764c:	e000      	b.n	8007650 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800764e:	2302      	movs	r3, #2
  }
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68da      	ldr	r2, [r3, #12]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007672:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fe73 	bl	8007368 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08c      	sub	sp, #48	@ 0x30
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b22      	cmp	r3, #34	@ 0x22
 800769e:	f040 80ae 	bne.w	80077fe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076aa:	d117      	bne.n	80076dc <UART_Receive_IT+0x50>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d113      	bne.n	80076dc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076b4:	2300      	movs	r3, #0
 80076b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	1c9a      	adds	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80076da:	e026      	b.n	800772a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80076e2:	2300      	movs	r3, #0
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076ee:	d007      	beq.n	8007700 <UART_Receive_IT+0x74>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <UART_Receive_IT+0x82>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d106      	bne.n	800770e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	701a      	strb	r2, [r3, #0]
 800770c:	e008      	b.n	8007720 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	b2db      	uxtb	r3, r3
 8007716:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800771a:	b2da      	uxtb	r2, r3
 800771c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	687a      	ldr	r2, [r7, #4]
 8007736:	4619      	mov	r1, r3
 8007738:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800773a:	2b00      	cmp	r3, #0
 800773c:	d15d      	bne.n	80077fa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0220 	bic.w	r2, r2, #32
 800774c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800775c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f022 0201 	bic.w	r2, r2, #1
 800776c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007780:	2b01      	cmp	r3, #1
 8007782:	d135      	bne.n	80077f0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	330c      	adds	r3, #12
 8007790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f023 0310 	bic.w	r3, r3, #16
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	330c      	adds	r3, #12
 80077a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077aa:	623a      	str	r2, [r7, #32]
 80077ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	69f9      	ldr	r1, [r7, #28]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e5      	bne.n	800778a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 0310 	and.w	r3, r3, #16
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d10a      	bne.n	80077e2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80077cc:	2300      	movs	r3, #0
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077e6:	4619      	mov	r1, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fdd1 	bl	8007390 <HAL_UARTEx_RxEventCallback>
 80077ee:	e002      	b.n	80077f6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f7fb fd8b 	bl	800330c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	e002      	b.n	8007800 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e000      	b.n	8007800 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80077fe:	2302      	movs	r3, #2
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3730      	adds	r7, #48	@ 0x30
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800780c:	b0c0      	sub	sp, #256	@ 0x100
 800780e:	af00      	add	r7, sp, #0
 8007810:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	691b      	ldr	r3, [r3, #16]
 800781c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007824:	68d9      	ldr	r1, [r3, #12]
 8007826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	ea40 0301 	orr.w	r3, r0, r1
 8007830:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	431a      	orrs	r2, r3
 8007840:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	431a      	orrs	r2, r3
 8007848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4313      	orrs	r3, r2
 8007850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007860:	f021 010c 	bic.w	r1, r1, #12
 8007864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800786e:	430b      	orrs	r3, r1
 8007870:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	695b      	ldr	r3, [r3, #20]
 800787a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007882:	6999      	ldr	r1, [r3, #24]
 8007884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	ea40 0301 	orr.w	r3, r0, r1
 800788e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b8f      	ldr	r3, [pc, #572]	@ (8007ad4 <UART_SetConfig+0x2cc>)
 8007898:	429a      	cmp	r2, r3
 800789a:	d005      	beq.n	80078a8 <UART_SetConfig+0xa0>
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	4b8d      	ldr	r3, [pc, #564]	@ (8007ad8 <UART_SetConfig+0x2d0>)
 80078a4:	429a      	cmp	r2, r3
 80078a6:	d104      	bne.n	80078b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80078a8:	f7fe fb26 	bl	8005ef8 <HAL_RCC_GetPCLK2Freq>
 80078ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80078b0:	e003      	b.n	80078ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80078b2:	f7fe fb0d 	bl	8005ed0 <HAL_RCC_GetPCLK1Freq>
 80078b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078be:	69db      	ldr	r3, [r3, #28]
 80078c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c4:	f040 810c 	bne.w	8007ae0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80078c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078cc:	2200      	movs	r2, #0
 80078ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80078d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80078d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80078da:	4622      	mov	r2, r4
 80078dc:	462b      	mov	r3, r5
 80078de:	1891      	adds	r1, r2, r2
 80078e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80078e2:	415b      	adcs	r3, r3
 80078e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80078ea:	4621      	mov	r1, r4
 80078ec:	eb12 0801 	adds.w	r8, r2, r1
 80078f0:	4629      	mov	r1, r5
 80078f2:	eb43 0901 	adc.w	r9, r3, r1
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	f04f 0300 	mov.w	r3, #0
 80078fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007902:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007906:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800790a:	4690      	mov	r8, r2
 800790c:	4699      	mov	r9, r3
 800790e:	4623      	mov	r3, r4
 8007910:	eb18 0303 	adds.w	r3, r8, r3
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007918:	462b      	mov	r3, r5
 800791a:	eb49 0303 	adc.w	r3, r9, r3
 800791e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800792e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007932:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007936:	460b      	mov	r3, r1
 8007938:	18db      	adds	r3, r3, r3
 800793a:	653b      	str	r3, [r7, #80]	@ 0x50
 800793c:	4613      	mov	r3, r2
 800793e:	eb42 0303 	adc.w	r3, r2, r3
 8007942:	657b      	str	r3, [r7, #84]	@ 0x54
 8007944:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007948:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800794c:	f7f9 f99c 	bl	8000c88 <__aeabi_uldivmod>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	4b61      	ldr	r3, [pc, #388]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007956:	fba3 2302 	umull	r2, r3, r3, r2
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	011c      	lsls	r4, r3, #4
 800795e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007962:	2200      	movs	r2, #0
 8007964:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007968:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800796c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007970:	4642      	mov	r2, r8
 8007972:	464b      	mov	r3, r9
 8007974:	1891      	adds	r1, r2, r2
 8007976:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007978:	415b      	adcs	r3, r3
 800797a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800797c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007980:	4641      	mov	r1, r8
 8007982:	eb12 0a01 	adds.w	sl, r2, r1
 8007986:	4649      	mov	r1, r9
 8007988:	eb43 0b01 	adc.w	fp, r3, r1
 800798c:	f04f 0200 	mov.w	r2, #0
 8007990:	f04f 0300 	mov.w	r3, #0
 8007994:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007998:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800799c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079a0:	4692      	mov	sl, r2
 80079a2:	469b      	mov	fp, r3
 80079a4:	4643      	mov	r3, r8
 80079a6:	eb1a 0303 	adds.w	r3, sl, r3
 80079aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80079ae:	464b      	mov	r3, r9
 80079b0:	eb4b 0303 	adc.w	r3, fp, r3
 80079b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80079c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80079c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80079cc:	460b      	mov	r3, r1
 80079ce:	18db      	adds	r3, r3, r3
 80079d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079d2:	4613      	mov	r3, r2
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80079de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80079e2:	f7f9 f951 	bl	8000c88 <__aeabi_uldivmod>
 80079e6:	4602      	mov	r2, r0
 80079e8:	460b      	mov	r3, r1
 80079ea:	4611      	mov	r1, r2
 80079ec:	4b3b      	ldr	r3, [pc, #236]	@ (8007adc <UART_SetConfig+0x2d4>)
 80079ee:	fba3 2301 	umull	r2, r3, r3, r1
 80079f2:	095b      	lsrs	r3, r3, #5
 80079f4:	2264      	movs	r2, #100	@ 0x64
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	1acb      	subs	r3, r1, r3
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a02:	4b36      	ldr	r3, [pc, #216]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007a04:	fba3 2302 	umull	r2, r3, r3, r2
 8007a08:	095b      	lsrs	r3, r3, #5
 8007a0a:	005b      	lsls	r3, r3, #1
 8007a0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a10:	441c      	add	r4, r3
 8007a12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a24:	4642      	mov	r2, r8
 8007a26:	464b      	mov	r3, r9
 8007a28:	1891      	adds	r1, r2, r2
 8007a2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a2c:	415b      	adcs	r3, r3
 8007a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a34:	4641      	mov	r1, r8
 8007a36:	1851      	adds	r1, r2, r1
 8007a38:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	414b      	adcs	r3, r1
 8007a3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a40:	f04f 0200 	mov.w	r2, #0
 8007a44:	f04f 0300 	mov.w	r3, #0
 8007a48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	00cb      	lsls	r3, r1, #3
 8007a50:	4651      	mov	r1, sl
 8007a52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a56:	4651      	mov	r1, sl
 8007a58:	00ca      	lsls	r2, r1, #3
 8007a5a:	4610      	mov	r0, r2
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	4642      	mov	r2, r8
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a68:	464b      	mov	r3, r9
 8007a6a:	460a      	mov	r2, r1
 8007a6c:	eb42 0303 	adc.w	r3, r2, r3
 8007a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007a84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a88:	460b      	mov	r3, r1
 8007a8a:	18db      	adds	r3, r3, r3
 8007a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a8e:	4613      	mov	r3, r2
 8007a90:	eb42 0303 	adc.w	r3, r2, r3
 8007a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a9e:	f7f9 f8f3 	bl	8000c88 <__aeabi_uldivmod>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007aa8:	fba3 1302 	umull	r1, r3, r3, r2
 8007aac:	095b      	lsrs	r3, r3, #5
 8007aae:	2164      	movs	r1, #100	@ 0x64
 8007ab0:	fb01 f303 	mul.w	r3, r1, r3
 8007ab4:	1ad3      	subs	r3, r2, r3
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	3332      	adds	r3, #50	@ 0x32
 8007aba:	4a08      	ldr	r2, [pc, #32]	@ (8007adc <UART_SetConfig+0x2d4>)
 8007abc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ac0:	095b      	lsrs	r3, r3, #5
 8007ac2:	f003 0207 	and.w	r2, r3, #7
 8007ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4422      	add	r2, r4
 8007ace:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ad0:	e106      	b.n	8007ce0 <UART_SetConfig+0x4d8>
 8007ad2:	bf00      	nop
 8007ad4:	40011000 	.word	0x40011000
 8007ad8:	40011400 	.word	0x40011400
 8007adc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007aea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007aee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	1891      	adds	r1, r2, r2
 8007af8:	6239      	str	r1, [r7, #32]
 8007afa:	415b      	adcs	r3, r3
 8007afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b02:	4641      	mov	r1, r8
 8007b04:	1854      	adds	r4, r2, r1
 8007b06:	4649      	mov	r1, r9
 8007b08:	eb43 0501 	adc.w	r5, r3, r1
 8007b0c:	f04f 0200 	mov.w	r2, #0
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	00eb      	lsls	r3, r5, #3
 8007b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b1a:	00e2      	lsls	r2, r4, #3
 8007b1c:	4614      	mov	r4, r2
 8007b1e:	461d      	mov	r5, r3
 8007b20:	4643      	mov	r3, r8
 8007b22:	18e3      	adds	r3, r4, r3
 8007b24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b28:	464b      	mov	r3, r9
 8007b2a:	eb45 0303 	adc.w	r3, r5, r3
 8007b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b42:	f04f 0200 	mov.w	r2, #0
 8007b46:	f04f 0300 	mov.w	r3, #0
 8007b4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007b4e:	4629      	mov	r1, r5
 8007b50:	008b      	lsls	r3, r1, #2
 8007b52:	4621      	mov	r1, r4
 8007b54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b58:	4621      	mov	r1, r4
 8007b5a:	008a      	lsls	r2, r1, #2
 8007b5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007b60:	f7f9 f892 	bl	8000c88 <__aeabi_uldivmod>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4b60      	ldr	r3, [pc, #384]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007b6a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	011c      	lsls	r4, r3, #4
 8007b72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007b80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	1891      	adds	r1, r2, r2
 8007b8a:	61b9      	str	r1, [r7, #24]
 8007b8c:	415b      	adcs	r3, r3
 8007b8e:	61fb      	str	r3, [r7, #28]
 8007b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b94:	4641      	mov	r1, r8
 8007b96:	1851      	adds	r1, r2, r1
 8007b98:	6139      	str	r1, [r7, #16]
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	414b      	adcs	r3, r1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007bac:	4659      	mov	r1, fp
 8007bae:	00cb      	lsls	r3, r1, #3
 8007bb0:	4651      	mov	r1, sl
 8007bb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bb6:	4651      	mov	r1, sl
 8007bb8:	00ca      	lsls	r2, r1, #3
 8007bba:	4610      	mov	r0, r2
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	4642      	mov	r2, r8
 8007bc2:	189b      	adds	r3, r3, r2
 8007bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bc8:	464b      	mov	r3, r9
 8007bca:	460a      	mov	r2, r1
 8007bcc:	eb42 0303 	adc.w	r3, r2, r3
 8007bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007be0:	f04f 0200 	mov.w	r2, #0
 8007be4:	f04f 0300 	mov.w	r3, #0
 8007be8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007bec:	4649      	mov	r1, r9
 8007bee:	008b      	lsls	r3, r1, #2
 8007bf0:	4641      	mov	r1, r8
 8007bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bf6:	4641      	mov	r1, r8
 8007bf8:	008a      	lsls	r2, r1, #2
 8007bfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007bfe:	f7f9 f843 	bl	8000c88 <__aeabi_uldivmod>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4611      	mov	r1, r2
 8007c08:	4b38      	ldr	r3, [pc, #224]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8007c0e:	095b      	lsrs	r3, r3, #5
 8007c10:	2264      	movs	r2, #100	@ 0x64
 8007c12:	fb02 f303 	mul.w	r3, r2, r3
 8007c16:	1acb      	subs	r3, r1, r3
 8007c18:	011b      	lsls	r3, r3, #4
 8007c1a:	3332      	adds	r3, #50	@ 0x32
 8007c1c:	4a33      	ldr	r2, [pc, #204]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c28:	441c      	add	r4, r3
 8007c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c2e:	2200      	movs	r2, #0
 8007c30:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c32:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	1891      	adds	r1, r2, r2
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	415b      	adcs	r3, r3
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c48:	4641      	mov	r1, r8
 8007c4a:	1851      	adds	r1, r2, r1
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	4649      	mov	r1, r9
 8007c50:	414b      	adcs	r3, r1
 8007c52:	607b      	str	r3, [r7, #4]
 8007c54:	f04f 0200 	mov.w	r2, #0
 8007c58:	f04f 0300 	mov.w	r3, #0
 8007c5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007c60:	4659      	mov	r1, fp
 8007c62:	00cb      	lsls	r3, r1, #3
 8007c64:	4651      	mov	r1, sl
 8007c66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c6a:	4651      	mov	r1, sl
 8007c6c:	00ca      	lsls	r2, r1, #3
 8007c6e:	4610      	mov	r0, r2
 8007c70:	4619      	mov	r1, r3
 8007c72:	4603      	mov	r3, r0
 8007c74:	4642      	mov	r2, r8
 8007c76:	189b      	adds	r3, r3, r2
 8007c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	460a      	mov	r2, r1
 8007c7e:	eb42 0303 	adc.w	r3, r2, r3
 8007c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007c90:	f04f 0200 	mov.w	r2, #0
 8007c94:	f04f 0300 	mov.w	r3, #0
 8007c98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c9c:	4649      	mov	r1, r9
 8007c9e:	008b      	lsls	r3, r1, #2
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	008a      	lsls	r2, r1, #2
 8007caa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007cae:	f7f8 ffeb 	bl	8000c88 <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007cb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007cbc:	095b      	lsrs	r3, r3, #5
 8007cbe:	2164      	movs	r1, #100	@ 0x64
 8007cc0:	fb01 f303 	mul.w	r3, r1, r3
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	011b      	lsls	r3, r3, #4
 8007cc8:	3332      	adds	r3, #50	@ 0x32
 8007cca:	4a08      	ldr	r2, [pc, #32]	@ (8007cec <UART_SetConfig+0x4e4>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	f003 020f 	and.w	r2, r3, #15
 8007cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4422      	add	r2, r4
 8007cde:	609a      	str	r2, [r3, #8]
}
 8007ce0:	bf00      	nop
 8007ce2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007cec:	51eb851f 	.word	0x51eb851f

08007cf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cf0:	b084      	sub	sp, #16
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
 8007cfa:	f107 001c 	add.w	r0, r7, #28
 8007cfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d02:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d123      	bne.n	8007d52 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d22:	687a      	ldr	r2, [r7, #4]
 8007d24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d105      	bne.n	8007d46 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 faa0 	bl	800828c <USB_CoreReset>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73fb      	strb	r3, [r7, #15]
 8007d50:	e01b      	b.n	8007d8a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa94 	bl	800828c <USB_CoreReset>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d106      	bne.n	8007d7e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007d7c:	e005      	b.n	8007d8a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d8a:	7fbb      	ldrb	r3, [r7, #30]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10b      	bne.n	8007da8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f043 0206 	orr.w	r2, r3, #6
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f043 0220 	orr.w	r2, r3, #32
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007db4:	b004      	add	sp, #16
 8007db6:	4770      	bx	lr

08007db8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	f023 0201 	bic.w	r2, r3, #1
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	370c      	adds	r7, #12
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
 8007de2:	460b      	mov	r3, r1
 8007de4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d115      	bne.n	8007e28 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e08:	200a      	movs	r0, #10
 8007e0a:	f7fb fe2d 	bl	8003a68 <HAL_Delay>
      ms += 10U;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	330a      	adds	r3, #10
 8007e12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 fa2b 	bl	8008270 <USB_GetMode>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d01e      	beq.n	8007e5e <USB_SetCurrentMode+0x84>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e24:	d9f0      	bls.n	8007e08 <USB_SetCurrentMode+0x2e>
 8007e26:	e01a      	b.n	8007e5e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e28:	78fb      	ldrb	r3, [r7, #3]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d115      	bne.n	8007e5a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007e3a:	200a      	movs	r0, #10
 8007e3c:	f7fb fe14 	bl	8003a68 <HAL_Delay>
      ms += 10U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	330a      	adds	r3, #10
 8007e44:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 fa12 	bl	8008270 <USB_GetMode>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d005      	beq.n	8007e5e <USB_SetCurrentMode+0x84>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2bc7      	cmp	r3, #199	@ 0xc7
 8007e56:	d9f0      	bls.n	8007e3a <USB_SetCurrentMode+0x60>
 8007e58:	e001      	b.n	8007e5e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e005      	b.n	8007e6a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2bc8      	cmp	r3, #200	@ 0xc8
 8007e62:	d101      	bne.n	8007e68 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007e64:	2301      	movs	r3, #1
 8007e66:	e000      	b.n	8007e6a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007e68:	2300      	movs	r3, #0
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
	...

08007e74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e74:	b084      	sub	sp, #16
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b086      	sub	sp, #24
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007e82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e8e:	2300      	movs	r3, #0
 8007e90:	613b      	str	r3, [r7, #16]
 8007e92:	e009      	b.n	8007ea8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	3340      	adds	r3, #64	@ 0x40
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	4413      	add	r3, r2
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	613b      	str	r3, [r7, #16]
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	2b0e      	cmp	r3, #14
 8007eac:	d9f2      	bls.n	8007e94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007eae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d11c      	bne.n	8007ef0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ec4:	f043 0302 	orr.w	r3, r3, #2
 8007ec8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ece:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ee6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	@ 0x38
 8007eee:	e00b      	b.n	8007f08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007f0e:	461a      	mov	r2, r3
 8007f10:	2300      	movs	r3, #0
 8007f12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007f14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d10d      	bne.n	8007f38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007f1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d104      	bne.n	8007f2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f968 	bl	80081fc <USB_SetDevSpeed>
 8007f2c:	e008      	b.n	8007f40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007f2e:	2101      	movs	r1, #1
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f963 	bl	80081fc <USB_SetDevSpeed>
 8007f36:	e003      	b.n	8007f40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007f38:	2103      	movs	r1, #3
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 f95e 	bl	80081fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007f40:	2110      	movs	r1, #16
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8fa 	bl	800813c <USB_FlushTxFifo>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d001      	beq.n	8007f52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f924 	bl	80081a0 <USB_FlushRxFifo>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d001      	beq.n	8007f62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f68:	461a      	mov	r2, r3
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f80:	461a      	mov	r2, r3
 8007f82:	2300      	movs	r3, #0
 8007f84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f86:	2300      	movs	r3, #0
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	e043      	b.n	8008014 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007fa2:	d118      	bne.n	8007fd6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d10a      	bne.n	8007fc0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	015a      	lsls	r2, r3, #5
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007fbc:	6013      	str	r3, [r2, #0]
 8007fbe:	e013      	b.n	8007fe8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fcc:	461a      	mov	r2, r3
 8007fce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007fd2:	6013      	str	r3, [r2, #0]
 8007fd4:	e008      	b.n	8007fe8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007fe2:	461a      	mov	r2, r3
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008006:	461a      	mov	r2, r3
 8008008:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800800c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	3301      	adds	r3, #1
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008018:	461a      	mov	r2, r3
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	4293      	cmp	r3, r2
 800801e:	d3b5      	bcc.n	8007f8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
 8008024:	e043      	b.n	80080ae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	015a      	lsls	r2, r3, #5
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	4413      	add	r3, r2
 800802e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008038:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800803c:	d118      	bne.n	8008070 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10a      	bne.n	800805a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	015a      	lsls	r2, r3, #5
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	4413      	add	r3, r2
 800804c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008050:	461a      	mov	r2, r3
 8008052:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	e013      	b.n	8008082 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	015a      	lsls	r2, r3, #5
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4413      	add	r3, r2
 8008062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008066:	461a      	mov	r2, r3
 8008068:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800806c:	6013      	str	r3, [r2, #0]
 800806e:	e008      	b.n	8008082 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	015a      	lsls	r2, r3, #5
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800807c:	461a      	mov	r2, r3
 800807e:	2300      	movs	r3, #0
 8008080:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	015a      	lsls	r2, r3, #5
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	4413      	add	r3, r2
 800808a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800808e:	461a      	mov	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	015a      	lsls	r2, r3, #5
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080a0:	461a      	mov	r2, r3
 80080a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80080a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	3301      	adds	r3, #1
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80080b2:	461a      	mov	r2, r3
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d3b5      	bcc.n	8008026 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080c0:	691b      	ldr	r3, [r3, #16]
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80080cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80080da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80080dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d105      	bne.n	80080f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	f043 0210 	orr.w	r2, r3, #16
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	699a      	ldr	r2, [r3, #24]
 80080f4:	4b10      	ldr	r3, [pc, #64]	@ (8008138 <USB_DevInit+0x2c4>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80080fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	f043 0208 	orr.w	r2, r3, #8
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008110:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008114:	2b01      	cmp	r3, #1
 8008116:	d107      	bne.n	8008128 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008120:	f043 0304 	orr.w	r3, r3, #4
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008128:	7dfb      	ldrb	r3, [r7, #23]
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008134:	b004      	add	sp, #16
 8008136:	4770      	bx	lr
 8008138:	803c3800 	.word	0x803c3800

0800813c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	3301      	adds	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008156:	d901      	bls.n	800815c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e01b      	b.n	8008194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	691b      	ldr	r3, [r3, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	daf2      	bge.n	800814a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	019b      	lsls	r3, r3, #6
 800816c:	f043 0220 	orr.w	r2, r3, #32
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008180:	d901      	bls.n	8008186 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008182:	2303      	movs	r3, #3
 8008184:	e006      	b.n	8008194 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d0f0      	beq.n	8008174 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80081a8:	2300      	movs	r3, #0
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3301      	adds	r3, #1
 80081b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081b8:	d901      	bls.n	80081be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e018      	b.n	80081f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	daf2      	bge.n	80081ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2210      	movs	r2, #16
 80081ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	3301      	adds	r3, #1
 80081d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081dc:	d901      	bls.n	80081e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80081de:	2303      	movs	r3, #3
 80081e0:	e006      	b.n	80081f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	2b10      	cmp	r3, #16
 80081ec:	d0f0      	beq.n	80081d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	78fb      	ldrb	r3, [r7, #3]
 8008216:	68f9      	ldr	r1, [r7, #12]
 8008218:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800821c:	4313      	orrs	r3, r2
 800821e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008220:	2300      	movs	r3, #0
}
 8008222:	4618      	mov	r0, r3
 8008224:	3714      	adds	r7, #20
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800822e:	b480      	push	{r7}
 8008230:	b085      	sub	sp, #20
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	68fa      	ldr	r2, [r7, #12]
 8008258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800825c:	f043 0302 	orr.w	r3, r3, #2
 8008260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	695b      	ldr	r3, [r3, #20]
 800827c:	f003 0301 	and.w	r3, r3, #1
}
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082a4:	d901      	bls.n	80082aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e01b      	b.n	80082e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	daf2      	bge.n	8008298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691b      	ldr	r3, [r3, #16]
 80082ba:	f043 0201 	orr.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3301      	adds	r3, #1
 80082c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082ce:	d901      	bls.n	80082d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80082d0:	2303      	movs	r3, #3
 80082d2:	e006      	b.n	80082e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d0f0      	beq.n	80082c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
	...

080082f0 <srand>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <srand+0x44>)
 80082f4:	681d      	ldr	r5, [r3, #0]
 80082f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80082f8:	4604      	mov	r4, r0
 80082fa:	b9b3      	cbnz	r3, 800832a <srand+0x3a>
 80082fc:	2018      	movs	r0, #24
 80082fe:	f001 fd3d 	bl	8009d7c <malloc>
 8008302:	4602      	mov	r2, r0
 8008304:	6328      	str	r0, [r5, #48]	@ 0x30
 8008306:	b920      	cbnz	r0, 8008312 <srand+0x22>
 8008308:	4b0b      	ldr	r3, [pc, #44]	@ (8008338 <srand+0x48>)
 800830a:	480c      	ldr	r0, [pc, #48]	@ (800833c <srand+0x4c>)
 800830c:	2146      	movs	r1, #70	@ 0x46
 800830e:	f000 fe81 	bl	8009014 <__assert_func>
 8008312:	490b      	ldr	r1, [pc, #44]	@ (8008340 <srand+0x50>)
 8008314:	4b0b      	ldr	r3, [pc, #44]	@ (8008344 <srand+0x54>)
 8008316:	e9c0 1300 	strd	r1, r3, [r0]
 800831a:	4b0b      	ldr	r3, [pc, #44]	@ (8008348 <srand+0x58>)
 800831c:	6083      	str	r3, [r0, #8]
 800831e:	230b      	movs	r3, #11
 8008320:	8183      	strh	r3, [r0, #12]
 8008322:	2100      	movs	r1, #0
 8008324:	2001      	movs	r0, #1
 8008326:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800832a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800832c:	2200      	movs	r2, #0
 800832e:	611c      	str	r4, [r3, #16]
 8008330:	615a      	str	r2, [r3, #20]
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	20004e8c 	.word	0x20004e8c
 8008338:	0800c174 	.word	0x0800c174
 800833c:	0800c18b 	.word	0x0800c18b
 8008340:	abcd330e 	.word	0xabcd330e
 8008344:	e66d1234 	.word	0xe66d1234
 8008348:	0005deec 	.word	0x0005deec

0800834c <rand>:
 800834c:	4b16      	ldr	r3, [pc, #88]	@ (80083a8 <rand+0x5c>)
 800834e:	b510      	push	{r4, lr}
 8008350:	681c      	ldr	r4, [r3, #0]
 8008352:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008354:	b9b3      	cbnz	r3, 8008384 <rand+0x38>
 8008356:	2018      	movs	r0, #24
 8008358:	f001 fd10 	bl	8009d7c <malloc>
 800835c:	4602      	mov	r2, r0
 800835e:	6320      	str	r0, [r4, #48]	@ 0x30
 8008360:	b920      	cbnz	r0, 800836c <rand+0x20>
 8008362:	4b12      	ldr	r3, [pc, #72]	@ (80083ac <rand+0x60>)
 8008364:	4812      	ldr	r0, [pc, #72]	@ (80083b0 <rand+0x64>)
 8008366:	2152      	movs	r1, #82	@ 0x52
 8008368:	f000 fe54 	bl	8009014 <__assert_func>
 800836c:	4911      	ldr	r1, [pc, #68]	@ (80083b4 <rand+0x68>)
 800836e:	4b12      	ldr	r3, [pc, #72]	@ (80083b8 <rand+0x6c>)
 8008370:	e9c0 1300 	strd	r1, r3, [r0]
 8008374:	4b11      	ldr	r3, [pc, #68]	@ (80083bc <rand+0x70>)
 8008376:	6083      	str	r3, [r0, #8]
 8008378:	230b      	movs	r3, #11
 800837a:	8183      	strh	r3, [r0, #12]
 800837c:	2100      	movs	r1, #0
 800837e:	2001      	movs	r0, #1
 8008380:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008384:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008386:	480e      	ldr	r0, [pc, #56]	@ (80083c0 <rand+0x74>)
 8008388:	690b      	ldr	r3, [r1, #16]
 800838a:	694c      	ldr	r4, [r1, #20]
 800838c:	4a0d      	ldr	r2, [pc, #52]	@ (80083c4 <rand+0x78>)
 800838e:	4358      	muls	r0, r3
 8008390:	fb02 0004 	mla	r0, r2, r4, r0
 8008394:	fba3 3202 	umull	r3, r2, r3, r2
 8008398:	3301      	adds	r3, #1
 800839a:	eb40 0002 	adc.w	r0, r0, r2
 800839e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80083a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80083a6:	bd10      	pop	{r4, pc}
 80083a8:	20004e8c 	.word	0x20004e8c
 80083ac:	0800c174 	.word	0x0800c174
 80083b0:	0800c18b 	.word	0x0800c18b
 80083b4:	abcd330e 	.word	0xabcd330e
 80083b8:	e66d1234 	.word	0xe66d1234
 80083bc:	0005deec 	.word	0x0005deec
 80083c0:	5851f42d 	.word	0x5851f42d
 80083c4:	4c957f2d 	.word	0x4c957f2d

080083c8 <__cvt>:
 80083c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083cc:	ec57 6b10 	vmov	r6, r7, d0
 80083d0:	2f00      	cmp	r7, #0
 80083d2:	460c      	mov	r4, r1
 80083d4:	4619      	mov	r1, r3
 80083d6:	463b      	mov	r3, r7
 80083d8:	bfbb      	ittet	lt
 80083da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80083de:	461f      	movlt	r7, r3
 80083e0:	2300      	movge	r3, #0
 80083e2:	232d      	movlt	r3, #45	@ 0x2d
 80083e4:	700b      	strb	r3, [r1, #0]
 80083e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80083ec:	4691      	mov	r9, r2
 80083ee:	f023 0820 	bic.w	r8, r3, #32
 80083f2:	bfbc      	itt	lt
 80083f4:	4632      	movlt	r2, r6
 80083f6:	4616      	movlt	r6, r2
 80083f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083fc:	d005      	beq.n	800840a <__cvt+0x42>
 80083fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008402:	d100      	bne.n	8008406 <__cvt+0x3e>
 8008404:	3401      	adds	r4, #1
 8008406:	2102      	movs	r1, #2
 8008408:	e000      	b.n	800840c <__cvt+0x44>
 800840a:	2103      	movs	r1, #3
 800840c:	ab03      	add	r3, sp, #12
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	ab02      	add	r3, sp, #8
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	ec47 6b10 	vmov	d0, r6, r7
 8008418:	4653      	mov	r3, sl
 800841a:	4622      	mov	r2, r4
 800841c:	f000 fea0 	bl	8009160 <_dtoa_r>
 8008420:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008424:	4605      	mov	r5, r0
 8008426:	d119      	bne.n	800845c <__cvt+0x94>
 8008428:	f019 0f01 	tst.w	r9, #1
 800842c:	d00e      	beq.n	800844c <__cvt+0x84>
 800842e:	eb00 0904 	add.w	r9, r0, r4
 8008432:	2200      	movs	r2, #0
 8008434:	2300      	movs	r3, #0
 8008436:	4630      	mov	r0, r6
 8008438:	4639      	mov	r1, r7
 800843a:	f7f8 fb65 	bl	8000b08 <__aeabi_dcmpeq>
 800843e:	b108      	cbz	r0, 8008444 <__cvt+0x7c>
 8008440:	f8cd 900c 	str.w	r9, [sp, #12]
 8008444:	2230      	movs	r2, #48	@ 0x30
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	454b      	cmp	r3, r9
 800844a:	d31e      	bcc.n	800848a <__cvt+0xc2>
 800844c:	9b03      	ldr	r3, [sp, #12]
 800844e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008450:	1b5b      	subs	r3, r3, r5
 8008452:	4628      	mov	r0, r5
 8008454:	6013      	str	r3, [r2, #0]
 8008456:	b004      	add	sp, #16
 8008458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800845c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008460:	eb00 0904 	add.w	r9, r0, r4
 8008464:	d1e5      	bne.n	8008432 <__cvt+0x6a>
 8008466:	7803      	ldrb	r3, [r0, #0]
 8008468:	2b30      	cmp	r3, #48	@ 0x30
 800846a:	d10a      	bne.n	8008482 <__cvt+0xba>
 800846c:	2200      	movs	r2, #0
 800846e:	2300      	movs	r3, #0
 8008470:	4630      	mov	r0, r6
 8008472:	4639      	mov	r1, r7
 8008474:	f7f8 fb48 	bl	8000b08 <__aeabi_dcmpeq>
 8008478:	b918      	cbnz	r0, 8008482 <__cvt+0xba>
 800847a:	f1c4 0401 	rsb	r4, r4, #1
 800847e:	f8ca 4000 	str.w	r4, [sl]
 8008482:	f8da 3000 	ldr.w	r3, [sl]
 8008486:	4499      	add	r9, r3
 8008488:	e7d3      	b.n	8008432 <__cvt+0x6a>
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	9103      	str	r1, [sp, #12]
 800848e:	701a      	strb	r2, [r3, #0]
 8008490:	e7d9      	b.n	8008446 <__cvt+0x7e>

08008492 <__exponent>:
 8008492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008494:	2900      	cmp	r1, #0
 8008496:	bfba      	itte	lt
 8008498:	4249      	neglt	r1, r1
 800849a:	232d      	movlt	r3, #45	@ 0x2d
 800849c:	232b      	movge	r3, #43	@ 0x2b
 800849e:	2909      	cmp	r1, #9
 80084a0:	7002      	strb	r2, [r0, #0]
 80084a2:	7043      	strb	r3, [r0, #1]
 80084a4:	dd29      	ble.n	80084fa <__exponent+0x68>
 80084a6:	f10d 0307 	add.w	r3, sp, #7
 80084aa:	461d      	mov	r5, r3
 80084ac:	270a      	movs	r7, #10
 80084ae:	461a      	mov	r2, r3
 80084b0:	fbb1 f6f7 	udiv	r6, r1, r7
 80084b4:	fb07 1416 	mls	r4, r7, r6, r1
 80084b8:	3430      	adds	r4, #48	@ 0x30
 80084ba:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084be:	460c      	mov	r4, r1
 80084c0:	2c63      	cmp	r4, #99	@ 0x63
 80084c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80084c6:	4631      	mov	r1, r6
 80084c8:	dcf1      	bgt.n	80084ae <__exponent+0x1c>
 80084ca:	3130      	adds	r1, #48	@ 0x30
 80084cc:	1e94      	subs	r4, r2, #2
 80084ce:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084d2:	1c41      	adds	r1, r0, #1
 80084d4:	4623      	mov	r3, r4
 80084d6:	42ab      	cmp	r3, r5
 80084d8:	d30a      	bcc.n	80084f0 <__exponent+0x5e>
 80084da:	f10d 0309 	add.w	r3, sp, #9
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	42ac      	cmp	r4, r5
 80084e2:	bf88      	it	hi
 80084e4:	2300      	movhi	r3, #0
 80084e6:	3302      	adds	r3, #2
 80084e8:	4403      	add	r3, r0
 80084ea:	1a18      	subs	r0, r3, r0
 80084ec:	b003      	add	sp, #12
 80084ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80084f4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80084f8:	e7ed      	b.n	80084d6 <__exponent+0x44>
 80084fa:	2330      	movs	r3, #48	@ 0x30
 80084fc:	3130      	adds	r1, #48	@ 0x30
 80084fe:	7083      	strb	r3, [r0, #2]
 8008500:	70c1      	strb	r1, [r0, #3]
 8008502:	1d03      	adds	r3, r0, #4
 8008504:	e7f1      	b.n	80084ea <__exponent+0x58>
	...

08008508 <_printf_float>:
 8008508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800850c:	b08d      	sub	sp, #52	@ 0x34
 800850e:	460c      	mov	r4, r1
 8008510:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008514:	4616      	mov	r6, r2
 8008516:	461f      	mov	r7, r3
 8008518:	4605      	mov	r5, r0
 800851a:	f000 fd03 	bl	8008f24 <_localeconv_r>
 800851e:	6803      	ldr	r3, [r0, #0]
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	4618      	mov	r0, r3
 8008524:	f7f7 fec4 	bl	80002b0 <strlen>
 8008528:	2300      	movs	r3, #0
 800852a:	930a      	str	r3, [sp, #40]	@ 0x28
 800852c:	f8d8 3000 	ldr.w	r3, [r8]
 8008530:	9005      	str	r0, [sp, #20]
 8008532:	3307      	adds	r3, #7
 8008534:	f023 0307 	bic.w	r3, r3, #7
 8008538:	f103 0208 	add.w	r2, r3, #8
 800853c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008540:	f8d4 b000 	ldr.w	fp, [r4]
 8008544:	f8c8 2000 	str.w	r2, [r8]
 8008548:	e9d3 8900 	ldrd	r8, r9, [r3]
 800854c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008550:	9307      	str	r3, [sp, #28]
 8008552:	f8cd 8018 	str.w	r8, [sp, #24]
 8008556:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800855a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800855e:	4b9c      	ldr	r3, [pc, #624]	@ (80087d0 <_printf_float+0x2c8>)
 8008560:	f04f 32ff 	mov.w	r2, #4294967295
 8008564:	f7f8 fb02 	bl	8000b6c <__aeabi_dcmpun>
 8008568:	bb70      	cbnz	r0, 80085c8 <_printf_float+0xc0>
 800856a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800856e:	4b98      	ldr	r3, [pc, #608]	@ (80087d0 <_printf_float+0x2c8>)
 8008570:	f04f 32ff 	mov.w	r2, #4294967295
 8008574:	f7f8 fadc 	bl	8000b30 <__aeabi_dcmple>
 8008578:	bb30      	cbnz	r0, 80085c8 <_printf_float+0xc0>
 800857a:	2200      	movs	r2, #0
 800857c:	2300      	movs	r3, #0
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f8 facb 	bl	8000b1c <__aeabi_dcmplt>
 8008586:	b110      	cbz	r0, 800858e <_printf_float+0x86>
 8008588:	232d      	movs	r3, #45	@ 0x2d
 800858a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800858e:	4a91      	ldr	r2, [pc, #580]	@ (80087d4 <_printf_float+0x2cc>)
 8008590:	4b91      	ldr	r3, [pc, #580]	@ (80087d8 <_printf_float+0x2d0>)
 8008592:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008596:	bf94      	ite	ls
 8008598:	4690      	movls	r8, r2
 800859a:	4698      	movhi	r8, r3
 800859c:	2303      	movs	r3, #3
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	f02b 0304 	bic.w	r3, fp, #4
 80085a4:	6023      	str	r3, [r4, #0]
 80085a6:	f04f 0900 	mov.w	r9, #0
 80085aa:	9700      	str	r7, [sp, #0]
 80085ac:	4633      	mov	r3, r6
 80085ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085b0:	4621      	mov	r1, r4
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 f9d2 	bl	800895c <_printf_common>
 80085b8:	3001      	adds	r0, #1
 80085ba:	f040 808d 	bne.w	80086d8 <_printf_float+0x1d0>
 80085be:	f04f 30ff 	mov.w	r0, #4294967295
 80085c2:	b00d      	add	sp, #52	@ 0x34
 80085c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c8:	4642      	mov	r2, r8
 80085ca:	464b      	mov	r3, r9
 80085cc:	4640      	mov	r0, r8
 80085ce:	4649      	mov	r1, r9
 80085d0:	f7f8 facc 	bl	8000b6c <__aeabi_dcmpun>
 80085d4:	b140      	cbz	r0, 80085e8 <_printf_float+0xe0>
 80085d6:	464b      	mov	r3, r9
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bfbc      	itt	lt
 80085dc:	232d      	movlt	r3, #45	@ 0x2d
 80085de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80085e2:	4a7e      	ldr	r2, [pc, #504]	@ (80087dc <_printf_float+0x2d4>)
 80085e4:	4b7e      	ldr	r3, [pc, #504]	@ (80087e0 <_printf_float+0x2d8>)
 80085e6:	e7d4      	b.n	8008592 <_printf_float+0x8a>
 80085e8:	6863      	ldr	r3, [r4, #4]
 80085ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80085ee:	9206      	str	r2, [sp, #24]
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	d13b      	bne.n	800866c <_printf_float+0x164>
 80085f4:	2306      	movs	r3, #6
 80085f6:	6063      	str	r3, [r4, #4]
 80085f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80085fc:	2300      	movs	r3, #0
 80085fe:	6022      	str	r2, [r4, #0]
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	ab0a      	add	r3, sp, #40	@ 0x28
 8008604:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008608:	ab09      	add	r3, sp, #36	@ 0x24
 800860a:	9300      	str	r3, [sp, #0]
 800860c:	6861      	ldr	r1, [r4, #4]
 800860e:	ec49 8b10 	vmov	d0, r8, r9
 8008612:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008616:	4628      	mov	r0, r5
 8008618:	f7ff fed6 	bl	80083c8 <__cvt>
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008620:	2b47      	cmp	r3, #71	@ 0x47
 8008622:	4680      	mov	r8, r0
 8008624:	d129      	bne.n	800867a <_printf_float+0x172>
 8008626:	1cc8      	adds	r0, r1, #3
 8008628:	db02      	blt.n	8008630 <_printf_float+0x128>
 800862a:	6863      	ldr	r3, [r4, #4]
 800862c:	4299      	cmp	r1, r3
 800862e:	dd41      	ble.n	80086b4 <_printf_float+0x1ac>
 8008630:	f1aa 0a02 	sub.w	sl, sl, #2
 8008634:	fa5f fa8a 	uxtb.w	sl, sl
 8008638:	3901      	subs	r1, #1
 800863a:	4652      	mov	r2, sl
 800863c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008640:	9109      	str	r1, [sp, #36]	@ 0x24
 8008642:	f7ff ff26 	bl	8008492 <__exponent>
 8008646:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008648:	1813      	adds	r3, r2, r0
 800864a:	2a01      	cmp	r2, #1
 800864c:	4681      	mov	r9, r0
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	dc02      	bgt.n	8008658 <_printf_float+0x150>
 8008652:	6822      	ldr	r2, [r4, #0]
 8008654:	07d2      	lsls	r2, r2, #31
 8008656:	d501      	bpl.n	800865c <_printf_float+0x154>
 8008658:	3301      	adds	r3, #1
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008660:	2b00      	cmp	r3, #0
 8008662:	d0a2      	beq.n	80085aa <_printf_float+0xa2>
 8008664:	232d      	movs	r3, #45	@ 0x2d
 8008666:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800866a:	e79e      	b.n	80085aa <_printf_float+0xa2>
 800866c:	9a06      	ldr	r2, [sp, #24]
 800866e:	2a47      	cmp	r2, #71	@ 0x47
 8008670:	d1c2      	bne.n	80085f8 <_printf_float+0xf0>
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1c0      	bne.n	80085f8 <_printf_float+0xf0>
 8008676:	2301      	movs	r3, #1
 8008678:	e7bd      	b.n	80085f6 <_printf_float+0xee>
 800867a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800867e:	d9db      	bls.n	8008638 <_printf_float+0x130>
 8008680:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008684:	d118      	bne.n	80086b8 <_printf_float+0x1b0>
 8008686:	2900      	cmp	r1, #0
 8008688:	6863      	ldr	r3, [r4, #4]
 800868a:	dd0b      	ble.n	80086a4 <_printf_float+0x19c>
 800868c:	6121      	str	r1, [r4, #16]
 800868e:	b913      	cbnz	r3, 8008696 <_printf_float+0x18e>
 8008690:	6822      	ldr	r2, [r4, #0]
 8008692:	07d0      	lsls	r0, r2, #31
 8008694:	d502      	bpl.n	800869c <_printf_float+0x194>
 8008696:	3301      	adds	r3, #1
 8008698:	440b      	add	r3, r1
 800869a:	6123      	str	r3, [r4, #16]
 800869c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800869e:	f04f 0900 	mov.w	r9, #0
 80086a2:	e7db      	b.n	800865c <_printf_float+0x154>
 80086a4:	b913      	cbnz	r3, 80086ac <_printf_float+0x1a4>
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	07d2      	lsls	r2, r2, #31
 80086aa:	d501      	bpl.n	80086b0 <_printf_float+0x1a8>
 80086ac:	3302      	adds	r3, #2
 80086ae:	e7f4      	b.n	800869a <_printf_float+0x192>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e7f2      	b.n	800869a <_printf_float+0x192>
 80086b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ba:	4299      	cmp	r1, r3
 80086bc:	db05      	blt.n	80086ca <_printf_float+0x1c2>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	6121      	str	r1, [r4, #16]
 80086c2:	07d8      	lsls	r0, r3, #31
 80086c4:	d5ea      	bpl.n	800869c <_printf_float+0x194>
 80086c6:	1c4b      	adds	r3, r1, #1
 80086c8:	e7e7      	b.n	800869a <_printf_float+0x192>
 80086ca:	2900      	cmp	r1, #0
 80086cc:	bfd4      	ite	le
 80086ce:	f1c1 0202 	rsble	r2, r1, #2
 80086d2:	2201      	movgt	r2, #1
 80086d4:	4413      	add	r3, r2
 80086d6:	e7e0      	b.n	800869a <_printf_float+0x192>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	055a      	lsls	r2, r3, #21
 80086dc:	d407      	bmi.n	80086ee <_printf_float+0x1e6>
 80086de:	6923      	ldr	r3, [r4, #16]
 80086e0:	4642      	mov	r2, r8
 80086e2:	4631      	mov	r1, r6
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b8      	blx	r7
 80086e8:	3001      	adds	r0, #1
 80086ea:	d12b      	bne.n	8008744 <_printf_float+0x23c>
 80086ec:	e767      	b.n	80085be <_printf_float+0xb6>
 80086ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086f2:	f240 80dd 	bls.w	80088b0 <_printf_float+0x3a8>
 80086f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086fa:	2200      	movs	r2, #0
 80086fc:	2300      	movs	r3, #0
 80086fe:	f7f8 fa03 	bl	8000b08 <__aeabi_dcmpeq>
 8008702:	2800      	cmp	r0, #0
 8008704:	d033      	beq.n	800876e <_printf_float+0x266>
 8008706:	4a37      	ldr	r2, [pc, #220]	@ (80087e4 <_printf_float+0x2dc>)
 8008708:	2301      	movs	r3, #1
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	f43f af54 	beq.w	80085be <_printf_float+0xb6>
 8008716:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800871a:	4543      	cmp	r3, r8
 800871c:	db02      	blt.n	8008724 <_printf_float+0x21c>
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	07d8      	lsls	r0, r3, #31
 8008722:	d50f      	bpl.n	8008744 <_printf_float+0x23c>
 8008724:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008728:	4631      	mov	r1, r6
 800872a:	4628      	mov	r0, r5
 800872c:	47b8      	blx	r7
 800872e:	3001      	adds	r0, #1
 8008730:	f43f af45 	beq.w	80085be <_printf_float+0xb6>
 8008734:	f04f 0900 	mov.w	r9, #0
 8008738:	f108 38ff 	add.w	r8, r8, #4294967295
 800873c:	f104 0a1a 	add.w	sl, r4, #26
 8008740:	45c8      	cmp	r8, r9
 8008742:	dc09      	bgt.n	8008758 <_printf_float+0x250>
 8008744:	6823      	ldr	r3, [r4, #0]
 8008746:	079b      	lsls	r3, r3, #30
 8008748:	f100 8103 	bmi.w	8008952 <_printf_float+0x44a>
 800874c:	68e0      	ldr	r0, [r4, #12]
 800874e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008750:	4298      	cmp	r0, r3
 8008752:	bfb8      	it	lt
 8008754:	4618      	movlt	r0, r3
 8008756:	e734      	b.n	80085c2 <_printf_float+0xba>
 8008758:	2301      	movs	r3, #1
 800875a:	4652      	mov	r2, sl
 800875c:	4631      	mov	r1, r6
 800875e:	4628      	mov	r0, r5
 8008760:	47b8      	blx	r7
 8008762:	3001      	adds	r0, #1
 8008764:	f43f af2b 	beq.w	80085be <_printf_float+0xb6>
 8008768:	f109 0901 	add.w	r9, r9, #1
 800876c:	e7e8      	b.n	8008740 <_printf_float+0x238>
 800876e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008770:	2b00      	cmp	r3, #0
 8008772:	dc39      	bgt.n	80087e8 <_printf_float+0x2e0>
 8008774:	4a1b      	ldr	r2, [pc, #108]	@ (80087e4 <_printf_float+0x2dc>)
 8008776:	2301      	movs	r3, #1
 8008778:	4631      	mov	r1, r6
 800877a:	4628      	mov	r0, r5
 800877c:	47b8      	blx	r7
 800877e:	3001      	adds	r0, #1
 8008780:	f43f af1d 	beq.w	80085be <_printf_float+0xb6>
 8008784:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008788:	ea59 0303 	orrs.w	r3, r9, r3
 800878c:	d102      	bne.n	8008794 <_printf_float+0x28c>
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	07d9      	lsls	r1, r3, #31
 8008792:	d5d7      	bpl.n	8008744 <_printf_float+0x23c>
 8008794:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f af0d 	beq.w	80085be <_printf_float+0xb6>
 80087a4:	f04f 0a00 	mov.w	sl, #0
 80087a8:	f104 0b1a 	add.w	fp, r4, #26
 80087ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ae:	425b      	negs	r3, r3
 80087b0:	4553      	cmp	r3, sl
 80087b2:	dc01      	bgt.n	80087b8 <_printf_float+0x2b0>
 80087b4:	464b      	mov	r3, r9
 80087b6:	e793      	b.n	80086e0 <_printf_float+0x1d8>
 80087b8:	2301      	movs	r3, #1
 80087ba:	465a      	mov	r2, fp
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	47b8      	blx	r7
 80087c2:	3001      	adds	r0, #1
 80087c4:	f43f aefb 	beq.w	80085be <_printf_float+0xb6>
 80087c8:	f10a 0a01 	add.w	sl, sl, #1
 80087cc:	e7ee      	b.n	80087ac <_printf_float+0x2a4>
 80087ce:	bf00      	nop
 80087d0:	7fefffff 	.word	0x7fefffff
 80087d4:	0800c1e3 	.word	0x0800c1e3
 80087d8:	0800c1e7 	.word	0x0800c1e7
 80087dc:	0800c1eb 	.word	0x0800c1eb
 80087e0:	0800c1ef 	.word	0x0800c1ef
 80087e4:	0800c1f3 	.word	0x0800c1f3
 80087e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80087ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087ee:	4553      	cmp	r3, sl
 80087f0:	bfa8      	it	ge
 80087f2:	4653      	movge	r3, sl
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	4699      	mov	r9, r3
 80087f8:	dc36      	bgt.n	8008868 <_printf_float+0x360>
 80087fa:	f04f 0b00 	mov.w	fp, #0
 80087fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008802:	f104 021a 	add.w	r2, r4, #26
 8008806:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008808:	9306      	str	r3, [sp, #24]
 800880a:	eba3 0309 	sub.w	r3, r3, r9
 800880e:	455b      	cmp	r3, fp
 8008810:	dc31      	bgt.n	8008876 <_printf_float+0x36e>
 8008812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008814:	459a      	cmp	sl, r3
 8008816:	dc3a      	bgt.n	800888e <_printf_float+0x386>
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	07da      	lsls	r2, r3, #31
 800881c:	d437      	bmi.n	800888e <_printf_float+0x386>
 800881e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008820:	ebaa 0903 	sub.w	r9, sl, r3
 8008824:	9b06      	ldr	r3, [sp, #24]
 8008826:	ebaa 0303 	sub.w	r3, sl, r3
 800882a:	4599      	cmp	r9, r3
 800882c:	bfa8      	it	ge
 800882e:	4699      	movge	r9, r3
 8008830:	f1b9 0f00 	cmp.w	r9, #0
 8008834:	dc33      	bgt.n	800889e <_printf_float+0x396>
 8008836:	f04f 0800 	mov.w	r8, #0
 800883a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800883e:	f104 0b1a 	add.w	fp, r4, #26
 8008842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008844:	ebaa 0303 	sub.w	r3, sl, r3
 8008848:	eba3 0309 	sub.w	r3, r3, r9
 800884c:	4543      	cmp	r3, r8
 800884e:	f77f af79 	ble.w	8008744 <_printf_float+0x23c>
 8008852:	2301      	movs	r3, #1
 8008854:	465a      	mov	r2, fp
 8008856:	4631      	mov	r1, r6
 8008858:	4628      	mov	r0, r5
 800885a:	47b8      	blx	r7
 800885c:	3001      	adds	r0, #1
 800885e:	f43f aeae 	beq.w	80085be <_printf_float+0xb6>
 8008862:	f108 0801 	add.w	r8, r8, #1
 8008866:	e7ec      	b.n	8008842 <_printf_float+0x33a>
 8008868:	4642      	mov	r2, r8
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	47b8      	blx	r7
 8008870:	3001      	adds	r0, #1
 8008872:	d1c2      	bne.n	80087fa <_printf_float+0x2f2>
 8008874:	e6a3      	b.n	80085be <_printf_float+0xb6>
 8008876:	2301      	movs	r3, #1
 8008878:	4631      	mov	r1, r6
 800887a:	4628      	mov	r0, r5
 800887c:	9206      	str	r2, [sp, #24]
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae9c 	beq.w	80085be <_printf_float+0xb6>
 8008886:	9a06      	ldr	r2, [sp, #24]
 8008888:	f10b 0b01 	add.w	fp, fp, #1
 800888c:	e7bb      	b.n	8008806 <_printf_float+0x2fe>
 800888e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	d1c0      	bne.n	800881e <_printf_float+0x316>
 800889c:	e68f      	b.n	80085be <_printf_float+0xb6>
 800889e:	9a06      	ldr	r2, [sp, #24]
 80088a0:	464b      	mov	r3, r9
 80088a2:	4442      	add	r2, r8
 80088a4:	4631      	mov	r1, r6
 80088a6:	4628      	mov	r0, r5
 80088a8:	47b8      	blx	r7
 80088aa:	3001      	adds	r0, #1
 80088ac:	d1c3      	bne.n	8008836 <_printf_float+0x32e>
 80088ae:	e686      	b.n	80085be <_printf_float+0xb6>
 80088b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088b4:	f1ba 0f01 	cmp.w	sl, #1
 80088b8:	dc01      	bgt.n	80088be <_printf_float+0x3b6>
 80088ba:	07db      	lsls	r3, r3, #31
 80088bc:	d536      	bpl.n	800892c <_printf_float+0x424>
 80088be:	2301      	movs	r3, #1
 80088c0:	4642      	mov	r2, r8
 80088c2:	4631      	mov	r1, r6
 80088c4:	4628      	mov	r0, r5
 80088c6:	47b8      	blx	r7
 80088c8:	3001      	adds	r0, #1
 80088ca:	f43f ae78 	beq.w	80085be <_printf_float+0xb6>
 80088ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088d2:	4631      	mov	r1, r6
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	f43f ae70 	beq.w	80085be <_printf_float+0xb6>
 80088de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088ea:	f7f8 f90d 	bl	8000b08 <__aeabi_dcmpeq>
 80088ee:	b9c0      	cbnz	r0, 8008922 <_printf_float+0x41a>
 80088f0:	4653      	mov	r3, sl
 80088f2:	f108 0201 	add.w	r2, r8, #1
 80088f6:	4631      	mov	r1, r6
 80088f8:	4628      	mov	r0, r5
 80088fa:	47b8      	blx	r7
 80088fc:	3001      	adds	r0, #1
 80088fe:	d10c      	bne.n	800891a <_printf_float+0x412>
 8008900:	e65d      	b.n	80085be <_printf_float+0xb6>
 8008902:	2301      	movs	r3, #1
 8008904:	465a      	mov	r2, fp
 8008906:	4631      	mov	r1, r6
 8008908:	4628      	mov	r0, r5
 800890a:	47b8      	blx	r7
 800890c:	3001      	adds	r0, #1
 800890e:	f43f ae56 	beq.w	80085be <_printf_float+0xb6>
 8008912:	f108 0801 	add.w	r8, r8, #1
 8008916:	45d0      	cmp	r8, sl
 8008918:	dbf3      	blt.n	8008902 <_printf_float+0x3fa>
 800891a:	464b      	mov	r3, r9
 800891c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008920:	e6df      	b.n	80086e2 <_printf_float+0x1da>
 8008922:	f04f 0800 	mov.w	r8, #0
 8008926:	f104 0b1a 	add.w	fp, r4, #26
 800892a:	e7f4      	b.n	8008916 <_printf_float+0x40e>
 800892c:	2301      	movs	r3, #1
 800892e:	4642      	mov	r2, r8
 8008930:	e7e1      	b.n	80088f6 <_printf_float+0x3ee>
 8008932:	2301      	movs	r3, #1
 8008934:	464a      	mov	r2, r9
 8008936:	4631      	mov	r1, r6
 8008938:	4628      	mov	r0, r5
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	f43f ae3e 	beq.w	80085be <_printf_float+0xb6>
 8008942:	f108 0801 	add.w	r8, r8, #1
 8008946:	68e3      	ldr	r3, [r4, #12]
 8008948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800894a:	1a5b      	subs	r3, r3, r1
 800894c:	4543      	cmp	r3, r8
 800894e:	dcf0      	bgt.n	8008932 <_printf_float+0x42a>
 8008950:	e6fc      	b.n	800874c <_printf_float+0x244>
 8008952:	f04f 0800 	mov.w	r8, #0
 8008956:	f104 0919 	add.w	r9, r4, #25
 800895a:	e7f4      	b.n	8008946 <_printf_float+0x43e>

0800895c <_printf_common>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	4616      	mov	r6, r2
 8008962:	4698      	mov	r8, r3
 8008964:	688a      	ldr	r2, [r1, #8]
 8008966:	690b      	ldr	r3, [r1, #16]
 8008968:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800896c:	4293      	cmp	r3, r2
 800896e:	bfb8      	it	lt
 8008970:	4613      	movlt	r3, r2
 8008972:	6033      	str	r3, [r6, #0]
 8008974:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008978:	4607      	mov	r7, r0
 800897a:	460c      	mov	r4, r1
 800897c:	b10a      	cbz	r2, 8008982 <_printf_common+0x26>
 800897e:	3301      	adds	r3, #1
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	0699      	lsls	r1, r3, #26
 8008986:	bf42      	ittt	mi
 8008988:	6833      	ldrmi	r3, [r6, #0]
 800898a:	3302      	addmi	r3, #2
 800898c:	6033      	strmi	r3, [r6, #0]
 800898e:	6825      	ldr	r5, [r4, #0]
 8008990:	f015 0506 	ands.w	r5, r5, #6
 8008994:	d106      	bne.n	80089a4 <_printf_common+0x48>
 8008996:	f104 0a19 	add.w	sl, r4, #25
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	6832      	ldr	r2, [r6, #0]
 800899e:	1a9b      	subs	r3, r3, r2
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	dc26      	bgt.n	80089f2 <_printf_common+0x96>
 80089a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089a8:	6822      	ldr	r2, [r4, #0]
 80089aa:	3b00      	subs	r3, #0
 80089ac:	bf18      	it	ne
 80089ae:	2301      	movne	r3, #1
 80089b0:	0692      	lsls	r2, r2, #26
 80089b2:	d42b      	bmi.n	8008a0c <_printf_common+0xb0>
 80089b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089b8:	4641      	mov	r1, r8
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c8      	blx	r9
 80089be:	3001      	adds	r0, #1
 80089c0:	d01e      	beq.n	8008a00 <_printf_common+0xa4>
 80089c2:	6823      	ldr	r3, [r4, #0]
 80089c4:	6922      	ldr	r2, [r4, #16]
 80089c6:	f003 0306 	and.w	r3, r3, #6
 80089ca:	2b04      	cmp	r3, #4
 80089cc:	bf02      	ittt	eq
 80089ce:	68e5      	ldreq	r5, [r4, #12]
 80089d0:	6833      	ldreq	r3, [r6, #0]
 80089d2:	1aed      	subeq	r5, r5, r3
 80089d4:	68a3      	ldr	r3, [r4, #8]
 80089d6:	bf0c      	ite	eq
 80089d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80089dc:	2500      	movne	r5, #0
 80089de:	4293      	cmp	r3, r2
 80089e0:	bfc4      	itt	gt
 80089e2:	1a9b      	subgt	r3, r3, r2
 80089e4:	18ed      	addgt	r5, r5, r3
 80089e6:	2600      	movs	r6, #0
 80089e8:	341a      	adds	r4, #26
 80089ea:	42b5      	cmp	r5, r6
 80089ec:	d11a      	bne.n	8008a24 <_printf_common+0xc8>
 80089ee:	2000      	movs	r0, #0
 80089f0:	e008      	b.n	8008a04 <_printf_common+0xa8>
 80089f2:	2301      	movs	r3, #1
 80089f4:	4652      	mov	r2, sl
 80089f6:	4641      	mov	r1, r8
 80089f8:	4638      	mov	r0, r7
 80089fa:	47c8      	blx	r9
 80089fc:	3001      	adds	r0, #1
 80089fe:	d103      	bne.n	8008a08 <_printf_common+0xac>
 8008a00:	f04f 30ff 	mov.w	r0, #4294967295
 8008a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a08:	3501      	adds	r5, #1
 8008a0a:	e7c6      	b.n	800899a <_printf_common+0x3e>
 8008a0c:	18e1      	adds	r1, r4, r3
 8008a0e:	1c5a      	adds	r2, r3, #1
 8008a10:	2030      	movs	r0, #48	@ 0x30
 8008a12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a16:	4422      	add	r2, r4
 8008a18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a20:	3302      	adds	r3, #2
 8008a22:	e7c7      	b.n	80089b4 <_printf_common+0x58>
 8008a24:	2301      	movs	r3, #1
 8008a26:	4622      	mov	r2, r4
 8008a28:	4641      	mov	r1, r8
 8008a2a:	4638      	mov	r0, r7
 8008a2c:	47c8      	blx	r9
 8008a2e:	3001      	adds	r0, #1
 8008a30:	d0e6      	beq.n	8008a00 <_printf_common+0xa4>
 8008a32:	3601      	adds	r6, #1
 8008a34:	e7d9      	b.n	80089ea <_printf_common+0x8e>
	...

08008a38 <_printf_i>:
 8008a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a3c:	7e0f      	ldrb	r7, [r1, #24]
 8008a3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a40:	2f78      	cmp	r7, #120	@ 0x78
 8008a42:	4691      	mov	r9, r2
 8008a44:	4680      	mov	r8, r0
 8008a46:	460c      	mov	r4, r1
 8008a48:	469a      	mov	sl, r3
 8008a4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a4e:	d807      	bhi.n	8008a60 <_printf_i+0x28>
 8008a50:	2f62      	cmp	r7, #98	@ 0x62
 8008a52:	d80a      	bhi.n	8008a6a <_printf_i+0x32>
 8008a54:	2f00      	cmp	r7, #0
 8008a56:	f000 80d2 	beq.w	8008bfe <_printf_i+0x1c6>
 8008a5a:	2f58      	cmp	r7, #88	@ 0x58
 8008a5c:	f000 80b9 	beq.w	8008bd2 <_printf_i+0x19a>
 8008a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a68:	e03a      	b.n	8008ae0 <_printf_i+0xa8>
 8008a6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a6e:	2b15      	cmp	r3, #21
 8008a70:	d8f6      	bhi.n	8008a60 <_printf_i+0x28>
 8008a72:	a101      	add	r1, pc, #4	@ (adr r1, 8008a78 <_printf_i+0x40>)
 8008a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a78:	08008ad1 	.word	0x08008ad1
 8008a7c:	08008ae5 	.word	0x08008ae5
 8008a80:	08008a61 	.word	0x08008a61
 8008a84:	08008a61 	.word	0x08008a61
 8008a88:	08008a61 	.word	0x08008a61
 8008a8c:	08008a61 	.word	0x08008a61
 8008a90:	08008ae5 	.word	0x08008ae5
 8008a94:	08008a61 	.word	0x08008a61
 8008a98:	08008a61 	.word	0x08008a61
 8008a9c:	08008a61 	.word	0x08008a61
 8008aa0:	08008a61 	.word	0x08008a61
 8008aa4:	08008be5 	.word	0x08008be5
 8008aa8:	08008b0f 	.word	0x08008b0f
 8008aac:	08008b9f 	.word	0x08008b9f
 8008ab0:	08008a61 	.word	0x08008a61
 8008ab4:	08008a61 	.word	0x08008a61
 8008ab8:	08008c07 	.word	0x08008c07
 8008abc:	08008a61 	.word	0x08008a61
 8008ac0:	08008b0f 	.word	0x08008b0f
 8008ac4:	08008a61 	.word	0x08008a61
 8008ac8:	08008a61 	.word	0x08008a61
 8008acc:	08008ba7 	.word	0x08008ba7
 8008ad0:	6833      	ldr	r3, [r6, #0]
 8008ad2:	1d1a      	adds	r2, r3, #4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6032      	str	r2, [r6, #0]
 8008ad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008adc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	e09d      	b.n	8008c20 <_printf_i+0x1e8>
 8008ae4:	6833      	ldr	r3, [r6, #0]
 8008ae6:	6820      	ldr	r0, [r4, #0]
 8008ae8:	1d19      	adds	r1, r3, #4
 8008aea:	6031      	str	r1, [r6, #0]
 8008aec:	0606      	lsls	r6, r0, #24
 8008aee:	d501      	bpl.n	8008af4 <_printf_i+0xbc>
 8008af0:	681d      	ldr	r5, [r3, #0]
 8008af2:	e003      	b.n	8008afc <_printf_i+0xc4>
 8008af4:	0645      	lsls	r5, r0, #25
 8008af6:	d5fb      	bpl.n	8008af0 <_printf_i+0xb8>
 8008af8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008afc:	2d00      	cmp	r5, #0
 8008afe:	da03      	bge.n	8008b08 <_printf_i+0xd0>
 8008b00:	232d      	movs	r3, #45	@ 0x2d
 8008b02:	426d      	negs	r5, r5
 8008b04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b08:	4859      	ldr	r0, [pc, #356]	@ (8008c70 <_printf_i+0x238>)
 8008b0a:	230a      	movs	r3, #10
 8008b0c:	e011      	b.n	8008b32 <_printf_i+0xfa>
 8008b0e:	6821      	ldr	r1, [r4, #0]
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	0608      	lsls	r0, r1, #24
 8008b14:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b18:	d402      	bmi.n	8008b20 <_printf_i+0xe8>
 8008b1a:	0649      	lsls	r1, r1, #25
 8008b1c:	bf48      	it	mi
 8008b1e:	b2ad      	uxthmi	r5, r5
 8008b20:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b22:	4853      	ldr	r0, [pc, #332]	@ (8008c70 <_printf_i+0x238>)
 8008b24:	6033      	str	r3, [r6, #0]
 8008b26:	bf14      	ite	ne
 8008b28:	230a      	movne	r3, #10
 8008b2a:	2308      	moveq	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b32:	6866      	ldr	r6, [r4, #4]
 8008b34:	60a6      	str	r6, [r4, #8]
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	bfa2      	ittt	ge
 8008b3a:	6821      	ldrge	r1, [r4, #0]
 8008b3c:	f021 0104 	bicge.w	r1, r1, #4
 8008b40:	6021      	strge	r1, [r4, #0]
 8008b42:	b90d      	cbnz	r5, 8008b48 <_printf_i+0x110>
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	d04b      	beq.n	8008be0 <_printf_i+0x1a8>
 8008b48:	4616      	mov	r6, r2
 8008b4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b4e:	fb03 5711 	mls	r7, r3, r1, r5
 8008b52:	5dc7      	ldrb	r7, [r0, r7]
 8008b54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b58:	462f      	mov	r7, r5
 8008b5a:	42bb      	cmp	r3, r7
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	d9f4      	bls.n	8008b4a <_printf_i+0x112>
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d10b      	bne.n	8008b7c <_printf_i+0x144>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07df      	lsls	r7, r3, #31
 8008b68:	d508      	bpl.n	8008b7c <_printf_i+0x144>
 8008b6a:	6923      	ldr	r3, [r4, #16]
 8008b6c:	6861      	ldr	r1, [r4, #4]
 8008b6e:	4299      	cmp	r1, r3
 8008b70:	bfde      	ittt	le
 8008b72:	2330      	movle	r3, #48	@ 0x30
 8008b74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008b78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008b7c:	1b92      	subs	r2, r2, r6
 8008b7e:	6122      	str	r2, [r4, #16]
 8008b80:	f8cd a000 	str.w	sl, [sp]
 8008b84:	464b      	mov	r3, r9
 8008b86:	aa03      	add	r2, sp, #12
 8008b88:	4621      	mov	r1, r4
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	f7ff fee6 	bl	800895c <_printf_common>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d14a      	bne.n	8008c2a <_printf_i+0x1f2>
 8008b94:	f04f 30ff 	mov.w	r0, #4294967295
 8008b98:	b004      	add	sp, #16
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	f043 0320 	orr.w	r3, r3, #32
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	4833      	ldr	r0, [pc, #204]	@ (8008c74 <_printf_i+0x23c>)
 8008ba8:	2778      	movs	r7, #120	@ 0x78
 8008baa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6831      	ldr	r1, [r6, #0]
 8008bb2:	061f      	lsls	r7, r3, #24
 8008bb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008bb8:	d402      	bmi.n	8008bc0 <_printf_i+0x188>
 8008bba:	065f      	lsls	r7, r3, #25
 8008bbc:	bf48      	it	mi
 8008bbe:	b2ad      	uxthmi	r5, r5
 8008bc0:	6031      	str	r1, [r6, #0]
 8008bc2:	07d9      	lsls	r1, r3, #31
 8008bc4:	bf44      	itt	mi
 8008bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8008bca:	6023      	strmi	r3, [r4, #0]
 8008bcc:	b11d      	cbz	r5, 8008bd6 <_printf_i+0x19e>
 8008bce:	2310      	movs	r3, #16
 8008bd0:	e7ac      	b.n	8008b2c <_printf_i+0xf4>
 8008bd2:	4827      	ldr	r0, [pc, #156]	@ (8008c70 <_printf_i+0x238>)
 8008bd4:	e7e9      	b.n	8008baa <_printf_i+0x172>
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	f023 0320 	bic.w	r3, r3, #32
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	e7f6      	b.n	8008bce <_printf_i+0x196>
 8008be0:	4616      	mov	r6, r2
 8008be2:	e7bd      	b.n	8008b60 <_printf_i+0x128>
 8008be4:	6833      	ldr	r3, [r6, #0]
 8008be6:	6825      	ldr	r5, [r4, #0]
 8008be8:	6961      	ldr	r1, [r4, #20]
 8008bea:	1d18      	adds	r0, r3, #4
 8008bec:	6030      	str	r0, [r6, #0]
 8008bee:	062e      	lsls	r6, r5, #24
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	d501      	bpl.n	8008bf8 <_printf_i+0x1c0>
 8008bf4:	6019      	str	r1, [r3, #0]
 8008bf6:	e002      	b.n	8008bfe <_printf_i+0x1c6>
 8008bf8:	0668      	lsls	r0, r5, #25
 8008bfa:	d5fb      	bpl.n	8008bf4 <_printf_i+0x1bc>
 8008bfc:	8019      	strh	r1, [r3, #0]
 8008bfe:	2300      	movs	r3, #0
 8008c00:	6123      	str	r3, [r4, #16]
 8008c02:	4616      	mov	r6, r2
 8008c04:	e7bc      	b.n	8008b80 <_printf_i+0x148>
 8008c06:	6833      	ldr	r3, [r6, #0]
 8008c08:	1d1a      	adds	r2, r3, #4
 8008c0a:	6032      	str	r2, [r6, #0]
 8008c0c:	681e      	ldr	r6, [r3, #0]
 8008c0e:	6862      	ldr	r2, [r4, #4]
 8008c10:	2100      	movs	r1, #0
 8008c12:	4630      	mov	r0, r6
 8008c14:	f7f7 fafc 	bl	8000210 <memchr>
 8008c18:	b108      	cbz	r0, 8008c1e <_printf_i+0x1e6>
 8008c1a:	1b80      	subs	r0, r0, r6
 8008c1c:	6060      	str	r0, [r4, #4]
 8008c1e:	6863      	ldr	r3, [r4, #4]
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	2300      	movs	r3, #0
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c28:	e7aa      	b.n	8008b80 <_printf_i+0x148>
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	4632      	mov	r2, r6
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4640      	mov	r0, r8
 8008c32:	47d0      	blx	sl
 8008c34:	3001      	adds	r0, #1
 8008c36:	d0ad      	beq.n	8008b94 <_printf_i+0x15c>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	079b      	lsls	r3, r3, #30
 8008c3c:	d413      	bmi.n	8008c66 <_printf_i+0x22e>
 8008c3e:	68e0      	ldr	r0, [r4, #12]
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	4298      	cmp	r0, r3
 8008c44:	bfb8      	it	lt
 8008c46:	4618      	movlt	r0, r3
 8008c48:	e7a6      	b.n	8008b98 <_printf_i+0x160>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4632      	mov	r2, r6
 8008c4e:	4649      	mov	r1, r9
 8008c50:	4640      	mov	r0, r8
 8008c52:	47d0      	blx	sl
 8008c54:	3001      	adds	r0, #1
 8008c56:	d09d      	beq.n	8008b94 <_printf_i+0x15c>
 8008c58:	3501      	adds	r5, #1
 8008c5a:	68e3      	ldr	r3, [r4, #12]
 8008c5c:	9903      	ldr	r1, [sp, #12]
 8008c5e:	1a5b      	subs	r3, r3, r1
 8008c60:	42ab      	cmp	r3, r5
 8008c62:	dcf2      	bgt.n	8008c4a <_printf_i+0x212>
 8008c64:	e7eb      	b.n	8008c3e <_printf_i+0x206>
 8008c66:	2500      	movs	r5, #0
 8008c68:	f104 0619 	add.w	r6, r4, #25
 8008c6c:	e7f5      	b.n	8008c5a <_printf_i+0x222>
 8008c6e:	bf00      	nop
 8008c70:	0800c1f5 	.word	0x0800c1f5
 8008c74:	0800c206 	.word	0x0800c206

08008c78 <std>:
 8008c78:	2300      	movs	r3, #0
 8008c7a:	b510      	push	{r4, lr}
 8008c7c:	4604      	mov	r4, r0
 8008c7e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c86:	6083      	str	r3, [r0, #8]
 8008c88:	8181      	strh	r1, [r0, #12]
 8008c8a:	6643      	str	r3, [r0, #100]	@ 0x64
 8008c8c:	81c2      	strh	r2, [r0, #14]
 8008c8e:	6183      	str	r3, [r0, #24]
 8008c90:	4619      	mov	r1, r3
 8008c92:	2208      	movs	r2, #8
 8008c94:	305c      	adds	r0, #92	@ 0x5c
 8008c96:	f000 f914 	bl	8008ec2 <memset>
 8008c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd0 <std+0x58>)
 8008c9c:	6263      	str	r3, [r4, #36]	@ 0x24
 8008c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd4 <std+0x5c>)
 8008ca0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8008cd8 <std+0x60>)
 8008ca4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8008cdc <std+0x64>)
 8008ca8:	6323      	str	r3, [r4, #48]	@ 0x30
 8008caa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <std+0x68>)
 8008cac:	6224      	str	r4, [r4, #32]
 8008cae:	429c      	cmp	r4, r3
 8008cb0:	d006      	beq.n	8008cc0 <std+0x48>
 8008cb2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008cb6:	4294      	cmp	r4, r2
 8008cb8:	d002      	beq.n	8008cc0 <std+0x48>
 8008cba:	33d0      	adds	r3, #208	@ 0xd0
 8008cbc:	429c      	cmp	r4, r3
 8008cbe:	d105      	bne.n	8008ccc <std+0x54>
 8008cc0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cc8:	f000 b9a0 	b.w	800900c <__retarget_lock_init_recursive>
 8008ccc:	bd10      	pop	{r4, pc}
 8008cce:	bf00      	nop
 8008cd0:	08008e3d 	.word	0x08008e3d
 8008cd4:	08008e5f 	.word	0x08008e5f
 8008cd8:	08008e97 	.word	0x08008e97
 8008cdc:	08008ebb 	.word	0x08008ebb
 8008ce0:	20006680 	.word	0x20006680

08008ce4 <stdio_exit_handler>:
 8008ce4:	4a02      	ldr	r2, [pc, #8]	@ (8008cf0 <stdio_exit_handler+0xc>)
 8008ce6:	4903      	ldr	r1, [pc, #12]	@ (8008cf4 <stdio_exit_handler+0x10>)
 8008ce8:	4803      	ldr	r0, [pc, #12]	@ (8008cf8 <stdio_exit_handler+0x14>)
 8008cea:	f000 b869 	b.w	8008dc0 <_fwalk_sglue>
 8008cee:	bf00      	nop
 8008cf0:	20004e80 	.word	0x20004e80
 8008cf4:	0800a9a5 	.word	0x0800a9a5
 8008cf8:	20004e90 	.word	0x20004e90

08008cfc <cleanup_stdio>:
 8008cfc:	6841      	ldr	r1, [r0, #4]
 8008cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008d30 <cleanup_stdio+0x34>)
 8008d00:	4299      	cmp	r1, r3
 8008d02:	b510      	push	{r4, lr}
 8008d04:	4604      	mov	r4, r0
 8008d06:	d001      	beq.n	8008d0c <cleanup_stdio+0x10>
 8008d08:	f001 fe4c 	bl	800a9a4 <_fflush_r>
 8008d0c:	68a1      	ldr	r1, [r4, #8]
 8008d0e:	4b09      	ldr	r3, [pc, #36]	@ (8008d34 <cleanup_stdio+0x38>)
 8008d10:	4299      	cmp	r1, r3
 8008d12:	d002      	beq.n	8008d1a <cleanup_stdio+0x1e>
 8008d14:	4620      	mov	r0, r4
 8008d16:	f001 fe45 	bl	800a9a4 <_fflush_r>
 8008d1a:	68e1      	ldr	r1, [r4, #12]
 8008d1c:	4b06      	ldr	r3, [pc, #24]	@ (8008d38 <cleanup_stdio+0x3c>)
 8008d1e:	4299      	cmp	r1, r3
 8008d20:	d004      	beq.n	8008d2c <cleanup_stdio+0x30>
 8008d22:	4620      	mov	r0, r4
 8008d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d28:	f001 be3c 	b.w	800a9a4 <_fflush_r>
 8008d2c:	bd10      	pop	{r4, pc}
 8008d2e:	bf00      	nop
 8008d30:	20006680 	.word	0x20006680
 8008d34:	200066e8 	.word	0x200066e8
 8008d38:	20006750 	.word	0x20006750

08008d3c <global_stdio_init.part.0>:
 8008d3c:	b510      	push	{r4, lr}
 8008d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008d6c <global_stdio_init.part.0+0x30>)
 8008d40:	4c0b      	ldr	r4, [pc, #44]	@ (8008d70 <global_stdio_init.part.0+0x34>)
 8008d42:	4a0c      	ldr	r2, [pc, #48]	@ (8008d74 <global_stdio_init.part.0+0x38>)
 8008d44:	601a      	str	r2, [r3, #0]
 8008d46:	4620      	mov	r0, r4
 8008d48:	2200      	movs	r2, #0
 8008d4a:	2104      	movs	r1, #4
 8008d4c:	f7ff ff94 	bl	8008c78 <std>
 8008d50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008d54:	2201      	movs	r2, #1
 8008d56:	2109      	movs	r1, #9
 8008d58:	f7ff ff8e 	bl	8008c78 <std>
 8008d5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008d60:	2202      	movs	r2, #2
 8008d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d66:	2112      	movs	r1, #18
 8008d68:	f7ff bf86 	b.w	8008c78 <std>
 8008d6c:	200067b8 	.word	0x200067b8
 8008d70:	20006680 	.word	0x20006680
 8008d74:	08008ce5 	.word	0x08008ce5

08008d78 <__sfp_lock_acquire>:
 8008d78:	4801      	ldr	r0, [pc, #4]	@ (8008d80 <__sfp_lock_acquire+0x8>)
 8008d7a:	f000 b948 	b.w	800900e <__retarget_lock_acquire_recursive>
 8008d7e:	bf00      	nop
 8008d80:	200067c1 	.word	0x200067c1

08008d84 <__sfp_lock_release>:
 8008d84:	4801      	ldr	r0, [pc, #4]	@ (8008d8c <__sfp_lock_release+0x8>)
 8008d86:	f000 b943 	b.w	8009010 <__retarget_lock_release_recursive>
 8008d8a:	bf00      	nop
 8008d8c:	200067c1 	.word	0x200067c1

08008d90 <__sinit>:
 8008d90:	b510      	push	{r4, lr}
 8008d92:	4604      	mov	r4, r0
 8008d94:	f7ff fff0 	bl	8008d78 <__sfp_lock_acquire>
 8008d98:	6a23      	ldr	r3, [r4, #32]
 8008d9a:	b11b      	cbz	r3, 8008da4 <__sinit+0x14>
 8008d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008da0:	f7ff bff0 	b.w	8008d84 <__sfp_lock_release>
 8008da4:	4b04      	ldr	r3, [pc, #16]	@ (8008db8 <__sinit+0x28>)
 8008da6:	6223      	str	r3, [r4, #32]
 8008da8:	4b04      	ldr	r3, [pc, #16]	@ (8008dbc <__sinit+0x2c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d1f5      	bne.n	8008d9c <__sinit+0xc>
 8008db0:	f7ff ffc4 	bl	8008d3c <global_stdio_init.part.0>
 8008db4:	e7f2      	b.n	8008d9c <__sinit+0xc>
 8008db6:	bf00      	nop
 8008db8:	08008cfd 	.word	0x08008cfd
 8008dbc:	200067b8 	.word	0x200067b8

08008dc0 <_fwalk_sglue>:
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	4688      	mov	r8, r1
 8008dc8:	4614      	mov	r4, r2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dd0:	f1b9 0901 	subs.w	r9, r9, #1
 8008dd4:	d505      	bpl.n	8008de2 <_fwalk_sglue+0x22>
 8008dd6:	6824      	ldr	r4, [r4, #0]
 8008dd8:	2c00      	cmp	r4, #0
 8008dda:	d1f7      	bne.n	8008dcc <_fwalk_sglue+0xc>
 8008ddc:	4630      	mov	r0, r6
 8008dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de2:	89ab      	ldrh	r3, [r5, #12]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d907      	bls.n	8008df8 <_fwalk_sglue+0x38>
 8008de8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dec:	3301      	adds	r3, #1
 8008dee:	d003      	beq.n	8008df8 <_fwalk_sglue+0x38>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4638      	mov	r0, r7
 8008df4:	47c0      	blx	r8
 8008df6:	4306      	orrs	r6, r0
 8008df8:	3568      	adds	r5, #104	@ 0x68
 8008dfa:	e7e9      	b.n	8008dd0 <_fwalk_sglue+0x10>

08008dfc <siprintf>:
 8008dfc:	b40e      	push	{r1, r2, r3}
 8008dfe:	b500      	push	{lr}
 8008e00:	b09c      	sub	sp, #112	@ 0x70
 8008e02:	ab1d      	add	r3, sp, #116	@ 0x74
 8008e04:	9002      	str	r0, [sp, #8]
 8008e06:	9006      	str	r0, [sp, #24]
 8008e08:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008e0c:	4809      	ldr	r0, [pc, #36]	@ (8008e34 <siprintf+0x38>)
 8008e0e:	9107      	str	r1, [sp, #28]
 8008e10:	9104      	str	r1, [sp, #16]
 8008e12:	4909      	ldr	r1, [pc, #36]	@ (8008e38 <siprintf+0x3c>)
 8008e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e18:	9105      	str	r1, [sp, #20]
 8008e1a:	6800      	ldr	r0, [r0, #0]
 8008e1c:	9301      	str	r3, [sp, #4]
 8008e1e:	a902      	add	r1, sp, #8
 8008e20:	f001 fc40 	bl	800a6a4 <_svfiprintf_r>
 8008e24:	9b02      	ldr	r3, [sp, #8]
 8008e26:	2200      	movs	r2, #0
 8008e28:	701a      	strb	r2, [r3, #0]
 8008e2a:	b01c      	add	sp, #112	@ 0x70
 8008e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e30:	b003      	add	sp, #12
 8008e32:	4770      	bx	lr
 8008e34:	20004e8c 	.word	0x20004e8c
 8008e38:	ffff0208 	.word	0xffff0208

08008e3c <__sread>:
 8008e3c:	b510      	push	{r4, lr}
 8008e3e:	460c      	mov	r4, r1
 8008e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e44:	f000 f894 	bl	8008f70 <_read_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	bfab      	itete	ge
 8008e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008e50:	181b      	addge	r3, r3, r0
 8008e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008e56:	bfac      	ite	ge
 8008e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008e5a:	81a3      	strhlt	r3, [r4, #12]
 8008e5c:	bd10      	pop	{r4, pc}

08008e5e <__swrite>:
 8008e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e62:	461f      	mov	r7, r3
 8008e64:	898b      	ldrh	r3, [r1, #12]
 8008e66:	05db      	lsls	r3, r3, #23
 8008e68:	4605      	mov	r5, r0
 8008e6a:	460c      	mov	r4, r1
 8008e6c:	4616      	mov	r6, r2
 8008e6e:	d505      	bpl.n	8008e7c <__swrite+0x1e>
 8008e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e74:	2302      	movs	r3, #2
 8008e76:	2200      	movs	r2, #0
 8008e78:	f000 f868 	bl	8008f4c <_lseek_r>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	4632      	mov	r2, r6
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e92:	f000 b87f 	b.w	8008f94 <_write_r>

08008e96 <__sseek>:
 8008e96:	b510      	push	{r4, lr}
 8008e98:	460c      	mov	r4, r1
 8008e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e9e:	f000 f855 	bl	8008f4c <_lseek_r>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	bf15      	itete	ne
 8008ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008eb2:	81a3      	strheq	r3, [r4, #12]
 8008eb4:	bf18      	it	ne
 8008eb6:	81a3      	strhne	r3, [r4, #12]
 8008eb8:	bd10      	pop	{r4, pc}

08008eba <__sclose>:
 8008eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ebe:	f000 b835 	b.w	8008f2c <_close_r>

08008ec2 <memset>:
 8008ec2:	4402      	add	r2, r0
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d100      	bne.n	8008ecc <memset+0xa>
 8008eca:	4770      	bx	lr
 8008ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8008ed0:	e7f9      	b.n	8008ec6 <memset+0x4>

08008ed2 <strncpy>:
 8008ed2:	b510      	push	{r4, lr}
 8008ed4:	3901      	subs	r1, #1
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	b132      	cbz	r2, 8008ee8 <strncpy+0x16>
 8008eda:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008ede:	f803 4b01 	strb.w	r4, [r3], #1
 8008ee2:	3a01      	subs	r2, #1
 8008ee4:	2c00      	cmp	r4, #0
 8008ee6:	d1f7      	bne.n	8008ed8 <strncpy+0x6>
 8008ee8:	441a      	add	r2, r3
 8008eea:	2100      	movs	r1, #0
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d100      	bne.n	8008ef2 <strncpy+0x20>
 8008ef0:	bd10      	pop	{r4, pc}
 8008ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef6:	e7f9      	b.n	8008eec <strncpy+0x1a>

08008ef8 <strstr>:
 8008ef8:	780a      	ldrb	r2, [r1, #0]
 8008efa:	b570      	push	{r4, r5, r6, lr}
 8008efc:	b96a      	cbnz	r2, 8008f1a <strstr+0x22>
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d109      	bne.n	8008f18 <strstr+0x20>
 8008f04:	460c      	mov	r4, r1
 8008f06:	4605      	mov	r5, r0
 8008f08:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d0f6      	beq.n	8008efe <strstr+0x6>
 8008f10:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008f14:	429e      	cmp	r6, r3
 8008f16:	d0f7      	beq.n	8008f08 <strstr+0x10>
 8008f18:	3001      	adds	r0, #1
 8008f1a:	7803      	ldrb	r3, [r0, #0]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1ef      	bne.n	8008f00 <strstr+0x8>
 8008f20:	4618      	mov	r0, r3
 8008f22:	e7ec      	b.n	8008efe <strstr+0x6>

08008f24 <_localeconv_r>:
 8008f24:	4800      	ldr	r0, [pc, #0]	@ (8008f28 <_localeconv_r+0x4>)
 8008f26:	4770      	bx	lr
 8008f28:	20004fcc 	.word	0x20004fcc

08008f2c <_close_r>:
 8008f2c:	b538      	push	{r3, r4, r5, lr}
 8008f2e:	4d06      	ldr	r5, [pc, #24]	@ (8008f48 <_close_r+0x1c>)
 8008f30:	2300      	movs	r3, #0
 8008f32:	4604      	mov	r4, r0
 8008f34:	4608      	mov	r0, r1
 8008f36:	602b      	str	r3, [r5, #0]
 8008f38:	f7fa fc7e 	bl	8003838 <_close>
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d102      	bne.n	8008f46 <_close_r+0x1a>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	b103      	cbz	r3, 8008f46 <_close_r+0x1a>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	200067bc 	.word	0x200067bc

08008f4c <_lseek_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d07      	ldr	r5, [pc, #28]	@ (8008f6c <_lseek_r+0x20>)
 8008f50:	4604      	mov	r4, r0
 8008f52:	4608      	mov	r0, r1
 8008f54:	4611      	mov	r1, r2
 8008f56:	2200      	movs	r2, #0
 8008f58:	602a      	str	r2, [r5, #0]
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	f7fa fc93 	bl	8003886 <_lseek>
 8008f60:	1c43      	adds	r3, r0, #1
 8008f62:	d102      	bne.n	8008f6a <_lseek_r+0x1e>
 8008f64:	682b      	ldr	r3, [r5, #0]
 8008f66:	b103      	cbz	r3, 8008f6a <_lseek_r+0x1e>
 8008f68:	6023      	str	r3, [r4, #0]
 8008f6a:	bd38      	pop	{r3, r4, r5, pc}
 8008f6c:	200067bc 	.word	0x200067bc

08008f70 <_read_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d07      	ldr	r5, [pc, #28]	@ (8008f90 <_read_r+0x20>)
 8008f74:	4604      	mov	r4, r0
 8008f76:	4608      	mov	r0, r1
 8008f78:	4611      	mov	r1, r2
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	602a      	str	r2, [r5, #0]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f7fa fc21 	bl	80037c6 <_read>
 8008f84:	1c43      	adds	r3, r0, #1
 8008f86:	d102      	bne.n	8008f8e <_read_r+0x1e>
 8008f88:	682b      	ldr	r3, [r5, #0]
 8008f8a:	b103      	cbz	r3, 8008f8e <_read_r+0x1e>
 8008f8c:	6023      	str	r3, [r4, #0]
 8008f8e:	bd38      	pop	{r3, r4, r5, pc}
 8008f90:	200067bc 	.word	0x200067bc

08008f94 <_write_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	@ (8008fb4 <_write_r+0x20>)
 8008f98:	4604      	mov	r4, r0
 8008f9a:	4608      	mov	r0, r1
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	602a      	str	r2, [r5, #0]
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	f7fa fc2c 	bl	8003800 <_write>
 8008fa8:	1c43      	adds	r3, r0, #1
 8008faa:	d102      	bne.n	8008fb2 <_write_r+0x1e>
 8008fac:	682b      	ldr	r3, [r5, #0]
 8008fae:	b103      	cbz	r3, 8008fb2 <_write_r+0x1e>
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	bd38      	pop	{r3, r4, r5, pc}
 8008fb4:	200067bc 	.word	0x200067bc

08008fb8 <__errno>:
 8008fb8:	4b01      	ldr	r3, [pc, #4]	@ (8008fc0 <__errno+0x8>)
 8008fba:	6818      	ldr	r0, [r3, #0]
 8008fbc:	4770      	bx	lr
 8008fbe:	bf00      	nop
 8008fc0:	20004e8c 	.word	0x20004e8c

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8008ffc <__libc_init_array+0x38>)
 8008fc8:	4c0d      	ldr	r4, [pc, #52]	@ (8009000 <__libc_init_array+0x3c>)
 8008fca:	1b64      	subs	r4, r4, r5
 8008fcc:	10a4      	asrs	r4, r4, #2
 8008fce:	2600      	movs	r6, #0
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	4d0b      	ldr	r5, [pc, #44]	@ (8009004 <__libc_init_array+0x40>)
 8008fd6:	4c0c      	ldr	r4, [pc, #48]	@ (8009008 <__libc_init_array+0x44>)
 8008fd8:	f002 ffc4 	bl	800bf64 <_init>
 8008fdc:	1b64      	subs	r4, r4, r5
 8008fde:	10a4      	asrs	r4, r4, #2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	0800c578 	.word	0x0800c578
 8009000:	0800c578 	.word	0x0800c578
 8009004:	0800c578 	.word	0x0800c578
 8009008:	0800c57c 	.word	0x0800c57c

0800900c <__retarget_lock_init_recursive>:
 800900c:	4770      	bx	lr

0800900e <__retarget_lock_acquire_recursive>:
 800900e:	4770      	bx	lr

08009010 <__retarget_lock_release_recursive>:
 8009010:	4770      	bx	lr
	...

08009014 <__assert_func>:
 8009014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009016:	4614      	mov	r4, r2
 8009018:	461a      	mov	r2, r3
 800901a:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <__assert_func+0x2c>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4605      	mov	r5, r0
 8009020:	68d8      	ldr	r0, [r3, #12]
 8009022:	b954      	cbnz	r4, 800903a <__assert_func+0x26>
 8009024:	4b07      	ldr	r3, [pc, #28]	@ (8009044 <__assert_func+0x30>)
 8009026:	461c      	mov	r4, r3
 8009028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800902c:	9100      	str	r1, [sp, #0]
 800902e:	462b      	mov	r3, r5
 8009030:	4905      	ldr	r1, [pc, #20]	@ (8009048 <__assert_func+0x34>)
 8009032:	f001 fcdf 	bl	800a9f4 <fiprintf>
 8009036:	f001 fd27 	bl	800aa88 <abort>
 800903a:	4b04      	ldr	r3, [pc, #16]	@ (800904c <__assert_func+0x38>)
 800903c:	e7f4      	b.n	8009028 <__assert_func+0x14>
 800903e:	bf00      	nop
 8009040:	20004e8c 	.word	0x20004e8c
 8009044:	0800c252 	.word	0x0800c252
 8009048:	0800c224 	.word	0x0800c224
 800904c:	0800c217 	.word	0x0800c217

08009050 <quorem>:
 8009050:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	6903      	ldr	r3, [r0, #16]
 8009056:	690c      	ldr	r4, [r1, #16]
 8009058:	42a3      	cmp	r3, r4
 800905a:	4607      	mov	r7, r0
 800905c:	db7e      	blt.n	800915c <quorem+0x10c>
 800905e:	3c01      	subs	r4, #1
 8009060:	f101 0814 	add.w	r8, r1, #20
 8009064:	00a3      	lsls	r3, r4, #2
 8009066:	f100 0514 	add.w	r5, r0, #20
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009076:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800907a:	3301      	adds	r3, #1
 800907c:	429a      	cmp	r2, r3
 800907e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009082:	fbb2 f6f3 	udiv	r6, r2, r3
 8009086:	d32e      	bcc.n	80090e6 <quorem+0x96>
 8009088:	f04f 0a00 	mov.w	sl, #0
 800908c:	46c4      	mov	ip, r8
 800908e:	46ae      	mov	lr, r5
 8009090:	46d3      	mov	fp, sl
 8009092:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009096:	b298      	uxth	r0, r3
 8009098:	fb06 a000 	mla	r0, r6, r0, sl
 800909c:	0c02      	lsrs	r2, r0, #16
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	fb06 2303 	mla	r3, r6, r3, r2
 80090a4:	f8de 2000 	ldr.w	r2, [lr]
 80090a8:	b280      	uxth	r0, r0
 80090aa:	b292      	uxth	r2, r2
 80090ac:	1a12      	subs	r2, r2, r0
 80090ae:	445a      	add	r2, fp
 80090b0:	f8de 0000 	ldr.w	r0, [lr]
 80090b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80090be:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80090c2:	b292      	uxth	r2, r2
 80090c4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80090c8:	45e1      	cmp	r9, ip
 80090ca:	f84e 2b04 	str.w	r2, [lr], #4
 80090ce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80090d2:	d2de      	bcs.n	8009092 <quorem+0x42>
 80090d4:	9b00      	ldr	r3, [sp, #0]
 80090d6:	58eb      	ldr	r3, [r5, r3]
 80090d8:	b92b      	cbnz	r3, 80090e6 <quorem+0x96>
 80090da:	9b01      	ldr	r3, [sp, #4]
 80090dc:	3b04      	subs	r3, #4
 80090de:	429d      	cmp	r5, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	d32f      	bcc.n	8009144 <quorem+0xf4>
 80090e4:	613c      	str	r4, [r7, #16]
 80090e6:	4638      	mov	r0, r7
 80090e8:	f001 f978 	bl	800a3dc <__mcmp>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	db25      	blt.n	800913c <quorem+0xec>
 80090f0:	4629      	mov	r1, r5
 80090f2:	2000      	movs	r0, #0
 80090f4:	f858 2b04 	ldr.w	r2, [r8], #4
 80090f8:	f8d1 c000 	ldr.w	ip, [r1]
 80090fc:	fa1f fe82 	uxth.w	lr, r2
 8009100:	fa1f f38c 	uxth.w	r3, ip
 8009104:	eba3 030e 	sub.w	r3, r3, lr
 8009108:	4403      	add	r3, r0
 800910a:	0c12      	lsrs	r2, r2, #16
 800910c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009110:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009114:	b29b      	uxth	r3, r3
 8009116:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800911a:	45c1      	cmp	r9, r8
 800911c:	f841 3b04 	str.w	r3, [r1], #4
 8009120:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009124:	d2e6      	bcs.n	80090f4 <quorem+0xa4>
 8009126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800912a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800912e:	b922      	cbnz	r2, 800913a <quorem+0xea>
 8009130:	3b04      	subs	r3, #4
 8009132:	429d      	cmp	r5, r3
 8009134:	461a      	mov	r2, r3
 8009136:	d30b      	bcc.n	8009150 <quorem+0x100>
 8009138:	613c      	str	r4, [r7, #16]
 800913a:	3601      	adds	r6, #1
 800913c:	4630      	mov	r0, r6
 800913e:	b003      	add	sp, #12
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	6812      	ldr	r2, [r2, #0]
 8009146:	3b04      	subs	r3, #4
 8009148:	2a00      	cmp	r2, #0
 800914a:	d1cb      	bne.n	80090e4 <quorem+0x94>
 800914c:	3c01      	subs	r4, #1
 800914e:	e7c6      	b.n	80090de <quorem+0x8e>
 8009150:	6812      	ldr	r2, [r2, #0]
 8009152:	3b04      	subs	r3, #4
 8009154:	2a00      	cmp	r2, #0
 8009156:	d1ef      	bne.n	8009138 <quorem+0xe8>
 8009158:	3c01      	subs	r4, #1
 800915a:	e7ea      	b.n	8009132 <quorem+0xe2>
 800915c:	2000      	movs	r0, #0
 800915e:	e7ee      	b.n	800913e <quorem+0xee>

08009160 <_dtoa_r>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	69c7      	ldr	r7, [r0, #28]
 8009166:	b099      	sub	sp, #100	@ 0x64
 8009168:	ed8d 0b02 	vstr	d0, [sp, #8]
 800916c:	ec55 4b10 	vmov	r4, r5, d0
 8009170:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009172:	9109      	str	r1, [sp, #36]	@ 0x24
 8009174:	4683      	mov	fp, r0
 8009176:	920e      	str	r2, [sp, #56]	@ 0x38
 8009178:	9313      	str	r3, [sp, #76]	@ 0x4c
 800917a:	b97f      	cbnz	r7, 800919c <_dtoa_r+0x3c>
 800917c:	2010      	movs	r0, #16
 800917e:	f000 fdfd 	bl	8009d7c <malloc>
 8009182:	4602      	mov	r2, r0
 8009184:	f8cb 001c 	str.w	r0, [fp, #28]
 8009188:	b920      	cbnz	r0, 8009194 <_dtoa_r+0x34>
 800918a:	4ba7      	ldr	r3, [pc, #668]	@ (8009428 <_dtoa_r+0x2c8>)
 800918c:	21ef      	movs	r1, #239	@ 0xef
 800918e:	48a7      	ldr	r0, [pc, #668]	@ (800942c <_dtoa_r+0x2cc>)
 8009190:	f7ff ff40 	bl	8009014 <__assert_func>
 8009194:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009198:	6007      	str	r7, [r0, #0]
 800919a:	60c7      	str	r7, [r0, #12]
 800919c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091a0:	6819      	ldr	r1, [r3, #0]
 80091a2:	b159      	cbz	r1, 80091bc <_dtoa_r+0x5c>
 80091a4:	685a      	ldr	r2, [r3, #4]
 80091a6:	604a      	str	r2, [r1, #4]
 80091a8:	2301      	movs	r3, #1
 80091aa:	4093      	lsls	r3, r2
 80091ac:	608b      	str	r3, [r1, #8]
 80091ae:	4658      	mov	r0, fp
 80091b0:	f000 feda 	bl	8009f68 <_Bfree>
 80091b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80091b8:	2200      	movs	r2, #0
 80091ba:	601a      	str	r2, [r3, #0]
 80091bc:	1e2b      	subs	r3, r5, #0
 80091be:	bfb9      	ittee	lt
 80091c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80091c4:	9303      	strlt	r3, [sp, #12]
 80091c6:	2300      	movge	r3, #0
 80091c8:	6033      	strge	r3, [r6, #0]
 80091ca:	9f03      	ldr	r7, [sp, #12]
 80091cc:	4b98      	ldr	r3, [pc, #608]	@ (8009430 <_dtoa_r+0x2d0>)
 80091ce:	bfbc      	itt	lt
 80091d0:	2201      	movlt	r2, #1
 80091d2:	6032      	strlt	r2, [r6, #0]
 80091d4:	43bb      	bics	r3, r7
 80091d6:	d112      	bne.n	80091fe <_dtoa_r+0x9e>
 80091d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80091da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80091de:	6013      	str	r3, [r2, #0]
 80091e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80091e4:	4323      	orrs	r3, r4
 80091e6:	f000 854d 	beq.w	8009c84 <_dtoa_r+0xb24>
 80091ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80091ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009444 <_dtoa_r+0x2e4>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	f000 854f 	beq.w	8009c94 <_dtoa_r+0xb34>
 80091f6:	f10a 0303 	add.w	r3, sl, #3
 80091fa:	f000 bd49 	b.w	8009c90 <_dtoa_r+0xb30>
 80091fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009202:	2200      	movs	r2, #0
 8009204:	ec51 0b17 	vmov	r0, r1, d7
 8009208:	2300      	movs	r3, #0
 800920a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800920e:	f7f7 fc7b 	bl	8000b08 <__aeabi_dcmpeq>
 8009212:	4680      	mov	r8, r0
 8009214:	b158      	cbz	r0, 800922e <_dtoa_r+0xce>
 8009216:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009218:	2301      	movs	r3, #1
 800921a:	6013      	str	r3, [r2, #0]
 800921c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800921e:	b113      	cbz	r3, 8009226 <_dtoa_r+0xc6>
 8009220:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009222:	4b84      	ldr	r3, [pc, #528]	@ (8009434 <_dtoa_r+0x2d4>)
 8009224:	6013      	str	r3, [r2, #0]
 8009226:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009448 <_dtoa_r+0x2e8>
 800922a:	f000 bd33 	b.w	8009c94 <_dtoa_r+0xb34>
 800922e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009232:	aa16      	add	r2, sp, #88	@ 0x58
 8009234:	a917      	add	r1, sp, #92	@ 0x5c
 8009236:	4658      	mov	r0, fp
 8009238:	f001 f980 	bl	800a53c <__d2b>
 800923c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009240:	4681      	mov	r9, r0
 8009242:	2e00      	cmp	r6, #0
 8009244:	d077      	beq.n	8009336 <_dtoa_r+0x1d6>
 8009246:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009248:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800924c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009254:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009258:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800925c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009260:	4619      	mov	r1, r3
 8009262:	2200      	movs	r2, #0
 8009264:	4b74      	ldr	r3, [pc, #464]	@ (8009438 <_dtoa_r+0x2d8>)
 8009266:	f7f7 f82f 	bl	80002c8 <__aeabi_dsub>
 800926a:	a369      	add	r3, pc, #420	@ (adr r3, 8009410 <_dtoa_r+0x2b0>)
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f7f7 f9e2 	bl	8000638 <__aeabi_dmul>
 8009274:	a368      	add	r3, pc, #416	@ (adr r3, 8009418 <_dtoa_r+0x2b8>)
 8009276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927a:	f7f7 f827 	bl	80002cc <__adddf3>
 800927e:	4604      	mov	r4, r0
 8009280:	4630      	mov	r0, r6
 8009282:	460d      	mov	r5, r1
 8009284:	f7f7 f96e 	bl	8000564 <__aeabi_i2d>
 8009288:	a365      	add	r3, pc, #404	@ (adr r3, 8009420 <_dtoa_r+0x2c0>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	f7f7 f9d3 	bl	8000638 <__aeabi_dmul>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 f817 	bl	80002cc <__adddf3>
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	f7f7 fc79 	bl	8000b98 <__aeabi_d2iz>
 80092a6:	2200      	movs	r2, #0
 80092a8:	4607      	mov	r7, r0
 80092aa:	2300      	movs	r3, #0
 80092ac:	4620      	mov	r0, r4
 80092ae:	4629      	mov	r1, r5
 80092b0:	f7f7 fc34 	bl	8000b1c <__aeabi_dcmplt>
 80092b4:	b140      	cbz	r0, 80092c8 <_dtoa_r+0x168>
 80092b6:	4638      	mov	r0, r7
 80092b8:	f7f7 f954 	bl	8000564 <__aeabi_i2d>
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	f7f7 fc22 	bl	8000b08 <__aeabi_dcmpeq>
 80092c4:	b900      	cbnz	r0, 80092c8 <_dtoa_r+0x168>
 80092c6:	3f01      	subs	r7, #1
 80092c8:	2f16      	cmp	r7, #22
 80092ca:	d851      	bhi.n	8009370 <_dtoa_r+0x210>
 80092cc:	4b5b      	ldr	r3, [pc, #364]	@ (800943c <_dtoa_r+0x2dc>)
 80092ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092da:	f7f7 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	d048      	beq.n	8009374 <_dtoa_r+0x214>
 80092e2:	3f01      	subs	r7, #1
 80092e4:	2300      	movs	r3, #0
 80092e6:	9312      	str	r3, [sp, #72]	@ 0x48
 80092e8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80092ea:	1b9b      	subs	r3, r3, r6
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	bf44      	itt	mi
 80092f0:	f1c3 0801 	rsbmi	r8, r3, #1
 80092f4:	2300      	movmi	r3, #0
 80092f6:	9208      	str	r2, [sp, #32]
 80092f8:	bf54      	ite	pl
 80092fa:	f04f 0800 	movpl.w	r8, #0
 80092fe:	9308      	strmi	r3, [sp, #32]
 8009300:	2f00      	cmp	r7, #0
 8009302:	db39      	blt.n	8009378 <_dtoa_r+0x218>
 8009304:	9b08      	ldr	r3, [sp, #32]
 8009306:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009308:	443b      	add	r3, r7
 800930a:	9308      	str	r3, [sp, #32]
 800930c:	2300      	movs	r3, #0
 800930e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009312:	2b09      	cmp	r3, #9
 8009314:	d864      	bhi.n	80093e0 <_dtoa_r+0x280>
 8009316:	2b05      	cmp	r3, #5
 8009318:	bfc4      	itt	gt
 800931a:	3b04      	subgt	r3, #4
 800931c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800931e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009320:	f1a3 0302 	sub.w	r3, r3, #2
 8009324:	bfcc      	ite	gt
 8009326:	2400      	movgt	r4, #0
 8009328:	2401      	movle	r4, #1
 800932a:	2b03      	cmp	r3, #3
 800932c:	d863      	bhi.n	80093f6 <_dtoa_r+0x296>
 800932e:	e8df f003 	tbb	[pc, r3]
 8009332:	372a      	.short	0x372a
 8009334:	5535      	.short	0x5535
 8009336:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800933a:	441e      	add	r6, r3
 800933c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009340:	2b20      	cmp	r3, #32
 8009342:	bfc1      	itttt	gt
 8009344:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009348:	409f      	lslgt	r7, r3
 800934a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800934e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009352:	bfd6      	itet	le
 8009354:	f1c3 0320 	rsble	r3, r3, #32
 8009358:	ea47 0003 	orrgt.w	r0, r7, r3
 800935c:	fa04 f003 	lslle.w	r0, r4, r3
 8009360:	f7f7 f8f0 	bl	8000544 <__aeabi_ui2d>
 8009364:	2201      	movs	r2, #1
 8009366:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800936a:	3e01      	subs	r6, #1
 800936c:	9214      	str	r2, [sp, #80]	@ 0x50
 800936e:	e777      	b.n	8009260 <_dtoa_r+0x100>
 8009370:	2301      	movs	r3, #1
 8009372:	e7b8      	b.n	80092e6 <_dtoa_r+0x186>
 8009374:	9012      	str	r0, [sp, #72]	@ 0x48
 8009376:	e7b7      	b.n	80092e8 <_dtoa_r+0x188>
 8009378:	427b      	negs	r3, r7
 800937a:	930a      	str	r3, [sp, #40]	@ 0x28
 800937c:	2300      	movs	r3, #0
 800937e:	eba8 0807 	sub.w	r8, r8, r7
 8009382:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009384:	e7c4      	b.n	8009310 <_dtoa_r+0x1b0>
 8009386:	2300      	movs	r3, #0
 8009388:	930b      	str	r3, [sp, #44]	@ 0x2c
 800938a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800938c:	2b00      	cmp	r3, #0
 800938e:	dc35      	bgt.n	80093fc <_dtoa_r+0x29c>
 8009390:	2301      	movs	r3, #1
 8009392:	9300      	str	r3, [sp, #0]
 8009394:	9307      	str	r3, [sp, #28]
 8009396:	461a      	mov	r2, r3
 8009398:	920e      	str	r2, [sp, #56]	@ 0x38
 800939a:	e00b      	b.n	80093b4 <_dtoa_r+0x254>
 800939c:	2301      	movs	r3, #1
 800939e:	e7f3      	b.n	8009388 <_dtoa_r+0x228>
 80093a0:	2300      	movs	r3, #0
 80093a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093a4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093a6:	18fb      	adds	r3, r7, r3
 80093a8:	9300      	str	r3, [sp, #0]
 80093aa:	3301      	adds	r3, #1
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	9307      	str	r3, [sp, #28]
 80093b0:	bfb8      	it	lt
 80093b2:	2301      	movlt	r3, #1
 80093b4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80093b8:	2100      	movs	r1, #0
 80093ba:	2204      	movs	r2, #4
 80093bc:	f102 0514 	add.w	r5, r2, #20
 80093c0:	429d      	cmp	r5, r3
 80093c2:	d91f      	bls.n	8009404 <_dtoa_r+0x2a4>
 80093c4:	6041      	str	r1, [r0, #4]
 80093c6:	4658      	mov	r0, fp
 80093c8:	f000 fd8e 	bl	8009ee8 <_Balloc>
 80093cc:	4682      	mov	sl, r0
 80093ce:	2800      	cmp	r0, #0
 80093d0:	d13c      	bne.n	800944c <_dtoa_r+0x2ec>
 80093d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009440 <_dtoa_r+0x2e0>)
 80093d4:	4602      	mov	r2, r0
 80093d6:	f240 11af 	movw	r1, #431	@ 0x1af
 80093da:	e6d8      	b.n	800918e <_dtoa_r+0x2e>
 80093dc:	2301      	movs	r3, #1
 80093de:	e7e0      	b.n	80093a2 <_dtoa_r+0x242>
 80093e0:	2401      	movs	r4, #1
 80093e2:	2300      	movs	r3, #0
 80093e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80093e8:	f04f 33ff 	mov.w	r3, #4294967295
 80093ec:	9300      	str	r3, [sp, #0]
 80093ee:	9307      	str	r3, [sp, #28]
 80093f0:	2200      	movs	r2, #0
 80093f2:	2312      	movs	r3, #18
 80093f4:	e7d0      	b.n	8009398 <_dtoa_r+0x238>
 80093f6:	2301      	movs	r3, #1
 80093f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093fa:	e7f5      	b.n	80093e8 <_dtoa_r+0x288>
 80093fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	9307      	str	r3, [sp, #28]
 8009402:	e7d7      	b.n	80093b4 <_dtoa_r+0x254>
 8009404:	3101      	adds	r1, #1
 8009406:	0052      	lsls	r2, r2, #1
 8009408:	e7d8      	b.n	80093bc <_dtoa_r+0x25c>
 800940a:	bf00      	nop
 800940c:	f3af 8000 	nop.w
 8009410:	636f4361 	.word	0x636f4361
 8009414:	3fd287a7 	.word	0x3fd287a7
 8009418:	8b60c8b3 	.word	0x8b60c8b3
 800941c:	3fc68a28 	.word	0x3fc68a28
 8009420:	509f79fb 	.word	0x509f79fb
 8009424:	3fd34413 	.word	0x3fd34413
 8009428:	0800c174 	.word	0x0800c174
 800942c:	0800c260 	.word	0x0800c260
 8009430:	7ff00000 	.word	0x7ff00000
 8009434:	0800c1f4 	.word	0x0800c1f4
 8009438:	3ff80000 	.word	0x3ff80000
 800943c:	0800c358 	.word	0x0800c358
 8009440:	0800c2b8 	.word	0x0800c2b8
 8009444:	0800c25c 	.word	0x0800c25c
 8009448:	0800c1f3 	.word	0x0800c1f3
 800944c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009450:	6018      	str	r0, [r3, #0]
 8009452:	9b07      	ldr	r3, [sp, #28]
 8009454:	2b0e      	cmp	r3, #14
 8009456:	f200 80a4 	bhi.w	80095a2 <_dtoa_r+0x442>
 800945a:	2c00      	cmp	r4, #0
 800945c:	f000 80a1 	beq.w	80095a2 <_dtoa_r+0x442>
 8009460:	2f00      	cmp	r7, #0
 8009462:	dd33      	ble.n	80094cc <_dtoa_r+0x36c>
 8009464:	4bad      	ldr	r3, [pc, #692]	@ (800971c <_dtoa_r+0x5bc>)
 8009466:	f007 020f 	and.w	r2, r7, #15
 800946a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800946e:	ed93 7b00 	vldr	d7, [r3]
 8009472:	05f8      	lsls	r0, r7, #23
 8009474:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009478:	ea4f 1427 	mov.w	r4, r7, asr #4
 800947c:	d516      	bpl.n	80094ac <_dtoa_r+0x34c>
 800947e:	4ba8      	ldr	r3, [pc, #672]	@ (8009720 <_dtoa_r+0x5c0>)
 8009480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009484:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009488:	f7f7 fa00 	bl	800088c <__aeabi_ddiv>
 800948c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009490:	f004 040f 	and.w	r4, r4, #15
 8009494:	2603      	movs	r6, #3
 8009496:	4da2      	ldr	r5, [pc, #648]	@ (8009720 <_dtoa_r+0x5c0>)
 8009498:	b954      	cbnz	r4, 80094b0 <_dtoa_r+0x350>
 800949a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800949e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094a2:	f7f7 f9f3 	bl	800088c <__aeabi_ddiv>
 80094a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094aa:	e028      	b.n	80094fe <_dtoa_r+0x39e>
 80094ac:	2602      	movs	r6, #2
 80094ae:	e7f2      	b.n	8009496 <_dtoa_r+0x336>
 80094b0:	07e1      	lsls	r1, r4, #31
 80094b2:	d508      	bpl.n	80094c6 <_dtoa_r+0x366>
 80094b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094bc:	f7f7 f8bc 	bl	8000638 <__aeabi_dmul>
 80094c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80094c4:	3601      	adds	r6, #1
 80094c6:	1064      	asrs	r4, r4, #1
 80094c8:	3508      	adds	r5, #8
 80094ca:	e7e5      	b.n	8009498 <_dtoa_r+0x338>
 80094cc:	f000 80d2 	beq.w	8009674 <_dtoa_r+0x514>
 80094d0:	427c      	negs	r4, r7
 80094d2:	4b92      	ldr	r3, [pc, #584]	@ (800971c <_dtoa_r+0x5bc>)
 80094d4:	4d92      	ldr	r5, [pc, #584]	@ (8009720 <_dtoa_r+0x5c0>)
 80094d6:	f004 020f 	and.w	r2, r4, #15
 80094da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e6:	f7f7 f8a7 	bl	8000638 <__aeabi_dmul>
 80094ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ee:	1124      	asrs	r4, r4, #4
 80094f0:	2300      	movs	r3, #0
 80094f2:	2602      	movs	r6, #2
 80094f4:	2c00      	cmp	r4, #0
 80094f6:	f040 80b2 	bne.w	800965e <_dtoa_r+0x4fe>
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1d3      	bne.n	80094a6 <_dtoa_r+0x346>
 80094fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009500:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	f000 80b7 	beq.w	8009678 <_dtoa_r+0x518>
 800950a:	4b86      	ldr	r3, [pc, #536]	@ (8009724 <_dtoa_r+0x5c4>)
 800950c:	2200      	movs	r2, #0
 800950e:	4620      	mov	r0, r4
 8009510:	4629      	mov	r1, r5
 8009512:	f7f7 fb03 	bl	8000b1c <__aeabi_dcmplt>
 8009516:	2800      	cmp	r0, #0
 8009518:	f000 80ae 	beq.w	8009678 <_dtoa_r+0x518>
 800951c:	9b07      	ldr	r3, [sp, #28]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f000 80aa 	beq.w	8009678 <_dtoa_r+0x518>
 8009524:	9b00      	ldr	r3, [sp, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	dd37      	ble.n	800959a <_dtoa_r+0x43a>
 800952a:	1e7b      	subs	r3, r7, #1
 800952c:	9304      	str	r3, [sp, #16]
 800952e:	4620      	mov	r0, r4
 8009530:	4b7d      	ldr	r3, [pc, #500]	@ (8009728 <_dtoa_r+0x5c8>)
 8009532:	2200      	movs	r2, #0
 8009534:	4629      	mov	r1, r5
 8009536:	f7f7 f87f 	bl	8000638 <__aeabi_dmul>
 800953a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800953e:	9c00      	ldr	r4, [sp, #0]
 8009540:	3601      	adds	r6, #1
 8009542:	4630      	mov	r0, r6
 8009544:	f7f7 f80e 	bl	8000564 <__aeabi_i2d>
 8009548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800954c:	f7f7 f874 	bl	8000638 <__aeabi_dmul>
 8009550:	4b76      	ldr	r3, [pc, #472]	@ (800972c <_dtoa_r+0x5cc>)
 8009552:	2200      	movs	r2, #0
 8009554:	f7f6 feba 	bl	80002cc <__adddf3>
 8009558:	4605      	mov	r5, r0
 800955a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800955e:	2c00      	cmp	r4, #0
 8009560:	f040 808d 	bne.w	800967e <_dtoa_r+0x51e>
 8009564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009568:	4b71      	ldr	r3, [pc, #452]	@ (8009730 <_dtoa_r+0x5d0>)
 800956a:	2200      	movs	r2, #0
 800956c:	f7f6 feac 	bl	80002c8 <__aeabi_dsub>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009578:	462a      	mov	r2, r5
 800957a:	4633      	mov	r3, r6
 800957c:	f7f7 faec 	bl	8000b58 <__aeabi_dcmpgt>
 8009580:	2800      	cmp	r0, #0
 8009582:	f040 828b 	bne.w	8009a9c <_dtoa_r+0x93c>
 8009586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800958a:	462a      	mov	r2, r5
 800958c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009590:	f7f7 fac4 	bl	8000b1c <__aeabi_dcmplt>
 8009594:	2800      	cmp	r0, #0
 8009596:	f040 8128 	bne.w	80097ea <_dtoa_r+0x68a>
 800959a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800959e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80095a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f2c0 815a 	blt.w	800985e <_dtoa_r+0x6fe>
 80095aa:	2f0e      	cmp	r7, #14
 80095ac:	f300 8157 	bgt.w	800985e <_dtoa_r+0x6fe>
 80095b0:	4b5a      	ldr	r3, [pc, #360]	@ (800971c <_dtoa_r+0x5bc>)
 80095b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095b6:	ed93 7b00 	vldr	d7, [r3]
 80095ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095bc:	2b00      	cmp	r3, #0
 80095be:	ed8d 7b00 	vstr	d7, [sp]
 80095c2:	da03      	bge.n	80095cc <_dtoa_r+0x46c>
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	f340 8101 	ble.w	80097ce <_dtoa_r+0x66e>
 80095cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80095d0:	4656      	mov	r6, sl
 80095d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d6:	4620      	mov	r0, r4
 80095d8:	4629      	mov	r1, r5
 80095da:	f7f7 f957 	bl	800088c <__aeabi_ddiv>
 80095de:	f7f7 fadb 	bl	8000b98 <__aeabi_d2iz>
 80095e2:	4680      	mov	r8, r0
 80095e4:	f7f6 ffbe 	bl	8000564 <__aeabi_i2d>
 80095e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095ec:	f7f7 f824 	bl	8000638 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095fc:	f7f6 fe64 	bl	80002c8 <__aeabi_dsub>
 8009600:	f806 4b01 	strb.w	r4, [r6], #1
 8009604:	9d07      	ldr	r5, [sp, #28]
 8009606:	eba6 040a 	sub.w	r4, r6, sl
 800960a:	42a5      	cmp	r5, r4
 800960c:	4602      	mov	r2, r0
 800960e:	460b      	mov	r3, r1
 8009610:	f040 8117 	bne.w	8009842 <_dtoa_r+0x6e2>
 8009614:	f7f6 fe5a 	bl	80002cc <__adddf3>
 8009618:	e9dd 2300 	ldrd	r2, r3, [sp]
 800961c:	4604      	mov	r4, r0
 800961e:	460d      	mov	r5, r1
 8009620:	f7f7 fa9a 	bl	8000b58 <__aeabi_dcmpgt>
 8009624:	2800      	cmp	r0, #0
 8009626:	f040 80f9 	bne.w	800981c <_dtoa_r+0x6bc>
 800962a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800962e:	4620      	mov	r0, r4
 8009630:	4629      	mov	r1, r5
 8009632:	f7f7 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8009636:	b118      	cbz	r0, 8009640 <_dtoa_r+0x4e0>
 8009638:	f018 0f01 	tst.w	r8, #1
 800963c:	f040 80ee 	bne.w	800981c <_dtoa_r+0x6bc>
 8009640:	4649      	mov	r1, r9
 8009642:	4658      	mov	r0, fp
 8009644:	f000 fc90 	bl	8009f68 <_Bfree>
 8009648:	2300      	movs	r3, #0
 800964a:	7033      	strb	r3, [r6, #0]
 800964c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800964e:	3701      	adds	r7, #1
 8009650:	601f      	str	r7, [r3, #0]
 8009652:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 831d 	beq.w	8009c94 <_dtoa_r+0xb34>
 800965a:	601e      	str	r6, [r3, #0]
 800965c:	e31a      	b.n	8009c94 <_dtoa_r+0xb34>
 800965e:	07e2      	lsls	r2, r4, #31
 8009660:	d505      	bpl.n	800966e <_dtoa_r+0x50e>
 8009662:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009666:	f7f6 ffe7 	bl	8000638 <__aeabi_dmul>
 800966a:	3601      	adds	r6, #1
 800966c:	2301      	movs	r3, #1
 800966e:	1064      	asrs	r4, r4, #1
 8009670:	3508      	adds	r5, #8
 8009672:	e73f      	b.n	80094f4 <_dtoa_r+0x394>
 8009674:	2602      	movs	r6, #2
 8009676:	e742      	b.n	80094fe <_dtoa_r+0x39e>
 8009678:	9c07      	ldr	r4, [sp, #28]
 800967a:	9704      	str	r7, [sp, #16]
 800967c:	e761      	b.n	8009542 <_dtoa_r+0x3e2>
 800967e:	4b27      	ldr	r3, [pc, #156]	@ (800971c <_dtoa_r+0x5bc>)
 8009680:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009682:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009686:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800968a:	4454      	add	r4, sl
 800968c:	2900      	cmp	r1, #0
 800968e:	d053      	beq.n	8009738 <_dtoa_r+0x5d8>
 8009690:	4928      	ldr	r1, [pc, #160]	@ (8009734 <_dtoa_r+0x5d4>)
 8009692:	2000      	movs	r0, #0
 8009694:	f7f7 f8fa 	bl	800088c <__aeabi_ddiv>
 8009698:	4633      	mov	r3, r6
 800969a:	462a      	mov	r2, r5
 800969c:	f7f6 fe14 	bl	80002c8 <__aeabi_dsub>
 80096a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80096a4:	4656      	mov	r6, sl
 80096a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096aa:	f7f7 fa75 	bl	8000b98 <__aeabi_d2iz>
 80096ae:	4605      	mov	r5, r0
 80096b0:	f7f6 ff58 	bl	8000564 <__aeabi_i2d>
 80096b4:	4602      	mov	r2, r0
 80096b6:	460b      	mov	r3, r1
 80096b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096bc:	f7f6 fe04 	bl	80002c8 <__aeabi_dsub>
 80096c0:	3530      	adds	r5, #48	@ 0x30
 80096c2:	4602      	mov	r2, r0
 80096c4:	460b      	mov	r3, r1
 80096c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80096ca:	f806 5b01 	strb.w	r5, [r6], #1
 80096ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096d2:	f7f7 fa23 	bl	8000b1c <__aeabi_dcmplt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d171      	bne.n	80097be <_dtoa_r+0x65e>
 80096da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096de:	4911      	ldr	r1, [pc, #68]	@ (8009724 <_dtoa_r+0x5c4>)
 80096e0:	2000      	movs	r0, #0
 80096e2:	f7f6 fdf1 	bl	80002c8 <__aeabi_dsub>
 80096e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80096ea:	f7f7 fa17 	bl	8000b1c <__aeabi_dcmplt>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	f040 8095 	bne.w	800981e <_dtoa_r+0x6be>
 80096f4:	42a6      	cmp	r6, r4
 80096f6:	f43f af50 	beq.w	800959a <_dtoa_r+0x43a>
 80096fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80096fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009728 <_dtoa_r+0x5c8>)
 8009700:	2200      	movs	r2, #0
 8009702:	f7f6 ff99 	bl	8000638 <__aeabi_dmul>
 8009706:	4b08      	ldr	r3, [pc, #32]	@ (8009728 <_dtoa_r+0x5c8>)
 8009708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800970c:	2200      	movs	r2, #0
 800970e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009712:	f7f6 ff91 	bl	8000638 <__aeabi_dmul>
 8009716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800971a:	e7c4      	b.n	80096a6 <_dtoa_r+0x546>
 800971c:	0800c358 	.word	0x0800c358
 8009720:	0800c330 	.word	0x0800c330
 8009724:	3ff00000 	.word	0x3ff00000
 8009728:	40240000 	.word	0x40240000
 800972c:	401c0000 	.word	0x401c0000
 8009730:	40140000 	.word	0x40140000
 8009734:	3fe00000 	.word	0x3fe00000
 8009738:	4631      	mov	r1, r6
 800973a:	4628      	mov	r0, r5
 800973c:	f7f6 ff7c 	bl	8000638 <__aeabi_dmul>
 8009740:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009744:	9415      	str	r4, [sp, #84]	@ 0x54
 8009746:	4656      	mov	r6, sl
 8009748:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800974c:	f7f7 fa24 	bl	8000b98 <__aeabi_d2iz>
 8009750:	4605      	mov	r5, r0
 8009752:	f7f6 ff07 	bl	8000564 <__aeabi_i2d>
 8009756:	4602      	mov	r2, r0
 8009758:	460b      	mov	r3, r1
 800975a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800975e:	f7f6 fdb3 	bl	80002c8 <__aeabi_dsub>
 8009762:	3530      	adds	r5, #48	@ 0x30
 8009764:	f806 5b01 	strb.w	r5, [r6], #1
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	42a6      	cmp	r6, r4
 800976e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	d124      	bne.n	80097c2 <_dtoa_r+0x662>
 8009778:	4bac      	ldr	r3, [pc, #688]	@ (8009a2c <_dtoa_r+0x8cc>)
 800977a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800977e:	f7f6 fda5 	bl	80002cc <__adddf3>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800978a:	f7f7 f9e5 	bl	8000b58 <__aeabi_dcmpgt>
 800978e:	2800      	cmp	r0, #0
 8009790:	d145      	bne.n	800981e <_dtoa_r+0x6be>
 8009792:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009796:	49a5      	ldr	r1, [pc, #660]	@ (8009a2c <_dtoa_r+0x8cc>)
 8009798:	2000      	movs	r0, #0
 800979a:	f7f6 fd95 	bl	80002c8 <__aeabi_dsub>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097a6:	f7f7 f9b9 	bl	8000b1c <__aeabi_dcmplt>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	f43f aef5 	beq.w	800959a <_dtoa_r+0x43a>
 80097b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80097b2:	1e73      	subs	r3, r6, #1
 80097b4:	9315      	str	r3, [sp, #84]	@ 0x54
 80097b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097ba:	2b30      	cmp	r3, #48	@ 0x30
 80097bc:	d0f8      	beq.n	80097b0 <_dtoa_r+0x650>
 80097be:	9f04      	ldr	r7, [sp, #16]
 80097c0:	e73e      	b.n	8009640 <_dtoa_r+0x4e0>
 80097c2:	4b9b      	ldr	r3, [pc, #620]	@ (8009a30 <_dtoa_r+0x8d0>)
 80097c4:	f7f6 ff38 	bl	8000638 <__aeabi_dmul>
 80097c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097cc:	e7bc      	b.n	8009748 <_dtoa_r+0x5e8>
 80097ce:	d10c      	bne.n	80097ea <_dtoa_r+0x68a>
 80097d0:	4b98      	ldr	r3, [pc, #608]	@ (8009a34 <_dtoa_r+0x8d4>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097d8:	f7f6 ff2e 	bl	8000638 <__aeabi_dmul>
 80097dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097e0:	f7f7 f9b0 	bl	8000b44 <__aeabi_dcmpge>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	f000 8157 	beq.w	8009a98 <_dtoa_r+0x938>
 80097ea:	2400      	movs	r4, #0
 80097ec:	4625      	mov	r5, r4
 80097ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80097f0:	43db      	mvns	r3, r3
 80097f2:	9304      	str	r3, [sp, #16]
 80097f4:	4656      	mov	r6, sl
 80097f6:	2700      	movs	r7, #0
 80097f8:	4621      	mov	r1, r4
 80097fa:	4658      	mov	r0, fp
 80097fc:	f000 fbb4 	bl	8009f68 <_Bfree>
 8009800:	2d00      	cmp	r5, #0
 8009802:	d0dc      	beq.n	80097be <_dtoa_r+0x65e>
 8009804:	b12f      	cbz	r7, 8009812 <_dtoa_r+0x6b2>
 8009806:	42af      	cmp	r7, r5
 8009808:	d003      	beq.n	8009812 <_dtoa_r+0x6b2>
 800980a:	4639      	mov	r1, r7
 800980c:	4658      	mov	r0, fp
 800980e:	f000 fbab 	bl	8009f68 <_Bfree>
 8009812:	4629      	mov	r1, r5
 8009814:	4658      	mov	r0, fp
 8009816:	f000 fba7 	bl	8009f68 <_Bfree>
 800981a:	e7d0      	b.n	80097be <_dtoa_r+0x65e>
 800981c:	9704      	str	r7, [sp, #16]
 800981e:	4633      	mov	r3, r6
 8009820:	461e      	mov	r6, r3
 8009822:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009826:	2a39      	cmp	r2, #57	@ 0x39
 8009828:	d107      	bne.n	800983a <_dtoa_r+0x6da>
 800982a:	459a      	cmp	sl, r3
 800982c:	d1f8      	bne.n	8009820 <_dtoa_r+0x6c0>
 800982e:	9a04      	ldr	r2, [sp, #16]
 8009830:	3201      	adds	r2, #1
 8009832:	9204      	str	r2, [sp, #16]
 8009834:	2230      	movs	r2, #48	@ 0x30
 8009836:	f88a 2000 	strb.w	r2, [sl]
 800983a:	781a      	ldrb	r2, [r3, #0]
 800983c:	3201      	adds	r2, #1
 800983e:	701a      	strb	r2, [r3, #0]
 8009840:	e7bd      	b.n	80097be <_dtoa_r+0x65e>
 8009842:	4b7b      	ldr	r3, [pc, #492]	@ (8009a30 <_dtoa_r+0x8d0>)
 8009844:	2200      	movs	r2, #0
 8009846:	f7f6 fef7 	bl	8000638 <__aeabi_dmul>
 800984a:	2200      	movs	r2, #0
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	460d      	mov	r5, r1
 8009852:	f7f7 f959 	bl	8000b08 <__aeabi_dcmpeq>
 8009856:	2800      	cmp	r0, #0
 8009858:	f43f aebb 	beq.w	80095d2 <_dtoa_r+0x472>
 800985c:	e6f0      	b.n	8009640 <_dtoa_r+0x4e0>
 800985e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009860:	2a00      	cmp	r2, #0
 8009862:	f000 80db 	beq.w	8009a1c <_dtoa_r+0x8bc>
 8009866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009868:	2a01      	cmp	r2, #1
 800986a:	f300 80bf 	bgt.w	80099ec <_dtoa_r+0x88c>
 800986e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009870:	2a00      	cmp	r2, #0
 8009872:	f000 80b7 	beq.w	80099e4 <_dtoa_r+0x884>
 8009876:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800987a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800987c:	4646      	mov	r6, r8
 800987e:	9a08      	ldr	r2, [sp, #32]
 8009880:	2101      	movs	r1, #1
 8009882:	441a      	add	r2, r3
 8009884:	4658      	mov	r0, fp
 8009886:	4498      	add	r8, r3
 8009888:	9208      	str	r2, [sp, #32]
 800988a:	f000 fc21 	bl	800a0d0 <__i2b>
 800988e:	4605      	mov	r5, r0
 8009890:	b15e      	cbz	r6, 80098aa <_dtoa_r+0x74a>
 8009892:	9b08      	ldr	r3, [sp, #32]
 8009894:	2b00      	cmp	r3, #0
 8009896:	dd08      	ble.n	80098aa <_dtoa_r+0x74a>
 8009898:	42b3      	cmp	r3, r6
 800989a:	9a08      	ldr	r2, [sp, #32]
 800989c:	bfa8      	it	ge
 800989e:	4633      	movge	r3, r6
 80098a0:	eba8 0803 	sub.w	r8, r8, r3
 80098a4:	1af6      	subs	r6, r6, r3
 80098a6:	1ad3      	subs	r3, r2, r3
 80098a8:	9308      	str	r3, [sp, #32]
 80098aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ac:	b1f3      	cbz	r3, 80098ec <_dtoa_r+0x78c>
 80098ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 80b7 	beq.w	8009a24 <_dtoa_r+0x8c4>
 80098b6:	b18c      	cbz	r4, 80098dc <_dtoa_r+0x77c>
 80098b8:	4629      	mov	r1, r5
 80098ba:	4622      	mov	r2, r4
 80098bc:	4658      	mov	r0, fp
 80098be:	f000 fcc7 	bl	800a250 <__pow5mult>
 80098c2:	464a      	mov	r2, r9
 80098c4:	4601      	mov	r1, r0
 80098c6:	4605      	mov	r5, r0
 80098c8:	4658      	mov	r0, fp
 80098ca:	f000 fc17 	bl	800a0fc <__multiply>
 80098ce:	4649      	mov	r1, r9
 80098d0:	9004      	str	r0, [sp, #16]
 80098d2:	4658      	mov	r0, fp
 80098d4:	f000 fb48 	bl	8009f68 <_Bfree>
 80098d8:	9b04      	ldr	r3, [sp, #16]
 80098da:	4699      	mov	r9, r3
 80098dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098de:	1b1a      	subs	r2, r3, r4
 80098e0:	d004      	beq.n	80098ec <_dtoa_r+0x78c>
 80098e2:	4649      	mov	r1, r9
 80098e4:	4658      	mov	r0, fp
 80098e6:	f000 fcb3 	bl	800a250 <__pow5mult>
 80098ea:	4681      	mov	r9, r0
 80098ec:	2101      	movs	r1, #1
 80098ee:	4658      	mov	r0, fp
 80098f0:	f000 fbee 	bl	800a0d0 <__i2b>
 80098f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098f6:	4604      	mov	r4, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 81cf 	beq.w	8009c9c <_dtoa_r+0xb3c>
 80098fe:	461a      	mov	r2, r3
 8009900:	4601      	mov	r1, r0
 8009902:	4658      	mov	r0, fp
 8009904:	f000 fca4 	bl	800a250 <__pow5mult>
 8009908:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800990a:	2b01      	cmp	r3, #1
 800990c:	4604      	mov	r4, r0
 800990e:	f300 8095 	bgt.w	8009a3c <_dtoa_r+0x8dc>
 8009912:	9b02      	ldr	r3, [sp, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	f040 8087 	bne.w	8009a28 <_dtoa_r+0x8c8>
 800991a:	9b03      	ldr	r3, [sp, #12]
 800991c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009920:	2b00      	cmp	r3, #0
 8009922:	f040 8089 	bne.w	8009a38 <_dtoa_r+0x8d8>
 8009926:	9b03      	ldr	r3, [sp, #12]
 8009928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800992c:	0d1b      	lsrs	r3, r3, #20
 800992e:	051b      	lsls	r3, r3, #20
 8009930:	b12b      	cbz	r3, 800993e <_dtoa_r+0x7de>
 8009932:	9b08      	ldr	r3, [sp, #32]
 8009934:	3301      	adds	r3, #1
 8009936:	9308      	str	r3, [sp, #32]
 8009938:	f108 0801 	add.w	r8, r8, #1
 800993c:	2301      	movs	r3, #1
 800993e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009940:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 81b0 	beq.w	8009ca8 <_dtoa_r+0xb48>
 8009948:	6923      	ldr	r3, [r4, #16]
 800994a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800994e:	6918      	ldr	r0, [r3, #16]
 8009950:	f000 fb72 	bl	800a038 <__hi0bits>
 8009954:	f1c0 0020 	rsb	r0, r0, #32
 8009958:	9b08      	ldr	r3, [sp, #32]
 800995a:	4418      	add	r0, r3
 800995c:	f010 001f 	ands.w	r0, r0, #31
 8009960:	d077      	beq.n	8009a52 <_dtoa_r+0x8f2>
 8009962:	f1c0 0320 	rsb	r3, r0, #32
 8009966:	2b04      	cmp	r3, #4
 8009968:	dd6b      	ble.n	8009a42 <_dtoa_r+0x8e2>
 800996a:	9b08      	ldr	r3, [sp, #32]
 800996c:	f1c0 001c 	rsb	r0, r0, #28
 8009970:	4403      	add	r3, r0
 8009972:	4480      	add	r8, r0
 8009974:	4406      	add	r6, r0
 8009976:	9308      	str	r3, [sp, #32]
 8009978:	f1b8 0f00 	cmp.w	r8, #0
 800997c:	dd05      	ble.n	800998a <_dtoa_r+0x82a>
 800997e:	4649      	mov	r1, r9
 8009980:	4642      	mov	r2, r8
 8009982:	4658      	mov	r0, fp
 8009984:	f000 fcbe 	bl	800a304 <__lshift>
 8009988:	4681      	mov	r9, r0
 800998a:	9b08      	ldr	r3, [sp, #32]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dd05      	ble.n	800999c <_dtoa_r+0x83c>
 8009990:	4621      	mov	r1, r4
 8009992:	461a      	mov	r2, r3
 8009994:	4658      	mov	r0, fp
 8009996:	f000 fcb5 	bl	800a304 <__lshift>
 800999a:	4604      	mov	r4, r0
 800999c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d059      	beq.n	8009a56 <_dtoa_r+0x8f6>
 80099a2:	4621      	mov	r1, r4
 80099a4:	4648      	mov	r0, r9
 80099a6:	f000 fd19 	bl	800a3dc <__mcmp>
 80099aa:	2800      	cmp	r0, #0
 80099ac:	da53      	bge.n	8009a56 <_dtoa_r+0x8f6>
 80099ae:	1e7b      	subs	r3, r7, #1
 80099b0:	9304      	str	r3, [sp, #16]
 80099b2:	4649      	mov	r1, r9
 80099b4:	2300      	movs	r3, #0
 80099b6:	220a      	movs	r2, #10
 80099b8:	4658      	mov	r0, fp
 80099ba:	f000 faf7 	bl	8009fac <__multadd>
 80099be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099c0:	4681      	mov	r9, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8172 	beq.w	8009cac <_dtoa_r+0xb4c>
 80099c8:	2300      	movs	r3, #0
 80099ca:	4629      	mov	r1, r5
 80099cc:	220a      	movs	r2, #10
 80099ce:	4658      	mov	r0, fp
 80099d0:	f000 faec 	bl	8009fac <__multadd>
 80099d4:	9b00      	ldr	r3, [sp, #0]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	4605      	mov	r5, r0
 80099da:	dc67      	bgt.n	8009aac <_dtoa_r+0x94c>
 80099dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099de:	2b02      	cmp	r3, #2
 80099e0:	dc41      	bgt.n	8009a66 <_dtoa_r+0x906>
 80099e2:	e063      	b.n	8009aac <_dtoa_r+0x94c>
 80099e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80099e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80099ea:	e746      	b.n	800987a <_dtoa_r+0x71a>
 80099ec:	9b07      	ldr	r3, [sp, #28]
 80099ee:	1e5c      	subs	r4, r3, #1
 80099f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	bfbf      	itttt	lt
 80099f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80099f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80099fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80099fc:	1ae3      	sublt	r3, r4, r3
 80099fe:	bfb4      	ite	lt
 8009a00:	18d2      	addlt	r2, r2, r3
 8009a02:	1b1c      	subge	r4, r3, r4
 8009a04:	9b07      	ldr	r3, [sp, #28]
 8009a06:	bfbc      	itt	lt
 8009a08:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009a0a:	2400      	movlt	r4, #0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	bfb5      	itete	lt
 8009a10:	eba8 0603 	sublt.w	r6, r8, r3
 8009a14:	9b07      	ldrge	r3, [sp, #28]
 8009a16:	2300      	movlt	r3, #0
 8009a18:	4646      	movge	r6, r8
 8009a1a:	e730      	b.n	800987e <_dtoa_r+0x71e>
 8009a1c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009a1e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009a20:	4646      	mov	r6, r8
 8009a22:	e735      	b.n	8009890 <_dtoa_r+0x730>
 8009a24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a26:	e75c      	b.n	80098e2 <_dtoa_r+0x782>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e788      	b.n	800993e <_dtoa_r+0x7de>
 8009a2c:	3fe00000 	.word	0x3fe00000
 8009a30:	40240000 	.word	0x40240000
 8009a34:	40140000 	.word	0x40140000
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	e780      	b.n	800993e <_dtoa_r+0x7de>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009a40:	e782      	b.n	8009948 <_dtoa_r+0x7e8>
 8009a42:	d099      	beq.n	8009978 <_dtoa_r+0x818>
 8009a44:	9a08      	ldr	r2, [sp, #32]
 8009a46:	331c      	adds	r3, #28
 8009a48:	441a      	add	r2, r3
 8009a4a:	4498      	add	r8, r3
 8009a4c:	441e      	add	r6, r3
 8009a4e:	9208      	str	r2, [sp, #32]
 8009a50:	e792      	b.n	8009978 <_dtoa_r+0x818>
 8009a52:	4603      	mov	r3, r0
 8009a54:	e7f6      	b.n	8009a44 <_dtoa_r+0x8e4>
 8009a56:	9b07      	ldr	r3, [sp, #28]
 8009a58:	9704      	str	r7, [sp, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dc20      	bgt.n	8009aa0 <_dtoa_r+0x940>
 8009a5e:	9300      	str	r3, [sp, #0]
 8009a60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a62:	2b02      	cmp	r3, #2
 8009a64:	dd1e      	ble.n	8009aa4 <_dtoa_r+0x944>
 8009a66:	9b00      	ldr	r3, [sp, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	f47f aec0 	bne.w	80097ee <_dtoa_r+0x68e>
 8009a6e:	4621      	mov	r1, r4
 8009a70:	2205      	movs	r2, #5
 8009a72:	4658      	mov	r0, fp
 8009a74:	f000 fa9a 	bl	8009fac <__multadd>
 8009a78:	4601      	mov	r1, r0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4648      	mov	r0, r9
 8009a7e:	f000 fcad 	bl	800a3dc <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f77f aeb3 	ble.w	80097ee <_dtoa_r+0x68e>
 8009a88:	4656      	mov	r6, sl
 8009a8a:	2331      	movs	r3, #49	@ 0x31
 8009a8c:	f806 3b01 	strb.w	r3, [r6], #1
 8009a90:	9b04      	ldr	r3, [sp, #16]
 8009a92:	3301      	adds	r3, #1
 8009a94:	9304      	str	r3, [sp, #16]
 8009a96:	e6ae      	b.n	80097f6 <_dtoa_r+0x696>
 8009a98:	9c07      	ldr	r4, [sp, #28]
 8009a9a:	9704      	str	r7, [sp, #16]
 8009a9c:	4625      	mov	r5, r4
 8009a9e:	e7f3      	b.n	8009a88 <_dtoa_r+0x928>
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f000 8104 	beq.w	8009cb4 <_dtoa_r+0xb54>
 8009aac:	2e00      	cmp	r6, #0
 8009aae:	dd05      	ble.n	8009abc <_dtoa_r+0x95c>
 8009ab0:	4629      	mov	r1, r5
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	4658      	mov	r0, fp
 8009ab6:	f000 fc25 	bl	800a304 <__lshift>
 8009aba:	4605      	mov	r5, r0
 8009abc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d05a      	beq.n	8009b78 <_dtoa_r+0xa18>
 8009ac2:	6869      	ldr	r1, [r5, #4]
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fa0f 	bl	8009ee8 <_Balloc>
 8009aca:	4606      	mov	r6, r0
 8009acc:	b928      	cbnz	r0, 8009ada <_dtoa_r+0x97a>
 8009ace:	4b84      	ldr	r3, [pc, #528]	@ (8009ce0 <_dtoa_r+0xb80>)
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009ad6:	f7ff bb5a 	b.w	800918e <_dtoa_r+0x2e>
 8009ada:	692a      	ldr	r2, [r5, #16]
 8009adc:	3202      	adds	r2, #2
 8009ade:	0092      	lsls	r2, r2, #2
 8009ae0:	f105 010c 	add.w	r1, r5, #12
 8009ae4:	300c      	adds	r0, #12
 8009ae6:	f000 ffc1 	bl	800aa6c <memcpy>
 8009aea:	2201      	movs	r2, #1
 8009aec:	4631      	mov	r1, r6
 8009aee:	4658      	mov	r0, fp
 8009af0:	f000 fc08 	bl	800a304 <__lshift>
 8009af4:	f10a 0301 	add.w	r3, sl, #1
 8009af8:	9307      	str	r3, [sp, #28]
 8009afa:	9b00      	ldr	r3, [sp, #0]
 8009afc:	4453      	add	r3, sl
 8009afe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	f003 0301 	and.w	r3, r3, #1
 8009b06:	462f      	mov	r7, r5
 8009b08:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b0a:	4605      	mov	r5, r0
 8009b0c:	9b07      	ldr	r3, [sp, #28]
 8009b0e:	4621      	mov	r1, r4
 8009b10:	3b01      	subs	r3, #1
 8009b12:	4648      	mov	r0, r9
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	f7ff fa9b 	bl	8009050 <quorem>
 8009b1a:	4639      	mov	r1, r7
 8009b1c:	9002      	str	r0, [sp, #8]
 8009b1e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b22:	4648      	mov	r0, r9
 8009b24:	f000 fc5a 	bl	800a3dc <__mcmp>
 8009b28:	462a      	mov	r2, r5
 8009b2a:	9008      	str	r0, [sp, #32]
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4658      	mov	r0, fp
 8009b30:	f000 fc70 	bl	800a414 <__mdiff>
 8009b34:	68c2      	ldr	r2, [r0, #12]
 8009b36:	4606      	mov	r6, r0
 8009b38:	bb02      	cbnz	r2, 8009b7c <_dtoa_r+0xa1c>
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4648      	mov	r0, r9
 8009b3e:	f000 fc4d 	bl	800a3dc <__mcmp>
 8009b42:	4602      	mov	r2, r0
 8009b44:	4631      	mov	r1, r6
 8009b46:	4658      	mov	r0, fp
 8009b48:	920e      	str	r2, [sp, #56]	@ 0x38
 8009b4a:	f000 fa0d 	bl	8009f68 <_Bfree>
 8009b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b52:	9e07      	ldr	r6, [sp, #28]
 8009b54:	ea43 0102 	orr.w	r1, r3, r2
 8009b58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5a:	4319      	orrs	r1, r3
 8009b5c:	d110      	bne.n	8009b80 <_dtoa_r+0xa20>
 8009b5e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009b62:	d029      	beq.n	8009bb8 <_dtoa_r+0xa58>
 8009b64:	9b08      	ldr	r3, [sp, #32]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	dd02      	ble.n	8009b70 <_dtoa_r+0xa10>
 8009b6a:	9b02      	ldr	r3, [sp, #8]
 8009b6c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009b70:	9b00      	ldr	r3, [sp, #0]
 8009b72:	f883 8000 	strb.w	r8, [r3]
 8009b76:	e63f      	b.n	80097f8 <_dtoa_r+0x698>
 8009b78:	4628      	mov	r0, r5
 8009b7a:	e7bb      	b.n	8009af4 <_dtoa_r+0x994>
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	e7e1      	b.n	8009b44 <_dtoa_r+0x9e4>
 8009b80:	9b08      	ldr	r3, [sp, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	db04      	blt.n	8009b90 <_dtoa_r+0xa30>
 8009b86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009b88:	430b      	orrs	r3, r1
 8009b8a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009b8c:	430b      	orrs	r3, r1
 8009b8e:	d120      	bne.n	8009bd2 <_dtoa_r+0xa72>
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	dded      	ble.n	8009b70 <_dtoa_r+0xa10>
 8009b94:	4649      	mov	r1, r9
 8009b96:	2201      	movs	r2, #1
 8009b98:	4658      	mov	r0, fp
 8009b9a:	f000 fbb3 	bl	800a304 <__lshift>
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	4681      	mov	r9, r0
 8009ba2:	f000 fc1b 	bl	800a3dc <__mcmp>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	dc03      	bgt.n	8009bb2 <_dtoa_r+0xa52>
 8009baa:	d1e1      	bne.n	8009b70 <_dtoa_r+0xa10>
 8009bac:	f018 0f01 	tst.w	r8, #1
 8009bb0:	d0de      	beq.n	8009b70 <_dtoa_r+0xa10>
 8009bb2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bb6:	d1d8      	bne.n	8009b6a <_dtoa_r+0xa0a>
 8009bb8:	9a00      	ldr	r2, [sp, #0]
 8009bba:	2339      	movs	r3, #57	@ 0x39
 8009bbc:	7013      	strb	r3, [r2, #0]
 8009bbe:	4633      	mov	r3, r6
 8009bc0:	461e      	mov	r6, r3
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009bc8:	2a39      	cmp	r2, #57	@ 0x39
 8009bca:	d052      	beq.n	8009c72 <_dtoa_r+0xb12>
 8009bcc:	3201      	adds	r2, #1
 8009bce:	701a      	strb	r2, [r3, #0]
 8009bd0:	e612      	b.n	80097f8 <_dtoa_r+0x698>
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	dd07      	ble.n	8009be6 <_dtoa_r+0xa86>
 8009bd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009bda:	d0ed      	beq.n	8009bb8 <_dtoa_r+0xa58>
 8009bdc:	9a00      	ldr	r2, [sp, #0]
 8009bde:	f108 0301 	add.w	r3, r8, #1
 8009be2:	7013      	strb	r3, [r2, #0]
 8009be4:	e608      	b.n	80097f8 <_dtoa_r+0x698>
 8009be6:	9b07      	ldr	r3, [sp, #28]
 8009be8:	9a07      	ldr	r2, [sp, #28]
 8009bea:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d028      	beq.n	8009c46 <_dtoa_r+0xae6>
 8009bf4:	4649      	mov	r1, r9
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	220a      	movs	r2, #10
 8009bfa:	4658      	mov	r0, fp
 8009bfc:	f000 f9d6 	bl	8009fac <__multadd>
 8009c00:	42af      	cmp	r7, r5
 8009c02:	4681      	mov	r9, r0
 8009c04:	f04f 0300 	mov.w	r3, #0
 8009c08:	f04f 020a 	mov.w	r2, #10
 8009c0c:	4639      	mov	r1, r7
 8009c0e:	4658      	mov	r0, fp
 8009c10:	d107      	bne.n	8009c22 <_dtoa_r+0xac2>
 8009c12:	f000 f9cb 	bl	8009fac <__multadd>
 8009c16:	4607      	mov	r7, r0
 8009c18:	4605      	mov	r5, r0
 8009c1a:	9b07      	ldr	r3, [sp, #28]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	9307      	str	r3, [sp, #28]
 8009c20:	e774      	b.n	8009b0c <_dtoa_r+0x9ac>
 8009c22:	f000 f9c3 	bl	8009fac <__multadd>
 8009c26:	4629      	mov	r1, r5
 8009c28:	4607      	mov	r7, r0
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	220a      	movs	r2, #10
 8009c2e:	4658      	mov	r0, fp
 8009c30:	f000 f9bc 	bl	8009fac <__multadd>
 8009c34:	4605      	mov	r5, r0
 8009c36:	e7f0      	b.n	8009c1a <_dtoa_r+0xaba>
 8009c38:	9b00      	ldr	r3, [sp, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	bfcc      	ite	gt
 8009c3e:	461e      	movgt	r6, r3
 8009c40:	2601      	movle	r6, #1
 8009c42:	4456      	add	r6, sl
 8009c44:	2700      	movs	r7, #0
 8009c46:	4649      	mov	r1, r9
 8009c48:	2201      	movs	r2, #1
 8009c4a:	4658      	mov	r0, fp
 8009c4c:	f000 fb5a 	bl	800a304 <__lshift>
 8009c50:	4621      	mov	r1, r4
 8009c52:	4681      	mov	r9, r0
 8009c54:	f000 fbc2 	bl	800a3dc <__mcmp>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	dcb0      	bgt.n	8009bbe <_dtoa_r+0xa5e>
 8009c5c:	d102      	bne.n	8009c64 <_dtoa_r+0xb04>
 8009c5e:	f018 0f01 	tst.w	r8, #1
 8009c62:	d1ac      	bne.n	8009bbe <_dtoa_r+0xa5e>
 8009c64:	4633      	mov	r3, r6
 8009c66:	461e      	mov	r6, r3
 8009c68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c6c:	2a30      	cmp	r2, #48	@ 0x30
 8009c6e:	d0fa      	beq.n	8009c66 <_dtoa_r+0xb06>
 8009c70:	e5c2      	b.n	80097f8 <_dtoa_r+0x698>
 8009c72:	459a      	cmp	sl, r3
 8009c74:	d1a4      	bne.n	8009bc0 <_dtoa_r+0xa60>
 8009c76:	9b04      	ldr	r3, [sp, #16]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	9304      	str	r3, [sp, #16]
 8009c7c:	2331      	movs	r3, #49	@ 0x31
 8009c7e:	f88a 3000 	strb.w	r3, [sl]
 8009c82:	e5b9      	b.n	80097f8 <_dtoa_r+0x698>
 8009c84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c86:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009ce4 <_dtoa_r+0xb84>
 8009c8a:	b11b      	cbz	r3, 8009c94 <_dtoa_r+0xb34>
 8009c8c:	f10a 0308 	add.w	r3, sl, #8
 8009c90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	4650      	mov	r0, sl
 8009c96:	b019      	add	sp, #100	@ 0x64
 8009c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	f77f ae37 	ble.w	8009912 <_dtoa_r+0x7b2>
 8009ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ca8:	2001      	movs	r0, #1
 8009caa:	e655      	b.n	8009958 <_dtoa_r+0x7f8>
 8009cac:	9b00      	ldr	r3, [sp, #0]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f77f aed6 	ble.w	8009a60 <_dtoa_r+0x900>
 8009cb4:	4656      	mov	r6, sl
 8009cb6:	4621      	mov	r1, r4
 8009cb8:	4648      	mov	r0, r9
 8009cba:	f7ff f9c9 	bl	8009050 <quorem>
 8009cbe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009cc2:	f806 8b01 	strb.w	r8, [r6], #1
 8009cc6:	9b00      	ldr	r3, [sp, #0]
 8009cc8:	eba6 020a 	sub.w	r2, r6, sl
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	ddb3      	ble.n	8009c38 <_dtoa_r+0xad8>
 8009cd0:	4649      	mov	r1, r9
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	220a      	movs	r2, #10
 8009cd6:	4658      	mov	r0, fp
 8009cd8:	f000 f968 	bl	8009fac <__multadd>
 8009cdc:	4681      	mov	r9, r0
 8009cde:	e7ea      	b.n	8009cb6 <_dtoa_r+0xb56>
 8009ce0:	0800c2b8 	.word	0x0800c2b8
 8009ce4:	0800c253 	.word	0x0800c253

08009ce8 <_free_r>:
 8009ce8:	b538      	push	{r3, r4, r5, lr}
 8009cea:	4605      	mov	r5, r0
 8009cec:	2900      	cmp	r1, #0
 8009cee:	d041      	beq.n	8009d74 <_free_r+0x8c>
 8009cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cf4:	1f0c      	subs	r4, r1, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	bfb8      	it	lt
 8009cfa:	18e4      	addlt	r4, r4, r3
 8009cfc:	f000 f8e8 	bl	8009ed0 <__malloc_lock>
 8009d00:	4a1d      	ldr	r2, [pc, #116]	@ (8009d78 <_free_r+0x90>)
 8009d02:	6813      	ldr	r3, [r2, #0]
 8009d04:	b933      	cbnz	r3, 8009d14 <_free_r+0x2c>
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	6014      	str	r4, [r2, #0]
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d10:	f000 b8e4 	b.w	8009edc <__malloc_unlock>
 8009d14:	42a3      	cmp	r3, r4
 8009d16:	d908      	bls.n	8009d2a <_free_r+0x42>
 8009d18:	6820      	ldr	r0, [r4, #0]
 8009d1a:	1821      	adds	r1, r4, r0
 8009d1c:	428b      	cmp	r3, r1
 8009d1e:	bf01      	itttt	eq
 8009d20:	6819      	ldreq	r1, [r3, #0]
 8009d22:	685b      	ldreq	r3, [r3, #4]
 8009d24:	1809      	addeq	r1, r1, r0
 8009d26:	6021      	streq	r1, [r4, #0]
 8009d28:	e7ed      	b.n	8009d06 <_free_r+0x1e>
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	b10b      	cbz	r3, 8009d34 <_free_r+0x4c>
 8009d30:	42a3      	cmp	r3, r4
 8009d32:	d9fa      	bls.n	8009d2a <_free_r+0x42>
 8009d34:	6811      	ldr	r1, [r2, #0]
 8009d36:	1850      	adds	r0, r2, r1
 8009d38:	42a0      	cmp	r0, r4
 8009d3a:	d10b      	bne.n	8009d54 <_free_r+0x6c>
 8009d3c:	6820      	ldr	r0, [r4, #0]
 8009d3e:	4401      	add	r1, r0
 8009d40:	1850      	adds	r0, r2, r1
 8009d42:	4283      	cmp	r3, r0
 8009d44:	6011      	str	r1, [r2, #0]
 8009d46:	d1e0      	bne.n	8009d0a <_free_r+0x22>
 8009d48:	6818      	ldr	r0, [r3, #0]
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	6053      	str	r3, [r2, #4]
 8009d4e:	4408      	add	r0, r1
 8009d50:	6010      	str	r0, [r2, #0]
 8009d52:	e7da      	b.n	8009d0a <_free_r+0x22>
 8009d54:	d902      	bls.n	8009d5c <_free_r+0x74>
 8009d56:	230c      	movs	r3, #12
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	e7d6      	b.n	8009d0a <_free_r+0x22>
 8009d5c:	6820      	ldr	r0, [r4, #0]
 8009d5e:	1821      	adds	r1, r4, r0
 8009d60:	428b      	cmp	r3, r1
 8009d62:	bf04      	itt	eq
 8009d64:	6819      	ldreq	r1, [r3, #0]
 8009d66:	685b      	ldreq	r3, [r3, #4]
 8009d68:	6063      	str	r3, [r4, #4]
 8009d6a:	bf04      	itt	eq
 8009d6c:	1809      	addeq	r1, r1, r0
 8009d6e:	6021      	streq	r1, [r4, #0]
 8009d70:	6054      	str	r4, [r2, #4]
 8009d72:	e7ca      	b.n	8009d0a <_free_r+0x22>
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	200067c8 	.word	0x200067c8

08009d7c <malloc>:
 8009d7c:	4b02      	ldr	r3, [pc, #8]	@ (8009d88 <malloc+0xc>)
 8009d7e:	4601      	mov	r1, r0
 8009d80:	6818      	ldr	r0, [r3, #0]
 8009d82:	f000 b825 	b.w	8009dd0 <_malloc_r>
 8009d86:	bf00      	nop
 8009d88:	20004e8c 	.word	0x20004e8c

08009d8c <sbrk_aligned>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4e0f      	ldr	r6, [pc, #60]	@ (8009dcc <sbrk_aligned+0x40>)
 8009d90:	460c      	mov	r4, r1
 8009d92:	6831      	ldr	r1, [r6, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	b911      	cbnz	r1, 8009d9e <sbrk_aligned+0x12>
 8009d98:	f000 fe58 	bl	800aa4c <_sbrk_r>
 8009d9c:	6030      	str	r0, [r6, #0]
 8009d9e:	4621      	mov	r1, r4
 8009da0:	4628      	mov	r0, r5
 8009da2:	f000 fe53 	bl	800aa4c <_sbrk_r>
 8009da6:	1c43      	adds	r3, r0, #1
 8009da8:	d103      	bne.n	8009db2 <sbrk_aligned+0x26>
 8009daa:	f04f 34ff 	mov.w	r4, #4294967295
 8009dae:	4620      	mov	r0, r4
 8009db0:	bd70      	pop	{r4, r5, r6, pc}
 8009db2:	1cc4      	adds	r4, r0, #3
 8009db4:	f024 0403 	bic.w	r4, r4, #3
 8009db8:	42a0      	cmp	r0, r4
 8009dba:	d0f8      	beq.n	8009dae <sbrk_aligned+0x22>
 8009dbc:	1a21      	subs	r1, r4, r0
 8009dbe:	4628      	mov	r0, r5
 8009dc0:	f000 fe44 	bl	800aa4c <_sbrk_r>
 8009dc4:	3001      	adds	r0, #1
 8009dc6:	d1f2      	bne.n	8009dae <sbrk_aligned+0x22>
 8009dc8:	e7ef      	b.n	8009daa <sbrk_aligned+0x1e>
 8009dca:	bf00      	nop
 8009dcc:	200067c4 	.word	0x200067c4

08009dd0 <_malloc_r>:
 8009dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dd4:	1ccd      	adds	r5, r1, #3
 8009dd6:	f025 0503 	bic.w	r5, r5, #3
 8009dda:	3508      	adds	r5, #8
 8009ddc:	2d0c      	cmp	r5, #12
 8009dde:	bf38      	it	cc
 8009de0:	250c      	movcc	r5, #12
 8009de2:	2d00      	cmp	r5, #0
 8009de4:	4606      	mov	r6, r0
 8009de6:	db01      	blt.n	8009dec <_malloc_r+0x1c>
 8009de8:	42a9      	cmp	r1, r5
 8009dea:	d904      	bls.n	8009df6 <_malloc_r+0x26>
 8009dec:	230c      	movs	r3, #12
 8009dee:	6033      	str	r3, [r6, #0]
 8009df0:	2000      	movs	r0, #0
 8009df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009df6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009ecc <_malloc_r+0xfc>
 8009dfa:	f000 f869 	bl	8009ed0 <__malloc_lock>
 8009dfe:	f8d8 3000 	ldr.w	r3, [r8]
 8009e02:	461c      	mov	r4, r3
 8009e04:	bb44      	cbnz	r4, 8009e58 <_malloc_r+0x88>
 8009e06:	4629      	mov	r1, r5
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffbf 	bl	8009d8c <sbrk_aligned>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	4604      	mov	r4, r0
 8009e12:	d158      	bne.n	8009ec6 <_malloc_r+0xf6>
 8009e14:	f8d8 4000 	ldr.w	r4, [r8]
 8009e18:	4627      	mov	r7, r4
 8009e1a:	2f00      	cmp	r7, #0
 8009e1c:	d143      	bne.n	8009ea6 <_malloc_r+0xd6>
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	d04b      	beq.n	8009eba <_malloc_r+0xea>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	4639      	mov	r1, r7
 8009e26:	4630      	mov	r0, r6
 8009e28:	eb04 0903 	add.w	r9, r4, r3
 8009e2c:	f000 fe0e 	bl	800aa4c <_sbrk_r>
 8009e30:	4581      	cmp	r9, r0
 8009e32:	d142      	bne.n	8009eba <_malloc_r+0xea>
 8009e34:	6821      	ldr	r1, [r4, #0]
 8009e36:	1a6d      	subs	r5, r5, r1
 8009e38:	4629      	mov	r1, r5
 8009e3a:	4630      	mov	r0, r6
 8009e3c:	f7ff ffa6 	bl	8009d8c <sbrk_aligned>
 8009e40:	3001      	adds	r0, #1
 8009e42:	d03a      	beq.n	8009eba <_malloc_r+0xea>
 8009e44:	6823      	ldr	r3, [r4, #0]
 8009e46:	442b      	add	r3, r5
 8009e48:	6023      	str	r3, [r4, #0]
 8009e4a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	bb62      	cbnz	r2, 8009eac <_malloc_r+0xdc>
 8009e52:	f8c8 7000 	str.w	r7, [r8]
 8009e56:	e00f      	b.n	8009e78 <_malloc_r+0xa8>
 8009e58:	6822      	ldr	r2, [r4, #0]
 8009e5a:	1b52      	subs	r2, r2, r5
 8009e5c:	d420      	bmi.n	8009ea0 <_malloc_r+0xd0>
 8009e5e:	2a0b      	cmp	r2, #11
 8009e60:	d917      	bls.n	8009e92 <_malloc_r+0xc2>
 8009e62:	1961      	adds	r1, r4, r5
 8009e64:	42a3      	cmp	r3, r4
 8009e66:	6025      	str	r5, [r4, #0]
 8009e68:	bf18      	it	ne
 8009e6a:	6059      	strne	r1, [r3, #4]
 8009e6c:	6863      	ldr	r3, [r4, #4]
 8009e6e:	bf08      	it	eq
 8009e70:	f8c8 1000 	streq.w	r1, [r8]
 8009e74:	5162      	str	r2, [r4, r5]
 8009e76:	604b      	str	r3, [r1, #4]
 8009e78:	4630      	mov	r0, r6
 8009e7a:	f000 f82f 	bl	8009edc <__malloc_unlock>
 8009e7e:	f104 000b 	add.w	r0, r4, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	f020 0007 	bic.w	r0, r0, #7
 8009e88:	1ac2      	subs	r2, r0, r3
 8009e8a:	bf1c      	itt	ne
 8009e8c:	1a1b      	subne	r3, r3, r0
 8009e8e:	50a3      	strne	r3, [r4, r2]
 8009e90:	e7af      	b.n	8009df2 <_malloc_r+0x22>
 8009e92:	6862      	ldr	r2, [r4, #4]
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	bf0c      	ite	eq
 8009e98:	f8c8 2000 	streq.w	r2, [r8]
 8009e9c:	605a      	strne	r2, [r3, #4]
 8009e9e:	e7eb      	b.n	8009e78 <_malloc_r+0xa8>
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	6864      	ldr	r4, [r4, #4]
 8009ea4:	e7ae      	b.n	8009e04 <_malloc_r+0x34>
 8009ea6:	463c      	mov	r4, r7
 8009ea8:	687f      	ldr	r7, [r7, #4]
 8009eaa:	e7b6      	b.n	8009e1a <_malloc_r+0x4a>
 8009eac:	461a      	mov	r2, r3
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d1fb      	bne.n	8009eac <_malloc_r+0xdc>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	e7de      	b.n	8009e78 <_malloc_r+0xa8>
 8009eba:	230c      	movs	r3, #12
 8009ebc:	6033      	str	r3, [r6, #0]
 8009ebe:	4630      	mov	r0, r6
 8009ec0:	f000 f80c 	bl	8009edc <__malloc_unlock>
 8009ec4:	e794      	b.n	8009df0 <_malloc_r+0x20>
 8009ec6:	6005      	str	r5, [r0, #0]
 8009ec8:	e7d6      	b.n	8009e78 <_malloc_r+0xa8>
 8009eca:	bf00      	nop
 8009ecc:	200067c8 	.word	0x200067c8

08009ed0 <__malloc_lock>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	@ (8009ed8 <__malloc_lock+0x8>)
 8009ed2:	f7ff b89c 	b.w	800900e <__retarget_lock_acquire_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	200067c0 	.word	0x200067c0

08009edc <__malloc_unlock>:
 8009edc:	4801      	ldr	r0, [pc, #4]	@ (8009ee4 <__malloc_unlock+0x8>)
 8009ede:	f7ff b897 	b.w	8009010 <__retarget_lock_release_recursive>
 8009ee2:	bf00      	nop
 8009ee4:	200067c0 	.word	0x200067c0

08009ee8 <_Balloc>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	69c6      	ldr	r6, [r0, #28]
 8009eec:	4604      	mov	r4, r0
 8009eee:	460d      	mov	r5, r1
 8009ef0:	b976      	cbnz	r6, 8009f10 <_Balloc+0x28>
 8009ef2:	2010      	movs	r0, #16
 8009ef4:	f7ff ff42 	bl	8009d7c <malloc>
 8009ef8:	4602      	mov	r2, r0
 8009efa:	61e0      	str	r0, [r4, #28]
 8009efc:	b920      	cbnz	r0, 8009f08 <_Balloc+0x20>
 8009efe:	4b18      	ldr	r3, [pc, #96]	@ (8009f60 <_Balloc+0x78>)
 8009f00:	4818      	ldr	r0, [pc, #96]	@ (8009f64 <_Balloc+0x7c>)
 8009f02:	216b      	movs	r1, #107	@ 0x6b
 8009f04:	f7ff f886 	bl	8009014 <__assert_func>
 8009f08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f0c:	6006      	str	r6, [r0, #0]
 8009f0e:	60c6      	str	r6, [r0, #12]
 8009f10:	69e6      	ldr	r6, [r4, #28]
 8009f12:	68f3      	ldr	r3, [r6, #12]
 8009f14:	b183      	cbz	r3, 8009f38 <_Balloc+0x50>
 8009f16:	69e3      	ldr	r3, [r4, #28]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f1e:	b9b8      	cbnz	r0, 8009f50 <_Balloc+0x68>
 8009f20:	2101      	movs	r1, #1
 8009f22:	fa01 f605 	lsl.w	r6, r1, r5
 8009f26:	1d72      	adds	r2, r6, #5
 8009f28:	0092      	lsls	r2, r2, #2
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fdb3 	bl	800aa96 <_calloc_r>
 8009f30:	b160      	cbz	r0, 8009f4c <_Balloc+0x64>
 8009f32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f36:	e00e      	b.n	8009f56 <_Balloc+0x6e>
 8009f38:	2221      	movs	r2, #33	@ 0x21
 8009f3a:	2104      	movs	r1, #4
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fdaa 	bl	800aa96 <_calloc_r>
 8009f42:	69e3      	ldr	r3, [r4, #28]
 8009f44:	60f0      	str	r0, [r6, #12]
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d1e4      	bne.n	8009f16 <_Balloc+0x2e>
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	6802      	ldr	r2, [r0, #0]
 8009f52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f56:	2300      	movs	r3, #0
 8009f58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f5c:	e7f7      	b.n	8009f4e <_Balloc+0x66>
 8009f5e:	bf00      	nop
 8009f60:	0800c174 	.word	0x0800c174
 8009f64:	0800c2c9 	.word	0x0800c2c9

08009f68 <_Bfree>:
 8009f68:	b570      	push	{r4, r5, r6, lr}
 8009f6a:	69c6      	ldr	r6, [r0, #28]
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	b976      	cbnz	r6, 8009f90 <_Bfree+0x28>
 8009f72:	2010      	movs	r0, #16
 8009f74:	f7ff ff02 	bl	8009d7c <malloc>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	61e8      	str	r0, [r5, #28]
 8009f7c:	b920      	cbnz	r0, 8009f88 <_Bfree+0x20>
 8009f7e:	4b09      	ldr	r3, [pc, #36]	@ (8009fa4 <_Bfree+0x3c>)
 8009f80:	4809      	ldr	r0, [pc, #36]	@ (8009fa8 <_Bfree+0x40>)
 8009f82:	218f      	movs	r1, #143	@ 0x8f
 8009f84:	f7ff f846 	bl	8009014 <__assert_func>
 8009f88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f8c:	6006      	str	r6, [r0, #0]
 8009f8e:	60c6      	str	r6, [r0, #12]
 8009f90:	b13c      	cbz	r4, 8009fa2 <_Bfree+0x3a>
 8009f92:	69eb      	ldr	r3, [r5, #28]
 8009f94:	6862      	ldr	r2, [r4, #4]
 8009f96:	68db      	ldr	r3, [r3, #12]
 8009f98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f9c:	6021      	str	r1, [r4, #0]
 8009f9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009fa2:	bd70      	pop	{r4, r5, r6, pc}
 8009fa4:	0800c174 	.word	0x0800c174
 8009fa8:	0800c2c9 	.word	0x0800c2c9

08009fac <__multadd>:
 8009fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fb0:	690d      	ldr	r5, [r1, #16]
 8009fb2:	4607      	mov	r7, r0
 8009fb4:	460c      	mov	r4, r1
 8009fb6:	461e      	mov	r6, r3
 8009fb8:	f101 0c14 	add.w	ip, r1, #20
 8009fbc:	2000      	movs	r0, #0
 8009fbe:	f8dc 3000 	ldr.w	r3, [ip]
 8009fc2:	b299      	uxth	r1, r3
 8009fc4:	fb02 6101 	mla	r1, r2, r1, r6
 8009fc8:	0c1e      	lsrs	r6, r3, #16
 8009fca:	0c0b      	lsrs	r3, r1, #16
 8009fcc:	fb02 3306 	mla	r3, r2, r6, r3
 8009fd0:	b289      	uxth	r1, r1
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fd8:	4285      	cmp	r5, r0
 8009fda:	f84c 1b04 	str.w	r1, [ip], #4
 8009fde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fe2:	dcec      	bgt.n	8009fbe <__multadd+0x12>
 8009fe4:	b30e      	cbz	r6, 800a02a <__multadd+0x7e>
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	42ab      	cmp	r3, r5
 8009fea:	dc19      	bgt.n	800a020 <__multadd+0x74>
 8009fec:	6861      	ldr	r1, [r4, #4]
 8009fee:	4638      	mov	r0, r7
 8009ff0:	3101      	adds	r1, #1
 8009ff2:	f7ff ff79 	bl	8009ee8 <_Balloc>
 8009ff6:	4680      	mov	r8, r0
 8009ff8:	b928      	cbnz	r0, 800a006 <__multadd+0x5a>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	4b0c      	ldr	r3, [pc, #48]	@ (800a030 <__multadd+0x84>)
 8009ffe:	480d      	ldr	r0, [pc, #52]	@ (800a034 <__multadd+0x88>)
 800a000:	21ba      	movs	r1, #186	@ 0xba
 800a002:	f7ff f807 	bl	8009014 <__assert_func>
 800a006:	6922      	ldr	r2, [r4, #16]
 800a008:	3202      	adds	r2, #2
 800a00a:	f104 010c 	add.w	r1, r4, #12
 800a00e:	0092      	lsls	r2, r2, #2
 800a010:	300c      	adds	r0, #12
 800a012:	f000 fd2b 	bl	800aa6c <memcpy>
 800a016:	4621      	mov	r1, r4
 800a018:	4638      	mov	r0, r7
 800a01a:	f7ff ffa5 	bl	8009f68 <_Bfree>
 800a01e:	4644      	mov	r4, r8
 800a020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a024:	3501      	adds	r5, #1
 800a026:	615e      	str	r6, [r3, #20]
 800a028:	6125      	str	r5, [r4, #16]
 800a02a:	4620      	mov	r0, r4
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	0800c2b8 	.word	0x0800c2b8
 800a034:	0800c2c9 	.word	0x0800c2c9

0800a038 <__hi0bits>:
 800a038:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a03c:	4603      	mov	r3, r0
 800a03e:	bf36      	itet	cc
 800a040:	0403      	lslcc	r3, r0, #16
 800a042:	2000      	movcs	r0, #0
 800a044:	2010      	movcc	r0, #16
 800a046:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a04a:	bf3c      	itt	cc
 800a04c:	021b      	lslcc	r3, r3, #8
 800a04e:	3008      	addcc	r0, #8
 800a050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a054:	bf3c      	itt	cc
 800a056:	011b      	lslcc	r3, r3, #4
 800a058:	3004      	addcc	r0, #4
 800a05a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a05e:	bf3c      	itt	cc
 800a060:	009b      	lslcc	r3, r3, #2
 800a062:	3002      	addcc	r0, #2
 800a064:	2b00      	cmp	r3, #0
 800a066:	db05      	blt.n	800a074 <__hi0bits+0x3c>
 800a068:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a06c:	f100 0001 	add.w	r0, r0, #1
 800a070:	bf08      	it	eq
 800a072:	2020      	moveq	r0, #32
 800a074:	4770      	bx	lr

0800a076 <__lo0bits>:
 800a076:	6803      	ldr	r3, [r0, #0]
 800a078:	4602      	mov	r2, r0
 800a07a:	f013 0007 	ands.w	r0, r3, #7
 800a07e:	d00b      	beq.n	800a098 <__lo0bits+0x22>
 800a080:	07d9      	lsls	r1, r3, #31
 800a082:	d421      	bmi.n	800a0c8 <__lo0bits+0x52>
 800a084:	0798      	lsls	r0, r3, #30
 800a086:	bf49      	itett	mi
 800a088:	085b      	lsrmi	r3, r3, #1
 800a08a:	089b      	lsrpl	r3, r3, #2
 800a08c:	2001      	movmi	r0, #1
 800a08e:	6013      	strmi	r3, [r2, #0]
 800a090:	bf5c      	itt	pl
 800a092:	6013      	strpl	r3, [r2, #0]
 800a094:	2002      	movpl	r0, #2
 800a096:	4770      	bx	lr
 800a098:	b299      	uxth	r1, r3
 800a09a:	b909      	cbnz	r1, 800a0a0 <__lo0bits+0x2a>
 800a09c:	0c1b      	lsrs	r3, r3, #16
 800a09e:	2010      	movs	r0, #16
 800a0a0:	b2d9      	uxtb	r1, r3
 800a0a2:	b909      	cbnz	r1, 800a0a8 <__lo0bits+0x32>
 800a0a4:	3008      	adds	r0, #8
 800a0a6:	0a1b      	lsrs	r3, r3, #8
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	bf04      	itt	eq
 800a0ac:	091b      	lsreq	r3, r3, #4
 800a0ae:	3004      	addeq	r0, #4
 800a0b0:	0799      	lsls	r1, r3, #30
 800a0b2:	bf04      	itt	eq
 800a0b4:	089b      	lsreq	r3, r3, #2
 800a0b6:	3002      	addeq	r0, #2
 800a0b8:	07d9      	lsls	r1, r3, #31
 800a0ba:	d403      	bmi.n	800a0c4 <__lo0bits+0x4e>
 800a0bc:	085b      	lsrs	r3, r3, #1
 800a0be:	f100 0001 	add.w	r0, r0, #1
 800a0c2:	d003      	beq.n	800a0cc <__lo0bits+0x56>
 800a0c4:	6013      	str	r3, [r2, #0]
 800a0c6:	4770      	bx	lr
 800a0c8:	2000      	movs	r0, #0
 800a0ca:	4770      	bx	lr
 800a0cc:	2020      	movs	r0, #32
 800a0ce:	4770      	bx	lr

0800a0d0 <__i2b>:
 800a0d0:	b510      	push	{r4, lr}
 800a0d2:	460c      	mov	r4, r1
 800a0d4:	2101      	movs	r1, #1
 800a0d6:	f7ff ff07 	bl	8009ee8 <_Balloc>
 800a0da:	4602      	mov	r2, r0
 800a0dc:	b928      	cbnz	r0, 800a0ea <__i2b+0x1a>
 800a0de:	4b05      	ldr	r3, [pc, #20]	@ (800a0f4 <__i2b+0x24>)
 800a0e0:	4805      	ldr	r0, [pc, #20]	@ (800a0f8 <__i2b+0x28>)
 800a0e2:	f240 1145 	movw	r1, #325	@ 0x145
 800a0e6:	f7fe ff95 	bl	8009014 <__assert_func>
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	6144      	str	r4, [r0, #20]
 800a0ee:	6103      	str	r3, [r0, #16]
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0800c2b8 	.word	0x0800c2b8
 800a0f8:	0800c2c9 	.word	0x0800c2c9

0800a0fc <__multiply>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	4614      	mov	r4, r2
 800a102:	690a      	ldr	r2, [r1, #16]
 800a104:	6923      	ldr	r3, [r4, #16]
 800a106:	429a      	cmp	r2, r3
 800a108:	bfa8      	it	ge
 800a10a:	4623      	movge	r3, r4
 800a10c:	460f      	mov	r7, r1
 800a10e:	bfa4      	itt	ge
 800a110:	460c      	movge	r4, r1
 800a112:	461f      	movge	r7, r3
 800a114:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a118:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a11c:	68a3      	ldr	r3, [r4, #8]
 800a11e:	6861      	ldr	r1, [r4, #4]
 800a120:	eb0a 0609 	add.w	r6, sl, r9
 800a124:	42b3      	cmp	r3, r6
 800a126:	b085      	sub	sp, #20
 800a128:	bfb8      	it	lt
 800a12a:	3101      	addlt	r1, #1
 800a12c:	f7ff fedc 	bl	8009ee8 <_Balloc>
 800a130:	b930      	cbnz	r0, 800a140 <__multiply+0x44>
 800a132:	4602      	mov	r2, r0
 800a134:	4b44      	ldr	r3, [pc, #272]	@ (800a248 <__multiply+0x14c>)
 800a136:	4845      	ldr	r0, [pc, #276]	@ (800a24c <__multiply+0x150>)
 800a138:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a13c:	f7fe ff6a 	bl	8009014 <__assert_func>
 800a140:	f100 0514 	add.w	r5, r0, #20
 800a144:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a148:	462b      	mov	r3, r5
 800a14a:	2200      	movs	r2, #0
 800a14c:	4543      	cmp	r3, r8
 800a14e:	d321      	bcc.n	800a194 <__multiply+0x98>
 800a150:	f107 0114 	add.w	r1, r7, #20
 800a154:	f104 0214 	add.w	r2, r4, #20
 800a158:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a15c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a160:	9302      	str	r3, [sp, #8]
 800a162:	1b13      	subs	r3, r2, r4
 800a164:	3b15      	subs	r3, #21
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	3304      	adds	r3, #4
 800a16c:	f104 0715 	add.w	r7, r4, #21
 800a170:	42ba      	cmp	r2, r7
 800a172:	bf38      	it	cc
 800a174:	2304      	movcc	r3, #4
 800a176:	9301      	str	r3, [sp, #4]
 800a178:	9b02      	ldr	r3, [sp, #8]
 800a17a:	9103      	str	r1, [sp, #12]
 800a17c:	428b      	cmp	r3, r1
 800a17e:	d80c      	bhi.n	800a19a <__multiply+0x9e>
 800a180:	2e00      	cmp	r6, #0
 800a182:	dd03      	ble.n	800a18c <__multiply+0x90>
 800a184:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d05b      	beq.n	800a244 <__multiply+0x148>
 800a18c:	6106      	str	r6, [r0, #16]
 800a18e:	b005      	add	sp, #20
 800a190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a194:	f843 2b04 	str.w	r2, [r3], #4
 800a198:	e7d8      	b.n	800a14c <__multiply+0x50>
 800a19a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a19e:	f1ba 0f00 	cmp.w	sl, #0
 800a1a2:	d024      	beq.n	800a1ee <__multiply+0xf2>
 800a1a4:	f104 0e14 	add.w	lr, r4, #20
 800a1a8:	46a9      	mov	r9, r5
 800a1aa:	f04f 0c00 	mov.w	ip, #0
 800a1ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a1b2:	f8d9 3000 	ldr.w	r3, [r9]
 800a1b6:	fa1f fb87 	uxth.w	fp, r7
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	fb0a 330b 	mla	r3, sl, fp, r3
 800a1c0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1c4:	f8d9 7000 	ldr.w	r7, [r9]
 800a1c8:	4463      	add	r3, ip
 800a1ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1ce:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1d2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1dc:	4572      	cmp	r2, lr
 800a1de:	f849 3b04 	str.w	r3, [r9], #4
 800a1e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1e6:	d8e2      	bhi.n	800a1ae <__multiply+0xb2>
 800a1e8:	9b01      	ldr	r3, [sp, #4]
 800a1ea:	f845 c003 	str.w	ip, [r5, r3]
 800a1ee:	9b03      	ldr	r3, [sp, #12]
 800a1f0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1f4:	3104      	adds	r1, #4
 800a1f6:	f1b9 0f00 	cmp.w	r9, #0
 800a1fa:	d021      	beq.n	800a240 <__multiply+0x144>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	f104 0c14 	add.w	ip, r4, #20
 800a202:	46ae      	mov	lr, r5
 800a204:	f04f 0a00 	mov.w	sl, #0
 800a208:	f8bc b000 	ldrh.w	fp, [ip]
 800a20c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a210:	fb09 770b 	mla	r7, r9, fp, r7
 800a214:	4457      	add	r7, sl
 800a216:	b29b      	uxth	r3, r3
 800a218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a21c:	f84e 3b04 	str.w	r3, [lr], #4
 800a220:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a228:	f8be 3000 	ldrh.w	r3, [lr]
 800a22c:	fb09 330a 	mla	r3, r9, sl, r3
 800a230:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a234:	4562      	cmp	r2, ip
 800a236:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a23a:	d8e5      	bhi.n	800a208 <__multiply+0x10c>
 800a23c:	9f01      	ldr	r7, [sp, #4]
 800a23e:	51eb      	str	r3, [r5, r7]
 800a240:	3504      	adds	r5, #4
 800a242:	e799      	b.n	800a178 <__multiply+0x7c>
 800a244:	3e01      	subs	r6, #1
 800a246:	e79b      	b.n	800a180 <__multiply+0x84>
 800a248:	0800c2b8 	.word	0x0800c2b8
 800a24c:	0800c2c9 	.word	0x0800c2c9

0800a250 <__pow5mult>:
 800a250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a254:	4615      	mov	r5, r2
 800a256:	f012 0203 	ands.w	r2, r2, #3
 800a25a:	4607      	mov	r7, r0
 800a25c:	460e      	mov	r6, r1
 800a25e:	d007      	beq.n	800a270 <__pow5mult+0x20>
 800a260:	4c25      	ldr	r4, [pc, #148]	@ (800a2f8 <__pow5mult+0xa8>)
 800a262:	3a01      	subs	r2, #1
 800a264:	2300      	movs	r3, #0
 800a266:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a26a:	f7ff fe9f 	bl	8009fac <__multadd>
 800a26e:	4606      	mov	r6, r0
 800a270:	10ad      	asrs	r5, r5, #2
 800a272:	d03d      	beq.n	800a2f0 <__pow5mult+0xa0>
 800a274:	69fc      	ldr	r4, [r7, #28]
 800a276:	b97c      	cbnz	r4, 800a298 <__pow5mult+0x48>
 800a278:	2010      	movs	r0, #16
 800a27a:	f7ff fd7f 	bl	8009d7c <malloc>
 800a27e:	4602      	mov	r2, r0
 800a280:	61f8      	str	r0, [r7, #28]
 800a282:	b928      	cbnz	r0, 800a290 <__pow5mult+0x40>
 800a284:	4b1d      	ldr	r3, [pc, #116]	@ (800a2fc <__pow5mult+0xac>)
 800a286:	481e      	ldr	r0, [pc, #120]	@ (800a300 <__pow5mult+0xb0>)
 800a288:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a28c:	f7fe fec2 	bl	8009014 <__assert_func>
 800a290:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a294:	6004      	str	r4, [r0, #0]
 800a296:	60c4      	str	r4, [r0, #12]
 800a298:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a29c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a2a0:	b94c      	cbnz	r4, 800a2b6 <__pow5mult+0x66>
 800a2a2:	f240 2171 	movw	r1, #625	@ 0x271
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f7ff ff12 	bl	800a0d0 <__i2b>
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	6003      	str	r3, [r0, #0]
 800a2b6:	f04f 0900 	mov.w	r9, #0
 800a2ba:	07eb      	lsls	r3, r5, #31
 800a2bc:	d50a      	bpl.n	800a2d4 <__pow5mult+0x84>
 800a2be:	4631      	mov	r1, r6
 800a2c0:	4622      	mov	r2, r4
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7ff ff1a 	bl	800a0fc <__multiply>
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4680      	mov	r8, r0
 800a2cc:	4638      	mov	r0, r7
 800a2ce:	f7ff fe4b 	bl	8009f68 <_Bfree>
 800a2d2:	4646      	mov	r6, r8
 800a2d4:	106d      	asrs	r5, r5, #1
 800a2d6:	d00b      	beq.n	800a2f0 <__pow5mult+0xa0>
 800a2d8:	6820      	ldr	r0, [r4, #0]
 800a2da:	b938      	cbnz	r0, 800a2ec <__pow5mult+0x9c>
 800a2dc:	4622      	mov	r2, r4
 800a2de:	4621      	mov	r1, r4
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f7ff ff0b 	bl	800a0fc <__multiply>
 800a2e6:	6020      	str	r0, [r4, #0]
 800a2e8:	f8c0 9000 	str.w	r9, [r0]
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	e7e4      	b.n	800a2ba <__pow5mult+0x6a>
 800a2f0:	4630      	mov	r0, r6
 800a2f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0800c324 	.word	0x0800c324
 800a2fc:	0800c174 	.word	0x0800c174
 800a300:	0800c2c9 	.word	0x0800c2c9

0800a304 <__lshift>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	460c      	mov	r4, r1
 800a30a:	6849      	ldr	r1, [r1, #4]
 800a30c:	6923      	ldr	r3, [r4, #16]
 800a30e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a312:	68a3      	ldr	r3, [r4, #8]
 800a314:	4607      	mov	r7, r0
 800a316:	4691      	mov	r9, r2
 800a318:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a31c:	f108 0601 	add.w	r6, r8, #1
 800a320:	42b3      	cmp	r3, r6
 800a322:	db0b      	blt.n	800a33c <__lshift+0x38>
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff fddf 	bl	8009ee8 <_Balloc>
 800a32a:	4605      	mov	r5, r0
 800a32c:	b948      	cbnz	r0, 800a342 <__lshift+0x3e>
 800a32e:	4602      	mov	r2, r0
 800a330:	4b28      	ldr	r3, [pc, #160]	@ (800a3d4 <__lshift+0xd0>)
 800a332:	4829      	ldr	r0, [pc, #164]	@ (800a3d8 <__lshift+0xd4>)
 800a334:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a338:	f7fe fe6c 	bl	8009014 <__assert_func>
 800a33c:	3101      	adds	r1, #1
 800a33e:	005b      	lsls	r3, r3, #1
 800a340:	e7ee      	b.n	800a320 <__lshift+0x1c>
 800a342:	2300      	movs	r3, #0
 800a344:	f100 0114 	add.w	r1, r0, #20
 800a348:	f100 0210 	add.w	r2, r0, #16
 800a34c:	4618      	mov	r0, r3
 800a34e:	4553      	cmp	r3, sl
 800a350:	db33      	blt.n	800a3ba <__lshift+0xb6>
 800a352:	6920      	ldr	r0, [r4, #16]
 800a354:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a358:	f104 0314 	add.w	r3, r4, #20
 800a35c:	f019 091f 	ands.w	r9, r9, #31
 800a360:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a364:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a368:	d02b      	beq.n	800a3c2 <__lshift+0xbe>
 800a36a:	f1c9 0e20 	rsb	lr, r9, #32
 800a36e:	468a      	mov	sl, r1
 800a370:	2200      	movs	r2, #0
 800a372:	6818      	ldr	r0, [r3, #0]
 800a374:	fa00 f009 	lsl.w	r0, r0, r9
 800a378:	4310      	orrs	r0, r2
 800a37a:	f84a 0b04 	str.w	r0, [sl], #4
 800a37e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a382:	459c      	cmp	ip, r3
 800a384:	fa22 f20e 	lsr.w	r2, r2, lr
 800a388:	d8f3      	bhi.n	800a372 <__lshift+0x6e>
 800a38a:	ebac 0304 	sub.w	r3, ip, r4
 800a38e:	3b15      	subs	r3, #21
 800a390:	f023 0303 	bic.w	r3, r3, #3
 800a394:	3304      	adds	r3, #4
 800a396:	f104 0015 	add.w	r0, r4, #21
 800a39a:	4584      	cmp	ip, r0
 800a39c:	bf38      	it	cc
 800a39e:	2304      	movcc	r3, #4
 800a3a0:	50ca      	str	r2, [r1, r3]
 800a3a2:	b10a      	cbz	r2, 800a3a8 <__lshift+0xa4>
 800a3a4:	f108 0602 	add.w	r6, r8, #2
 800a3a8:	3e01      	subs	r6, #1
 800a3aa:	4638      	mov	r0, r7
 800a3ac:	612e      	str	r6, [r5, #16]
 800a3ae:	4621      	mov	r1, r4
 800a3b0:	f7ff fdda 	bl	8009f68 <_Bfree>
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800a3be:	3301      	adds	r3, #1
 800a3c0:	e7c5      	b.n	800a34e <__lshift+0x4a>
 800a3c2:	3904      	subs	r1, #4
 800a3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3cc:	459c      	cmp	ip, r3
 800a3ce:	d8f9      	bhi.n	800a3c4 <__lshift+0xc0>
 800a3d0:	e7ea      	b.n	800a3a8 <__lshift+0xa4>
 800a3d2:	bf00      	nop
 800a3d4:	0800c2b8 	.word	0x0800c2b8
 800a3d8:	0800c2c9 	.word	0x0800c2c9

0800a3dc <__mcmp>:
 800a3dc:	690a      	ldr	r2, [r1, #16]
 800a3de:	4603      	mov	r3, r0
 800a3e0:	6900      	ldr	r0, [r0, #16]
 800a3e2:	1a80      	subs	r0, r0, r2
 800a3e4:	b530      	push	{r4, r5, lr}
 800a3e6:	d10e      	bne.n	800a406 <__mcmp+0x2a>
 800a3e8:	3314      	adds	r3, #20
 800a3ea:	3114      	adds	r1, #20
 800a3ec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3fc:	4295      	cmp	r5, r2
 800a3fe:	d003      	beq.n	800a408 <__mcmp+0x2c>
 800a400:	d205      	bcs.n	800a40e <__mcmp+0x32>
 800a402:	f04f 30ff 	mov.w	r0, #4294967295
 800a406:	bd30      	pop	{r4, r5, pc}
 800a408:	42a3      	cmp	r3, r4
 800a40a:	d3f3      	bcc.n	800a3f4 <__mcmp+0x18>
 800a40c:	e7fb      	b.n	800a406 <__mcmp+0x2a>
 800a40e:	2001      	movs	r0, #1
 800a410:	e7f9      	b.n	800a406 <__mcmp+0x2a>
	...

0800a414 <__mdiff>:
 800a414:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a418:	4689      	mov	r9, r1
 800a41a:	4606      	mov	r6, r0
 800a41c:	4611      	mov	r1, r2
 800a41e:	4648      	mov	r0, r9
 800a420:	4614      	mov	r4, r2
 800a422:	f7ff ffdb 	bl	800a3dc <__mcmp>
 800a426:	1e05      	subs	r5, r0, #0
 800a428:	d112      	bne.n	800a450 <__mdiff+0x3c>
 800a42a:	4629      	mov	r1, r5
 800a42c:	4630      	mov	r0, r6
 800a42e:	f7ff fd5b 	bl	8009ee8 <_Balloc>
 800a432:	4602      	mov	r2, r0
 800a434:	b928      	cbnz	r0, 800a442 <__mdiff+0x2e>
 800a436:	4b3f      	ldr	r3, [pc, #252]	@ (800a534 <__mdiff+0x120>)
 800a438:	f240 2137 	movw	r1, #567	@ 0x237
 800a43c:	483e      	ldr	r0, [pc, #248]	@ (800a538 <__mdiff+0x124>)
 800a43e:	f7fe fde9 	bl	8009014 <__assert_func>
 800a442:	2301      	movs	r3, #1
 800a444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a448:	4610      	mov	r0, r2
 800a44a:	b003      	add	sp, #12
 800a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a450:	bfbc      	itt	lt
 800a452:	464b      	movlt	r3, r9
 800a454:	46a1      	movlt	r9, r4
 800a456:	4630      	mov	r0, r6
 800a458:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a45c:	bfba      	itte	lt
 800a45e:	461c      	movlt	r4, r3
 800a460:	2501      	movlt	r5, #1
 800a462:	2500      	movge	r5, #0
 800a464:	f7ff fd40 	bl	8009ee8 <_Balloc>
 800a468:	4602      	mov	r2, r0
 800a46a:	b918      	cbnz	r0, 800a474 <__mdiff+0x60>
 800a46c:	4b31      	ldr	r3, [pc, #196]	@ (800a534 <__mdiff+0x120>)
 800a46e:	f240 2145 	movw	r1, #581	@ 0x245
 800a472:	e7e3      	b.n	800a43c <__mdiff+0x28>
 800a474:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a478:	6926      	ldr	r6, [r4, #16]
 800a47a:	60c5      	str	r5, [r0, #12]
 800a47c:	f109 0310 	add.w	r3, r9, #16
 800a480:	f109 0514 	add.w	r5, r9, #20
 800a484:	f104 0e14 	add.w	lr, r4, #20
 800a488:	f100 0b14 	add.w	fp, r0, #20
 800a48c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a490:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a494:	9301      	str	r3, [sp, #4]
 800a496:	46d9      	mov	r9, fp
 800a498:	f04f 0c00 	mov.w	ip, #0
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a4a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a4a6:	9301      	str	r3, [sp, #4]
 800a4a8:	fa1f f38a 	uxth.w	r3, sl
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	b283      	uxth	r3, r0
 800a4b0:	1acb      	subs	r3, r1, r3
 800a4b2:	0c00      	lsrs	r0, r0, #16
 800a4b4:	4463      	add	r3, ip
 800a4b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a4ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4c4:	4576      	cmp	r6, lr
 800a4c6:	f849 3b04 	str.w	r3, [r9], #4
 800a4ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4ce:	d8e5      	bhi.n	800a49c <__mdiff+0x88>
 800a4d0:	1b33      	subs	r3, r6, r4
 800a4d2:	3b15      	subs	r3, #21
 800a4d4:	f023 0303 	bic.w	r3, r3, #3
 800a4d8:	3415      	adds	r4, #21
 800a4da:	3304      	adds	r3, #4
 800a4dc:	42a6      	cmp	r6, r4
 800a4de:	bf38      	it	cc
 800a4e0:	2304      	movcc	r3, #4
 800a4e2:	441d      	add	r5, r3
 800a4e4:	445b      	add	r3, fp
 800a4e6:	461e      	mov	r6, r3
 800a4e8:	462c      	mov	r4, r5
 800a4ea:	4544      	cmp	r4, r8
 800a4ec:	d30e      	bcc.n	800a50c <__mdiff+0xf8>
 800a4ee:	f108 0103 	add.w	r1, r8, #3
 800a4f2:	1b49      	subs	r1, r1, r5
 800a4f4:	f021 0103 	bic.w	r1, r1, #3
 800a4f8:	3d03      	subs	r5, #3
 800a4fa:	45a8      	cmp	r8, r5
 800a4fc:	bf38      	it	cc
 800a4fe:	2100      	movcc	r1, #0
 800a500:	440b      	add	r3, r1
 800a502:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a506:	b191      	cbz	r1, 800a52e <__mdiff+0x11a>
 800a508:	6117      	str	r7, [r2, #16]
 800a50a:	e79d      	b.n	800a448 <__mdiff+0x34>
 800a50c:	f854 1b04 	ldr.w	r1, [r4], #4
 800a510:	46e6      	mov	lr, ip
 800a512:	0c08      	lsrs	r0, r1, #16
 800a514:	fa1c fc81 	uxtah	ip, ip, r1
 800a518:	4471      	add	r1, lr
 800a51a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a51e:	b289      	uxth	r1, r1
 800a520:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a524:	f846 1b04 	str.w	r1, [r6], #4
 800a528:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a52c:	e7dd      	b.n	800a4ea <__mdiff+0xd6>
 800a52e:	3f01      	subs	r7, #1
 800a530:	e7e7      	b.n	800a502 <__mdiff+0xee>
 800a532:	bf00      	nop
 800a534:	0800c2b8 	.word	0x0800c2b8
 800a538:	0800c2c9 	.word	0x0800c2c9

0800a53c <__d2b>:
 800a53c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a540:	460f      	mov	r7, r1
 800a542:	2101      	movs	r1, #1
 800a544:	ec59 8b10 	vmov	r8, r9, d0
 800a548:	4616      	mov	r6, r2
 800a54a:	f7ff fccd 	bl	8009ee8 <_Balloc>
 800a54e:	4604      	mov	r4, r0
 800a550:	b930      	cbnz	r0, 800a560 <__d2b+0x24>
 800a552:	4602      	mov	r2, r0
 800a554:	4b23      	ldr	r3, [pc, #140]	@ (800a5e4 <__d2b+0xa8>)
 800a556:	4824      	ldr	r0, [pc, #144]	@ (800a5e8 <__d2b+0xac>)
 800a558:	f240 310f 	movw	r1, #783	@ 0x30f
 800a55c:	f7fe fd5a 	bl	8009014 <__assert_func>
 800a560:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a568:	b10d      	cbz	r5, 800a56e <__d2b+0x32>
 800a56a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a56e:	9301      	str	r3, [sp, #4]
 800a570:	f1b8 0300 	subs.w	r3, r8, #0
 800a574:	d023      	beq.n	800a5be <__d2b+0x82>
 800a576:	4668      	mov	r0, sp
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	f7ff fd7c 	bl	800a076 <__lo0bits>
 800a57e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a582:	b1d0      	cbz	r0, 800a5ba <__d2b+0x7e>
 800a584:	f1c0 0320 	rsb	r3, r0, #32
 800a588:	fa02 f303 	lsl.w	r3, r2, r3
 800a58c:	430b      	orrs	r3, r1
 800a58e:	40c2      	lsrs	r2, r0
 800a590:	6163      	str	r3, [r4, #20]
 800a592:	9201      	str	r2, [sp, #4]
 800a594:	9b01      	ldr	r3, [sp, #4]
 800a596:	61a3      	str	r3, [r4, #24]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	bf0c      	ite	eq
 800a59c:	2201      	moveq	r2, #1
 800a59e:	2202      	movne	r2, #2
 800a5a0:	6122      	str	r2, [r4, #16]
 800a5a2:	b1a5      	cbz	r5, 800a5ce <__d2b+0x92>
 800a5a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5a8:	4405      	add	r5, r0
 800a5aa:	603d      	str	r5, [r7, #0]
 800a5ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5b0:	6030      	str	r0, [r6, #0]
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	b003      	add	sp, #12
 800a5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	6161      	str	r1, [r4, #20]
 800a5bc:	e7ea      	b.n	800a594 <__d2b+0x58>
 800a5be:	a801      	add	r0, sp, #4
 800a5c0:	f7ff fd59 	bl	800a076 <__lo0bits>
 800a5c4:	9b01      	ldr	r3, [sp, #4]
 800a5c6:	6163      	str	r3, [r4, #20]
 800a5c8:	3020      	adds	r0, #32
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	e7e8      	b.n	800a5a0 <__d2b+0x64>
 800a5ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5d6:	6038      	str	r0, [r7, #0]
 800a5d8:	6918      	ldr	r0, [r3, #16]
 800a5da:	f7ff fd2d 	bl	800a038 <__hi0bits>
 800a5de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5e2:	e7e5      	b.n	800a5b0 <__d2b+0x74>
 800a5e4:	0800c2b8 	.word	0x0800c2b8
 800a5e8:	0800c2c9 	.word	0x0800c2c9

0800a5ec <__ssputs_r>:
 800a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5f0:	688e      	ldr	r6, [r1, #8]
 800a5f2:	461f      	mov	r7, r3
 800a5f4:	42be      	cmp	r6, r7
 800a5f6:	680b      	ldr	r3, [r1, #0]
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	4690      	mov	r8, r2
 800a5fe:	d82d      	bhi.n	800a65c <__ssputs_r+0x70>
 800a600:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a604:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a608:	d026      	beq.n	800a658 <__ssputs_r+0x6c>
 800a60a:	6965      	ldr	r5, [r4, #20]
 800a60c:	6909      	ldr	r1, [r1, #16]
 800a60e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a612:	eba3 0901 	sub.w	r9, r3, r1
 800a616:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a61a:	1c7b      	adds	r3, r7, #1
 800a61c:	444b      	add	r3, r9
 800a61e:	106d      	asrs	r5, r5, #1
 800a620:	429d      	cmp	r5, r3
 800a622:	bf38      	it	cc
 800a624:	461d      	movcc	r5, r3
 800a626:	0553      	lsls	r3, r2, #21
 800a628:	d527      	bpl.n	800a67a <__ssputs_r+0x8e>
 800a62a:	4629      	mov	r1, r5
 800a62c:	f7ff fbd0 	bl	8009dd0 <_malloc_r>
 800a630:	4606      	mov	r6, r0
 800a632:	b360      	cbz	r0, 800a68e <__ssputs_r+0xa2>
 800a634:	6921      	ldr	r1, [r4, #16]
 800a636:	464a      	mov	r2, r9
 800a638:	f000 fa18 	bl	800aa6c <memcpy>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a642:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	6126      	str	r6, [r4, #16]
 800a64a:	6165      	str	r5, [r4, #20]
 800a64c:	444e      	add	r6, r9
 800a64e:	eba5 0509 	sub.w	r5, r5, r9
 800a652:	6026      	str	r6, [r4, #0]
 800a654:	60a5      	str	r5, [r4, #8]
 800a656:	463e      	mov	r6, r7
 800a658:	42be      	cmp	r6, r7
 800a65a:	d900      	bls.n	800a65e <__ssputs_r+0x72>
 800a65c:	463e      	mov	r6, r7
 800a65e:	6820      	ldr	r0, [r4, #0]
 800a660:	4632      	mov	r2, r6
 800a662:	4641      	mov	r1, r8
 800a664:	f000 f9d8 	bl	800aa18 <memmove>
 800a668:	68a3      	ldr	r3, [r4, #8]
 800a66a:	1b9b      	subs	r3, r3, r6
 800a66c:	60a3      	str	r3, [r4, #8]
 800a66e:	6823      	ldr	r3, [r4, #0]
 800a670:	4433      	add	r3, r6
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	2000      	movs	r0, #0
 800a676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a67a:	462a      	mov	r2, r5
 800a67c:	f000 fa31 	bl	800aae2 <_realloc_r>
 800a680:	4606      	mov	r6, r0
 800a682:	2800      	cmp	r0, #0
 800a684:	d1e0      	bne.n	800a648 <__ssputs_r+0x5c>
 800a686:	6921      	ldr	r1, [r4, #16]
 800a688:	4650      	mov	r0, sl
 800a68a:	f7ff fb2d 	bl	8009ce8 <_free_r>
 800a68e:	230c      	movs	r3, #12
 800a690:	f8ca 3000 	str.w	r3, [sl]
 800a694:	89a3      	ldrh	r3, [r4, #12]
 800a696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a69a:	81a3      	strh	r3, [r4, #12]
 800a69c:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a0:	e7e9      	b.n	800a676 <__ssputs_r+0x8a>
	...

0800a6a4 <_svfiprintf_r>:
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a8:	4698      	mov	r8, r3
 800a6aa:	898b      	ldrh	r3, [r1, #12]
 800a6ac:	061b      	lsls	r3, r3, #24
 800a6ae:	b09d      	sub	sp, #116	@ 0x74
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	d510      	bpl.n	800a6da <_svfiprintf_r+0x36>
 800a6b8:	690b      	ldr	r3, [r1, #16]
 800a6ba:	b973      	cbnz	r3, 800a6da <_svfiprintf_r+0x36>
 800a6bc:	2140      	movs	r1, #64	@ 0x40
 800a6be:	f7ff fb87 	bl	8009dd0 <_malloc_r>
 800a6c2:	6028      	str	r0, [r5, #0]
 800a6c4:	6128      	str	r0, [r5, #16]
 800a6c6:	b930      	cbnz	r0, 800a6d6 <_svfiprintf_r+0x32>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a6d0:	b01d      	add	sp, #116	@ 0x74
 800a6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d6:	2340      	movs	r3, #64	@ 0x40
 800a6d8:	616b      	str	r3, [r5, #20]
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6de:	2320      	movs	r3, #32
 800a6e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6e8:	2330      	movs	r3, #48	@ 0x30
 800a6ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a888 <_svfiprintf_r+0x1e4>
 800a6ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6f2:	f04f 0901 	mov.w	r9, #1
 800a6f6:	4623      	mov	r3, r4
 800a6f8:	469a      	mov	sl, r3
 800a6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6fe:	b10a      	cbz	r2, 800a704 <_svfiprintf_r+0x60>
 800a700:	2a25      	cmp	r2, #37	@ 0x25
 800a702:	d1f9      	bne.n	800a6f8 <_svfiprintf_r+0x54>
 800a704:	ebba 0b04 	subs.w	fp, sl, r4
 800a708:	d00b      	beq.n	800a722 <_svfiprintf_r+0x7e>
 800a70a:	465b      	mov	r3, fp
 800a70c:	4622      	mov	r2, r4
 800a70e:	4629      	mov	r1, r5
 800a710:	4638      	mov	r0, r7
 800a712:	f7ff ff6b 	bl	800a5ec <__ssputs_r>
 800a716:	3001      	adds	r0, #1
 800a718:	f000 80a7 	beq.w	800a86a <_svfiprintf_r+0x1c6>
 800a71c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a71e:	445a      	add	r2, fp
 800a720:	9209      	str	r2, [sp, #36]	@ 0x24
 800a722:	f89a 3000 	ldrb.w	r3, [sl]
 800a726:	2b00      	cmp	r3, #0
 800a728:	f000 809f 	beq.w	800a86a <_svfiprintf_r+0x1c6>
 800a72c:	2300      	movs	r3, #0
 800a72e:	f04f 32ff 	mov.w	r2, #4294967295
 800a732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a736:	f10a 0a01 	add.w	sl, sl, #1
 800a73a:	9304      	str	r3, [sp, #16]
 800a73c:	9307      	str	r3, [sp, #28]
 800a73e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a742:	931a      	str	r3, [sp, #104]	@ 0x68
 800a744:	4654      	mov	r4, sl
 800a746:	2205      	movs	r2, #5
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	484e      	ldr	r0, [pc, #312]	@ (800a888 <_svfiprintf_r+0x1e4>)
 800a74e:	f7f5 fd5f 	bl	8000210 <memchr>
 800a752:	9a04      	ldr	r2, [sp, #16]
 800a754:	b9d8      	cbnz	r0, 800a78e <_svfiprintf_r+0xea>
 800a756:	06d0      	lsls	r0, r2, #27
 800a758:	bf44      	itt	mi
 800a75a:	2320      	movmi	r3, #32
 800a75c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a760:	0711      	lsls	r1, r2, #28
 800a762:	bf44      	itt	mi
 800a764:	232b      	movmi	r3, #43	@ 0x2b
 800a766:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a76a:	f89a 3000 	ldrb.w	r3, [sl]
 800a76e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a770:	d015      	beq.n	800a79e <_svfiprintf_r+0xfa>
 800a772:	9a07      	ldr	r2, [sp, #28]
 800a774:	4654      	mov	r4, sl
 800a776:	2000      	movs	r0, #0
 800a778:	f04f 0c0a 	mov.w	ip, #10
 800a77c:	4621      	mov	r1, r4
 800a77e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a782:	3b30      	subs	r3, #48	@ 0x30
 800a784:	2b09      	cmp	r3, #9
 800a786:	d94b      	bls.n	800a820 <_svfiprintf_r+0x17c>
 800a788:	b1b0      	cbz	r0, 800a7b8 <_svfiprintf_r+0x114>
 800a78a:	9207      	str	r2, [sp, #28]
 800a78c:	e014      	b.n	800a7b8 <_svfiprintf_r+0x114>
 800a78e:	eba0 0308 	sub.w	r3, r0, r8
 800a792:	fa09 f303 	lsl.w	r3, r9, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	9304      	str	r3, [sp, #16]
 800a79a:	46a2      	mov	sl, r4
 800a79c:	e7d2      	b.n	800a744 <_svfiprintf_r+0xa0>
 800a79e:	9b03      	ldr	r3, [sp, #12]
 800a7a0:	1d19      	adds	r1, r3, #4
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	9103      	str	r1, [sp, #12]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	bfbb      	ittet	lt
 800a7aa:	425b      	neglt	r3, r3
 800a7ac:	f042 0202 	orrlt.w	r2, r2, #2
 800a7b0:	9307      	strge	r3, [sp, #28]
 800a7b2:	9307      	strlt	r3, [sp, #28]
 800a7b4:	bfb8      	it	lt
 800a7b6:	9204      	strlt	r2, [sp, #16]
 800a7b8:	7823      	ldrb	r3, [r4, #0]
 800a7ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7bc:	d10a      	bne.n	800a7d4 <_svfiprintf_r+0x130>
 800a7be:	7863      	ldrb	r3, [r4, #1]
 800a7c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7c2:	d132      	bne.n	800a82a <_svfiprintf_r+0x186>
 800a7c4:	9b03      	ldr	r3, [sp, #12]
 800a7c6:	1d1a      	adds	r2, r3, #4
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	9203      	str	r2, [sp, #12]
 800a7cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7d0:	3402      	adds	r4, #2
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a898 <_svfiprintf_r+0x1f4>
 800a7d8:	7821      	ldrb	r1, [r4, #0]
 800a7da:	2203      	movs	r2, #3
 800a7dc:	4650      	mov	r0, sl
 800a7de:	f7f5 fd17 	bl	8000210 <memchr>
 800a7e2:	b138      	cbz	r0, 800a7f4 <_svfiprintf_r+0x150>
 800a7e4:	9b04      	ldr	r3, [sp, #16]
 800a7e6:	eba0 000a 	sub.w	r0, r0, sl
 800a7ea:	2240      	movs	r2, #64	@ 0x40
 800a7ec:	4082      	lsls	r2, r0
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	3401      	adds	r4, #1
 800a7f2:	9304      	str	r3, [sp, #16]
 800a7f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f8:	4824      	ldr	r0, [pc, #144]	@ (800a88c <_svfiprintf_r+0x1e8>)
 800a7fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7fe:	2206      	movs	r2, #6
 800a800:	f7f5 fd06 	bl	8000210 <memchr>
 800a804:	2800      	cmp	r0, #0
 800a806:	d036      	beq.n	800a876 <_svfiprintf_r+0x1d2>
 800a808:	4b21      	ldr	r3, [pc, #132]	@ (800a890 <_svfiprintf_r+0x1ec>)
 800a80a:	bb1b      	cbnz	r3, 800a854 <_svfiprintf_r+0x1b0>
 800a80c:	9b03      	ldr	r3, [sp, #12]
 800a80e:	3307      	adds	r3, #7
 800a810:	f023 0307 	bic.w	r3, r3, #7
 800a814:	3308      	adds	r3, #8
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a81a:	4433      	add	r3, r6
 800a81c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a81e:	e76a      	b.n	800a6f6 <_svfiprintf_r+0x52>
 800a820:	fb0c 3202 	mla	r2, ip, r2, r3
 800a824:	460c      	mov	r4, r1
 800a826:	2001      	movs	r0, #1
 800a828:	e7a8      	b.n	800a77c <_svfiprintf_r+0xd8>
 800a82a:	2300      	movs	r3, #0
 800a82c:	3401      	adds	r4, #1
 800a82e:	9305      	str	r3, [sp, #20]
 800a830:	4619      	mov	r1, r3
 800a832:	f04f 0c0a 	mov.w	ip, #10
 800a836:	4620      	mov	r0, r4
 800a838:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a83c:	3a30      	subs	r2, #48	@ 0x30
 800a83e:	2a09      	cmp	r2, #9
 800a840:	d903      	bls.n	800a84a <_svfiprintf_r+0x1a6>
 800a842:	2b00      	cmp	r3, #0
 800a844:	d0c6      	beq.n	800a7d4 <_svfiprintf_r+0x130>
 800a846:	9105      	str	r1, [sp, #20]
 800a848:	e7c4      	b.n	800a7d4 <_svfiprintf_r+0x130>
 800a84a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a84e:	4604      	mov	r4, r0
 800a850:	2301      	movs	r3, #1
 800a852:	e7f0      	b.n	800a836 <_svfiprintf_r+0x192>
 800a854:	ab03      	add	r3, sp, #12
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	462a      	mov	r2, r5
 800a85a:	4b0e      	ldr	r3, [pc, #56]	@ (800a894 <_svfiprintf_r+0x1f0>)
 800a85c:	a904      	add	r1, sp, #16
 800a85e:	4638      	mov	r0, r7
 800a860:	f7fd fe52 	bl	8008508 <_printf_float>
 800a864:	1c42      	adds	r2, r0, #1
 800a866:	4606      	mov	r6, r0
 800a868:	d1d6      	bne.n	800a818 <_svfiprintf_r+0x174>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	065b      	lsls	r3, r3, #25
 800a86e:	f53f af2d 	bmi.w	800a6cc <_svfiprintf_r+0x28>
 800a872:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a874:	e72c      	b.n	800a6d0 <_svfiprintf_r+0x2c>
 800a876:	ab03      	add	r3, sp, #12
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	462a      	mov	r2, r5
 800a87c:	4b05      	ldr	r3, [pc, #20]	@ (800a894 <_svfiprintf_r+0x1f0>)
 800a87e:	a904      	add	r1, sp, #16
 800a880:	4638      	mov	r0, r7
 800a882:	f7fe f8d9 	bl	8008a38 <_printf_i>
 800a886:	e7ed      	b.n	800a864 <_svfiprintf_r+0x1c0>
 800a888:	0800c420 	.word	0x0800c420
 800a88c:	0800c42a 	.word	0x0800c42a
 800a890:	08008509 	.word	0x08008509
 800a894:	0800a5ed 	.word	0x0800a5ed
 800a898:	0800c426 	.word	0x0800c426

0800a89c <__sflush_r>:
 800a89c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8a4:	0716      	lsls	r6, r2, #28
 800a8a6:	4605      	mov	r5, r0
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	d454      	bmi.n	800a956 <__sflush_r+0xba>
 800a8ac:	684b      	ldr	r3, [r1, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dc02      	bgt.n	800a8b8 <__sflush_r+0x1c>
 800a8b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	dd48      	ble.n	800a94a <__sflush_r+0xae>
 800a8b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8ba:	2e00      	cmp	r6, #0
 800a8bc:	d045      	beq.n	800a94a <__sflush_r+0xae>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8c4:	682f      	ldr	r7, [r5, #0]
 800a8c6:	6a21      	ldr	r1, [r4, #32]
 800a8c8:	602b      	str	r3, [r5, #0]
 800a8ca:	d030      	beq.n	800a92e <__sflush_r+0x92>
 800a8cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8ce:	89a3      	ldrh	r3, [r4, #12]
 800a8d0:	0759      	lsls	r1, r3, #29
 800a8d2:	d505      	bpl.n	800a8e0 <__sflush_r+0x44>
 800a8d4:	6863      	ldr	r3, [r4, #4]
 800a8d6:	1ad2      	subs	r2, r2, r3
 800a8d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8da:	b10b      	cbz	r3, 800a8e0 <__sflush_r+0x44>
 800a8dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8de:	1ad2      	subs	r2, r2, r3
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8e4:	6a21      	ldr	r1, [r4, #32]
 800a8e6:	4628      	mov	r0, r5
 800a8e8:	47b0      	blx	r6
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	d106      	bne.n	800a8fe <__sflush_r+0x62>
 800a8f0:	6829      	ldr	r1, [r5, #0]
 800a8f2:	291d      	cmp	r1, #29
 800a8f4:	d82b      	bhi.n	800a94e <__sflush_r+0xb2>
 800a8f6:	4a2a      	ldr	r2, [pc, #168]	@ (800a9a0 <__sflush_r+0x104>)
 800a8f8:	410a      	asrs	r2, r1
 800a8fa:	07d6      	lsls	r6, r2, #31
 800a8fc:	d427      	bmi.n	800a94e <__sflush_r+0xb2>
 800a8fe:	2200      	movs	r2, #0
 800a900:	6062      	str	r2, [r4, #4]
 800a902:	04d9      	lsls	r1, r3, #19
 800a904:	6922      	ldr	r2, [r4, #16]
 800a906:	6022      	str	r2, [r4, #0]
 800a908:	d504      	bpl.n	800a914 <__sflush_r+0x78>
 800a90a:	1c42      	adds	r2, r0, #1
 800a90c:	d101      	bne.n	800a912 <__sflush_r+0x76>
 800a90e:	682b      	ldr	r3, [r5, #0]
 800a910:	b903      	cbnz	r3, 800a914 <__sflush_r+0x78>
 800a912:	6560      	str	r0, [r4, #84]	@ 0x54
 800a914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a916:	602f      	str	r7, [r5, #0]
 800a918:	b1b9      	cbz	r1, 800a94a <__sflush_r+0xae>
 800a91a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a91e:	4299      	cmp	r1, r3
 800a920:	d002      	beq.n	800a928 <__sflush_r+0x8c>
 800a922:	4628      	mov	r0, r5
 800a924:	f7ff f9e0 	bl	8009ce8 <_free_r>
 800a928:	2300      	movs	r3, #0
 800a92a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a92c:	e00d      	b.n	800a94a <__sflush_r+0xae>
 800a92e:	2301      	movs	r3, #1
 800a930:	4628      	mov	r0, r5
 800a932:	47b0      	blx	r6
 800a934:	4602      	mov	r2, r0
 800a936:	1c50      	adds	r0, r2, #1
 800a938:	d1c9      	bne.n	800a8ce <__sflush_r+0x32>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d0c6      	beq.n	800a8ce <__sflush_r+0x32>
 800a940:	2b1d      	cmp	r3, #29
 800a942:	d001      	beq.n	800a948 <__sflush_r+0xac>
 800a944:	2b16      	cmp	r3, #22
 800a946:	d11e      	bne.n	800a986 <__sflush_r+0xea>
 800a948:	602f      	str	r7, [r5, #0]
 800a94a:	2000      	movs	r0, #0
 800a94c:	e022      	b.n	800a994 <__sflush_r+0xf8>
 800a94e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a952:	b21b      	sxth	r3, r3
 800a954:	e01b      	b.n	800a98e <__sflush_r+0xf2>
 800a956:	690f      	ldr	r7, [r1, #16]
 800a958:	2f00      	cmp	r7, #0
 800a95a:	d0f6      	beq.n	800a94a <__sflush_r+0xae>
 800a95c:	0793      	lsls	r3, r2, #30
 800a95e:	680e      	ldr	r6, [r1, #0]
 800a960:	bf08      	it	eq
 800a962:	694b      	ldreq	r3, [r1, #20]
 800a964:	600f      	str	r7, [r1, #0]
 800a966:	bf18      	it	ne
 800a968:	2300      	movne	r3, #0
 800a96a:	eba6 0807 	sub.w	r8, r6, r7
 800a96e:	608b      	str	r3, [r1, #8]
 800a970:	f1b8 0f00 	cmp.w	r8, #0
 800a974:	dde9      	ble.n	800a94a <__sflush_r+0xae>
 800a976:	6a21      	ldr	r1, [r4, #32]
 800a978:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a97a:	4643      	mov	r3, r8
 800a97c:	463a      	mov	r2, r7
 800a97e:	4628      	mov	r0, r5
 800a980:	47b0      	blx	r6
 800a982:	2800      	cmp	r0, #0
 800a984:	dc08      	bgt.n	800a998 <__sflush_r+0xfc>
 800a986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a98a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a98e:	81a3      	strh	r3, [r4, #12]
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a998:	4407      	add	r7, r0
 800a99a:	eba8 0800 	sub.w	r8, r8, r0
 800a99e:	e7e7      	b.n	800a970 <__sflush_r+0xd4>
 800a9a0:	dfbffffe 	.word	0xdfbffffe

0800a9a4 <_fflush_r>:
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	690b      	ldr	r3, [r1, #16]
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	b913      	cbnz	r3, 800a9b4 <_fflush_r+0x10>
 800a9ae:	2500      	movs	r5, #0
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	bd38      	pop	{r3, r4, r5, pc}
 800a9b4:	b118      	cbz	r0, 800a9be <_fflush_r+0x1a>
 800a9b6:	6a03      	ldr	r3, [r0, #32]
 800a9b8:	b90b      	cbnz	r3, 800a9be <_fflush_r+0x1a>
 800a9ba:	f7fe f9e9 	bl	8008d90 <__sinit>
 800a9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0f3      	beq.n	800a9ae <_fflush_r+0xa>
 800a9c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9c8:	07d0      	lsls	r0, r2, #31
 800a9ca:	d404      	bmi.n	800a9d6 <_fflush_r+0x32>
 800a9cc:	0599      	lsls	r1, r3, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_fflush_r+0x32>
 800a9d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9d2:	f7fe fb1c 	bl	800900e <__retarget_lock_acquire_recursive>
 800a9d6:	4628      	mov	r0, r5
 800a9d8:	4621      	mov	r1, r4
 800a9da:	f7ff ff5f 	bl	800a89c <__sflush_r>
 800a9de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9e0:	07da      	lsls	r2, r3, #31
 800a9e2:	4605      	mov	r5, r0
 800a9e4:	d4e4      	bmi.n	800a9b0 <_fflush_r+0xc>
 800a9e6:	89a3      	ldrh	r3, [r4, #12]
 800a9e8:	059b      	lsls	r3, r3, #22
 800a9ea:	d4e1      	bmi.n	800a9b0 <_fflush_r+0xc>
 800a9ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9ee:	f7fe fb0f 	bl	8009010 <__retarget_lock_release_recursive>
 800a9f2:	e7dd      	b.n	800a9b0 <_fflush_r+0xc>

0800a9f4 <fiprintf>:
 800a9f4:	b40e      	push	{r1, r2, r3}
 800a9f6:	b503      	push	{r0, r1, lr}
 800a9f8:	4601      	mov	r1, r0
 800a9fa:	ab03      	add	r3, sp, #12
 800a9fc:	4805      	ldr	r0, [pc, #20]	@ (800aa14 <fiprintf+0x20>)
 800a9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa02:	6800      	ldr	r0, [r0, #0]
 800aa04:	9301      	str	r3, [sp, #4]
 800aa06:	f000 f8d1 	bl	800abac <_vfiprintf_r>
 800aa0a:	b002      	add	sp, #8
 800aa0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa10:	b003      	add	sp, #12
 800aa12:	4770      	bx	lr
 800aa14:	20004e8c 	.word	0x20004e8c

0800aa18 <memmove>:
 800aa18:	4288      	cmp	r0, r1
 800aa1a:	b510      	push	{r4, lr}
 800aa1c:	eb01 0402 	add.w	r4, r1, r2
 800aa20:	d902      	bls.n	800aa28 <memmove+0x10>
 800aa22:	4284      	cmp	r4, r0
 800aa24:	4623      	mov	r3, r4
 800aa26:	d807      	bhi.n	800aa38 <memmove+0x20>
 800aa28:	1e43      	subs	r3, r0, #1
 800aa2a:	42a1      	cmp	r1, r4
 800aa2c:	d008      	beq.n	800aa40 <memmove+0x28>
 800aa2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa36:	e7f8      	b.n	800aa2a <memmove+0x12>
 800aa38:	4402      	add	r2, r0
 800aa3a:	4601      	mov	r1, r0
 800aa3c:	428a      	cmp	r2, r1
 800aa3e:	d100      	bne.n	800aa42 <memmove+0x2a>
 800aa40:	bd10      	pop	{r4, pc}
 800aa42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa4a:	e7f7      	b.n	800aa3c <memmove+0x24>

0800aa4c <_sbrk_r>:
 800aa4c:	b538      	push	{r3, r4, r5, lr}
 800aa4e:	4d06      	ldr	r5, [pc, #24]	@ (800aa68 <_sbrk_r+0x1c>)
 800aa50:	2300      	movs	r3, #0
 800aa52:	4604      	mov	r4, r0
 800aa54:	4608      	mov	r0, r1
 800aa56:	602b      	str	r3, [r5, #0]
 800aa58:	f7f8 ff22 	bl	80038a0 <_sbrk>
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	d102      	bne.n	800aa66 <_sbrk_r+0x1a>
 800aa60:	682b      	ldr	r3, [r5, #0]
 800aa62:	b103      	cbz	r3, 800aa66 <_sbrk_r+0x1a>
 800aa64:	6023      	str	r3, [r4, #0]
 800aa66:	bd38      	pop	{r3, r4, r5, pc}
 800aa68:	200067bc 	.word	0x200067bc

0800aa6c <memcpy>:
 800aa6c:	440a      	add	r2, r1
 800aa6e:	4291      	cmp	r1, r2
 800aa70:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa74:	d100      	bne.n	800aa78 <memcpy+0xc>
 800aa76:	4770      	bx	lr
 800aa78:	b510      	push	{r4, lr}
 800aa7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa82:	4291      	cmp	r1, r2
 800aa84:	d1f9      	bne.n	800aa7a <memcpy+0xe>
 800aa86:	bd10      	pop	{r4, pc}

0800aa88 <abort>:
 800aa88:	b508      	push	{r3, lr}
 800aa8a:	2006      	movs	r0, #6
 800aa8c:	f000 fa62 	bl	800af54 <raise>
 800aa90:	2001      	movs	r0, #1
 800aa92:	f7f8 fe8d 	bl	80037b0 <_exit>

0800aa96 <_calloc_r>:
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	fba1 5402 	umull	r5, r4, r1, r2
 800aa9c:	b93c      	cbnz	r4, 800aaae <_calloc_r+0x18>
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7ff f996 	bl	8009dd0 <_malloc_r>
 800aaa4:	4606      	mov	r6, r0
 800aaa6:	b928      	cbnz	r0, 800aab4 <_calloc_r+0x1e>
 800aaa8:	2600      	movs	r6, #0
 800aaaa:	4630      	mov	r0, r6
 800aaac:	bd70      	pop	{r4, r5, r6, pc}
 800aaae:	220c      	movs	r2, #12
 800aab0:	6002      	str	r2, [r0, #0]
 800aab2:	e7f9      	b.n	800aaa8 <_calloc_r+0x12>
 800aab4:	462a      	mov	r2, r5
 800aab6:	4621      	mov	r1, r4
 800aab8:	f7fe fa03 	bl	8008ec2 <memset>
 800aabc:	e7f5      	b.n	800aaaa <_calloc_r+0x14>

0800aabe <__ascii_mbtowc>:
 800aabe:	b082      	sub	sp, #8
 800aac0:	b901      	cbnz	r1, 800aac4 <__ascii_mbtowc+0x6>
 800aac2:	a901      	add	r1, sp, #4
 800aac4:	b142      	cbz	r2, 800aad8 <__ascii_mbtowc+0x1a>
 800aac6:	b14b      	cbz	r3, 800aadc <__ascii_mbtowc+0x1e>
 800aac8:	7813      	ldrb	r3, [r2, #0]
 800aaca:	600b      	str	r3, [r1, #0]
 800aacc:	7812      	ldrb	r2, [r2, #0]
 800aace:	1e10      	subs	r0, r2, #0
 800aad0:	bf18      	it	ne
 800aad2:	2001      	movne	r0, #1
 800aad4:	b002      	add	sp, #8
 800aad6:	4770      	bx	lr
 800aad8:	4610      	mov	r0, r2
 800aada:	e7fb      	b.n	800aad4 <__ascii_mbtowc+0x16>
 800aadc:	f06f 0001 	mvn.w	r0, #1
 800aae0:	e7f8      	b.n	800aad4 <__ascii_mbtowc+0x16>

0800aae2 <_realloc_r>:
 800aae2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aae6:	4680      	mov	r8, r0
 800aae8:	4615      	mov	r5, r2
 800aaea:	460c      	mov	r4, r1
 800aaec:	b921      	cbnz	r1, 800aaf8 <_realloc_r+0x16>
 800aaee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf2:	4611      	mov	r1, r2
 800aaf4:	f7ff b96c 	b.w	8009dd0 <_malloc_r>
 800aaf8:	b92a      	cbnz	r2, 800ab06 <_realloc_r+0x24>
 800aafa:	f7ff f8f5 	bl	8009ce8 <_free_r>
 800aafe:	2400      	movs	r4, #0
 800ab00:	4620      	mov	r0, r4
 800ab02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab06:	f000 fa41 	bl	800af8c <_malloc_usable_size_r>
 800ab0a:	4285      	cmp	r5, r0
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	d802      	bhi.n	800ab16 <_realloc_r+0x34>
 800ab10:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ab14:	d8f4      	bhi.n	800ab00 <_realloc_r+0x1e>
 800ab16:	4629      	mov	r1, r5
 800ab18:	4640      	mov	r0, r8
 800ab1a:	f7ff f959 	bl	8009dd0 <_malloc_r>
 800ab1e:	4607      	mov	r7, r0
 800ab20:	2800      	cmp	r0, #0
 800ab22:	d0ec      	beq.n	800aafe <_realloc_r+0x1c>
 800ab24:	42b5      	cmp	r5, r6
 800ab26:	462a      	mov	r2, r5
 800ab28:	4621      	mov	r1, r4
 800ab2a:	bf28      	it	cs
 800ab2c:	4632      	movcs	r2, r6
 800ab2e:	f7ff ff9d 	bl	800aa6c <memcpy>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4640      	mov	r0, r8
 800ab36:	f7ff f8d7 	bl	8009ce8 <_free_r>
 800ab3a:	463c      	mov	r4, r7
 800ab3c:	e7e0      	b.n	800ab00 <_realloc_r+0x1e>

0800ab3e <__ascii_wctomb>:
 800ab3e:	4603      	mov	r3, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	b141      	cbz	r1, 800ab56 <__ascii_wctomb+0x18>
 800ab44:	2aff      	cmp	r2, #255	@ 0xff
 800ab46:	d904      	bls.n	800ab52 <__ascii_wctomb+0x14>
 800ab48:	228a      	movs	r2, #138	@ 0x8a
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab50:	4770      	bx	lr
 800ab52:	700a      	strb	r2, [r1, #0]
 800ab54:	2001      	movs	r0, #1
 800ab56:	4770      	bx	lr

0800ab58 <__sfputc_r>:
 800ab58:	6893      	ldr	r3, [r2, #8]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	b410      	push	{r4}
 800ab60:	6093      	str	r3, [r2, #8]
 800ab62:	da08      	bge.n	800ab76 <__sfputc_r+0x1e>
 800ab64:	6994      	ldr	r4, [r2, #24]
 800ab66:	42a3      	cmp	r3, r4
 800ab68:	db01      	blt.n	800ab6e <__sfputc_r+0x16>
 800ab6a:	290a      	cmp	r1, #10
 800ab6c:	d103      	bne.n	800ab76 <__sfputc_r+0x1e>
 800ab6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab72:	f000 b933 	b.w	800addc <__swbuf_r>
 800ab76:	6813      	ldr	r3, [r2, #0]
 800ab78:	1c58      	adds	r0, r3, #1
 800ab7a:	6010      	str	r0, [r2, #0]
 800ab7c:	7019      	strb	r1, [r3, #0]
 800ab7e:	4608      	mov	r0, r1
 800ab80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab84:	4770      	bx	lr

0800ab86 <__sfputs_r>:
 800ab86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab88:	4606      	mov	r6, r0
 800ab8a:	460f      	mov	r7, r1
 800ab8c:	4614      	mov	r4, r2
 800ab8e:	18d5      	adds	r5, r2, r3
 800ab90:	42ac      	cmp	r4, r5
 800ab92:	d101      	bne.n	800ab98 <__sfputs_r+0x12>
 800ab94:	2000      	movs	r0, #0
 800ab96:	e007      	b.n	800aba8 <__sfputs_r+0x22>
 800ab98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab9c:	463a      	mov	r2, r7
 800ab9e:	4630      	mov	r0, r6
 800aba0:	f7ff ffda 	bl	800ab58 <__sfputc_r>
 800aba4:	1c43      	adds	r3, r0, #1
 800aba6:	d1f3      	bne.n	800ab90 <__sfputs_r+0xa>
 800aba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abac <_vfiprintf_r>:
 800abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	460d      	mov	r5, r1
 800abb2:	b09d      	sub	sp, #116	@ 0x74
 800abb4:	4614      	mov	r4, r2
 800abb6:	4698      	mov	r8, r3
 800abb8:	4606      	mov	r6, r0
 800abba:	b118      	cbz	r0, 800abc4 <_vfiprintf_r+0x18>
 800abbc:	6a03      	ldr	r3, [r0, #32]
 800abbe:	b90b      	cbnz	r3, 800abc4 <_vfiprintf_r+0x18>
 800abc0:	f7fe f8e6 	bl	8008d90 <__sinit>
 800abc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abc6:	07d9      	lsls	r1, r3, #31
 800abc8:	d405      	bmi.n	800abd6 <_vfiprintf_r+0x2a>
 800abca:	89ab      	ldrh	r3, [r5, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d402      	bmi.n	800abd6 <_vfiprintf_r+0x2a>
 800abd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abd2:	f7fe fa1c 	bl	800900e <__retarget_lock_acquire_recursive>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	071b      	lsls	r3, r3, #28
 800abda:	d501      	bpl.n	800abe0 <_vfiprintf_r+0x34>
 800abdc:	692b      	ldr	r3, [r5, #16]
 800abde:	b99b      	cbnz	r3, 800ac08 <_vfiprintf_r+0x5c>
 800abe0:	4629      	mov	r1, r5
 800abe2:	4630      	mov	r0, r6
 800abe4:	f000 f938 	bl	800ae58 <__swsetup_r>
 800abe8:	b170      	cbz	r0, 800ac08 <_vfiprintf_r+0x5c>
 800abea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abec:	07dc      	lsls	r4, r3, #31
 800abee:	d504      	bpl.n	800abfa <_vfiprintf_r+0x4e>
 800abf0:	f04f 30ff 	mov.w	r0, #4294967295
 800abf4:	b01d      	add	sp, #116	@ 0x74
 800abf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abfa:	89ab      	ldrh	r3, [r5, #12]
 800abfc:	0598      	lsls	r0, r3, #22
 800abfe:	d4f7      	bmi.n	800abf0 <_vfiprintf_r+0x44>
 800ac00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac02:	f7fe fa05 	bl	8009010 <__retarget_lock_release_recursive>
 800ac06:	e7f3      	b.n	800abf0 <_vfiprintf_r+0x44>
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac0c:	2320      	movs	r3, #32
 800ac0e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac12:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac16:	2330      	movs	r3, #48	@ 0x30
 800ac18:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800adc8 <_vfiprintf_r+0x21c>
 800ac1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac20:	f04f 0901 	mov.w	r9, #1
 800ac24:	4623      	mov	r3, r4
 800ac26:	469a      	mov	sl, r3
 800ac28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac2c:	b10a      	cbz	r2, 800ac32 <_vfiprintf_r+0x86>
 800ac2e:	2a25      	cmp	r2, #37	@ 0x25
 800ac30:	d1f9      	bne.n	800ac26 <_vfiprintf_r+0x7a>
 800ac32:	ebba 0b04 	subs.w	fp, sl, r4
 800ac36:	d00b      	beq.n	800ac50 <_vfiprintf_r+0xa4>
 800ac38:	465b      	mov	r3, fp
 800ac3a:	4622      	mov	r2, r4
 800ac3c:	4629      	mov	r1, r5
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ffa1 	bl	800ab86 <__sfputs_r>
 800ac44:	3001      	adds	r0, #1
 800ac46:	f000 80a7 	beq.w	800ad98 <_vfiprintf_r+0x1ec>
 800ac4a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac4c:	445a      	add	r2, fp
 800ac4e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac50:	f89a 3000 	ldrb.w	r3, [sl]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 809f 	beq.w	800ad98 <_vfiprintf_r+0x1ec>
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac64:	f10a 0a01 	add.w	sl, sl, #1
 800ac68:	9304      	str	r3, [sp, #16]
 800ac6a:	9307      	str	r3, [sp, #28]
 800ac6c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac70:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac72:	4654      	mov	r4, sl
 800ac74:	2205      	movs	r2, #5
 800ac76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7a:	4853      	ldr	r0, [pc, #332]	@ (800adc8 <_vfiprintf_r+0x21c>)
 800ac7c:	f7f5 fac8 	bl	8000210 <memchr>
 800ac80:	9a04      	ldr	r2, [sp, #16]
 800ac82:	b9d8      	cbnz	r0, 800acbc <_vfiprintf_r+0x110>
 800ac84:	06d1      	lsls	r1, r2, #27
 800ac86:	bf44      	itt	mi
 800ac88:	2320      	movmi	r3, #32
 800ac8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac8e:	0713      	lsls	r3, r2, #28
 800ac90:	bf44      	itt	mi
 800ac92:	232b      	movmi	r3, #43	@ 0x2b
 800ac94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac98:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac9e:	d015      	beq.n	800accc <_vfiprintf_r+0x120>
 800aca0:	9a07      	ldr	r2, [sp, #28]
 800aca2:	4654      	mov	r4, sl
 800aca4:	2000      	movs	r0, #0
 800aca6:	f04f 0c0a 	mov.w	ip, #10
 800acaa:	4621      	mov	r1, r4
 800acac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acb0:	3b30      	subs	r3, #48	@ 0x30
 800acb2:	2b09      	cmp	r3, #9
 800acb4:	d94b      	bls.n	800ad4e <_vfiprintf_r+0x1a2>
 800acb6:	b1b0      	cbz	r0, 800ace6 <_vfiprintf_r+0x13a>
 800acb8:	9207      	str	r2, [sp, #28]
 800acba:	e014      	b.n	800ace6 <_vfiprintf_r+0x13a>
 800acbc:	eba0 0308 	sub.w	r3, r0, r8
 800acc0:	fa09 f303 	lsl.w	r3, r9, r3
 800acc4:	4313      	orrs	r3, r2
 800acc6:	9304      	str	r3, [sp, #16]
 800acc8:	46a2      	mov	sl, r4
 800acca:	e7d2      	b.n	800ac72 <_vfiprintf_r+0xc6>
 800accc:	9b03      	ldr	r3, [sp, #12]
 800acce:	1d19      	adds	r1, r3, #4
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	9103      	str	r1, [sp, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bfbb      	ittet	lt
 800acd8:	425b      	neglt	r3, r3
 800acda:	f042 0202 	orrlt.w	r2, r2, #2
 800acde:	9307      	strge	r3, [sp, #28]
 800ace0:	9307      	strlt	r3, [sp, #28]
 800ace2:	bfb8      	it	lt
 800ace4:	9204      	strlt	r2, [sp, #16]
 800ace6:	7823      	ldrb	r3, [r4, #0]
 800ace8:	2b2e      	cmp	r3, #46	@ 0x2e
 800acea:	d10a      	bne.n	800ad02 <_vfiprintf_r+0x156>
 800acec:	7863      	ldrb	r3, [r4, #1]
 800acee:	2b2a      	cmp	r3, #42	@ 0x2a
 800acf0:	d132      	bne.n	800ad58 <_vfiprintf_r+0x1ac>
 800acf2:	9b03      	ldr	r3, [sp, #12]
 800acf4:	1d1a      	adds	r2, r3, #4
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	9203      	str	r2, [sp, #12]
 800acfa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acfe:	3402      	adds	r4, #2
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800add8 <_vfiprintf_r+0x22c>
 800ad06:	7821      	ldrb	r1, [r4, #0]
 800ad08:	2203      	movs	r2, #3
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	f7f5 fa80 	bl	8000210 <memchr>
 800ad10:	b138      	cbz	r0, 800ad22 <_vfiprintf_r+0x176>
 800ad12:	9b04      	ldr	r3, [sp, #16]
 800ad14:	eba0 000a 	sub.w	r0, r0, sl
 800ad18:	2240      	movs	r2, #64	@ 0x40
 800ad1a:	4082      	lsls	r2, r0
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	3401      	adds	r4, #1
 800ad20:	9304      	str	r3, [sp, #16]
 800ad22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad26:	4829      	ldr	r0, [pc, #164]	@ (800adcc <_vfiprintf_r+0x220>)
 800ad28:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad2c:	2206      	movs	r2, #6
 800ad2e:	f7f5 fa6f 	bl	8000210 <memchr>
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d03f      	beq.n	800adb6 <_vfiprintf_r+0x20a>
 800ad36:	4b26      	ldr	r3, [pc, #152]	@ (800add0 <_vfiprintf_r+0x224>)
 800ad38:	bb1b      	cbnz	r3, 800ad82 <_vfiprintf_r+0x1d6>
 800ad3a:	9b03      	ldr	r3, [sp, #12]
 800ad3c:	3307      	adds	r3, #7
 800ad3e:	f023 0307 	bic.w	r3, r3, #7
 800ad42:	3308      	adds	r3, #8
 800ad44:	9303      	str	r3, [sp, #12]
 800ad46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad48:	443b      	add	r3, r7
 800ad4a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad4c:	e76a      	b.n	800ac24 <_vfiprintf_r+0x78>
 800ad4e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad52:	460c      	mov	r4, r1
 800ad54:	2001      	movs	r0, #1
 800ad56:	e7a8      	b.n	800acaa <_vfiprintf_r+0xfe>
 800ad58:	2300      	movs	r3, #0
 800ad5a:	3401      	adds	r4, #1
 800ad5c:	9305      	str	r3, [sp, #20]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	f04f 0c0a 	mov.w	ip, #10
 800ad64:	4620      	mov	r0, r4
 800ad66:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad6a:	3a30      	subs	r2, #48	@ 0x30
 800ad6c:	2a09      	cmp	r2, #9
 800ad6e:	d903      	bls.n	800ad78 <_vfiprintf_r+0x1cc>
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d0c6      	beq.n	800ad02 <_vfiprintf_r+0x156>
 800ad74:	9105      	str	r1, [sp, #20]
 800ad76:	e7c4      	b.n	800ad02 <_vfiprintf_r+0x156>
 800ad78:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad7c:	4604      	mov	r4, r0
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e7f0      	b.n	800ad64 <_vfiprintf_r+0x1b8>
 800ad82:	ab03      	add	r3, sp, #12
 800ad84:	9300      	str	r3, [sp, #0]
 800ad86:	462a      	mov	r2, r5
 800ad88:	4b12      	ldr	r3, [pc, #72]	@ (800add4 <_vfiprintf_r+0x228>)
 800ad8a:	a904      	add	r1, sp, #16
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f7fd fbbb 	bl	8008508 <_printf_float>
 800ad92:	4607      	mov	r7, r0
 800ad94:	1c78      	adds	r0, r7, #1
 800ad96:	d1d6      	bne.n	800ad46 <_vfiprintf_r+0x19a>
 800ad98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad9a:	07d9      	lsls	r1, r3, #31
 800ad9c:	d405      	bmi.n	800adaa <_vfiprintf_r+0x1fe>
 800ad9e:	89ab      	ldrh	r3, [r5, #12]
 800ada0:	059a      	lsls	r2, r3, #22
 800ada2:	d402      	bmi.n	800adaa <_vfiprintf_r+0x1fe>
 800ada4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ada6:	f7fe f933 	bl	8009010 <__retarget_lock_release_recursive>
 800adaa:	89ab      	ldrh	r3, [r5, #12]
 800adac:	065b      	lsls	r3, r3, #25
 800adae:	f53f af1f 	bmi.w	800abf0 <_vfiprintf_r+0x44>
 800adb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adb4:	e71e      	b.n	800abf4 <_vfiprintf_r+0x48>
 800adb6:	ab03      	add	r3, sp, #12
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	462a      	mov	r2, r5
 800adbc:	4b05      	ldr	r3, [pc, #20]	@ (800add4 <_vfiprintf_r+0x228>)
 800adbe:	a904      	add	r1, sp, #16
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7fd fe39 	bl	8008a38 <_printf_i>
 800adc6:	e7e4      	b.n	800ad92 <_vfiprintf_r+0x1e6>
 800adc8:	0800c420 	.word	0x0800c420
 800adcc:	0800c42a 	.word	0x0800c42a
 800add0:	08008509 	.word	0x08008509
 800add4:	0800ab87 	.word	0x0800ab87
 800add8:	0800c426 	.word	0x0800c426

0800addc <__swbuf_r>:
 800addc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adde:	460e      	mov	r6, r1
 800ade0:	4614      	mov	r4, r2
 800ade2:	4605      	mov	r5, r0
 800ade4:	b118      	cbz	r0, 800adee <__swbuf_r+0x12>
 800ade6:	6a03      	ldr	r3, [r0, #32]
 800ade8:	b90b      	cbnz	r3, 800adee <__swbuf_r+0x12>
 800adea:	f7fd ffd1 	bl	8008d90 <__sinit>
 800adee:	69a3      	ldr	r3, [r4, #24]
 800adf0:	60a3      	str	r3, [r4, #8]
 800adf2:	89a3      	ldrh	r3, [r4, #12]
 800adf4:	071a      	lsls	r2, r3, #28
 800adf6:	d501      	bpl.n	800adfc <__swbuf_r+0x20>
 800adf8:	6923      	ldr	r3, [r4, #16]
 800adfa:	b943      	cbnz	r3, 800ae0e <__swbuf_r+0x32>
 800adfc:	4621      	mov	r1, r4
 800adfe:	4628      	mov	r0, r5
 800ae00:	f000 f82a 	bl	800ae58 <__swsetup_r>
 800ae04:	b118      	cbz	r0, 800ae0e <__swbuf_r+0x32>
 800ae06:	f04f 37ff 	mov.w	r7, #4294967295
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae0e:	6823      	ldr	r3, [r4, #0]
 800ae10:	6922      	ldr	r2, [r4, #16]
 800ae12:	1a98      	subs	r0, r3, r2
 800ae14:	6963      	ldr	r3, [r4, #20]
 800ae16:	b2f6      	uxtb	r6, r6
 800ae18:	4283      	cmp	r3, r0
 800ae1a:	4637      	mov	r7, r6
 800ae1c:	dc05      	bgt.n	800ae2a <__swbuf_r+0x4e>
 800ae1e:	4621      	mov	r1, r4
 800ae20:	4628      	mov	r0, r5
 800ae22:	f7ff fdbf 	bl	800a9a4 <_fflush_r>
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d1ed      	bne.n	800ae06 <__swbuf_r+0x2a>
 800ae2a:	68a3      	ldr	r3, [r4, #8]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	60a3      	str	r3, [r4, #8]
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	1c5a      	adds	r2, r3, #1
 800ae34:	6022      	str	r2, [r4, #0]
 800ae36:	701e      	strb	r6, [r3, #0]
 800ae38:	6962      	ldr	r2, [r4, #20]
 800ae3a:	1c43      	adds	r3, r0, #1
 800ae3c:	429a      	cmp	r2, r3
 800ae3e:	d004      	beq.n	800ae4a <__swbuf_r+0x6e>
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	07db      	lsls	r3, r3, #31
 800ae44:	d5e1      	bpl.n	800ae0a <__swbuf_r+0x2e>
 800ae46:	2e0a      	cmp	r6, #10
 800ae48:	d1df      	bne.n	800ae0a <__swbuf_r+0x2e>
 800ae4a:	4621      	mov	r1, r4
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	f7ff fda9 	bl	800a9a4 <_fflush_r>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	d0d9      	beq.n	800ae0a <__swbuf_r+0x2e>
 800ae56:	e7d6      	b.n	800ae06 <__swbuf_r+0x2a>

0800ae58 <__swsetup_r>:
 800ae58:	b538      	push	{r3, r4, r5, lr}
 800ae5a:	4b29      	ldr	r3, [pc, #164]	@ (800af00 <__swsetup_r+0xa8>)
 800ae5c:	4605      	mov	r5, r0
 800ae5e:	6818      	ldr	r0, [r3, #0]
 800ae60:	460c      	mov	r4, r1
 800ae62:	b118      	cbz	r0, 800ae6c <__swsetup_r+0x14>
 800ae64:	6a03      	ldr	r3, [r0, #32]
 800ae66:	b90b      	cbnz	r3, 800ae6c <__swsetup_r+0x14>
 800ae68:	f7fd ff92 	bl	8008d90 <__sinit>
 800ae6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae70:	0719      	lsls	r1, r3, #28
 800ae72:	d422      	bmi.n	800aeba <__swsetup_r+0x62>
 800ae74:	06da      	lsls	r2, r3, #27
 800ae76:	d407      	bmi.n	800ae88 <__swsetup_r+0x30>
 800ae78:	2209      	movs	r2, #9
 800ae7a:	602a      	str	r2, [r5, #0]
 800ae7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae80:	81a3      	strh	r3, [r4, #12]
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	e033      	b.n	800aef0 <__swsetup_r+0x98>
 800ae88:	0758      	lsls	r0, r3, #29
 800ae8a:	d512      	bpl.n	800aeb2 <__swsetup_r+0x5a>
 800ae8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae8e:	b141      	cbz	r1, 800aea2 <__swsetup_r+0x4a>
 800ae90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae94:	4299      	cmp	r1, r3
 800ae96:	d002      	beq.n	800ae9e <__swsetup_r+0x46>
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f7fe ff25 	bl	8009ce8 <_free_r>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	6363      	str	r3, [r4, #52]	@ 0x34
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	6063      	str	r3, [r4, #4]
 800aeae:	6923      	ldr	r3, [r4, #16]
 800aeb0:	6023      	str	r3, [r4, #0]
 800aeb2:	89a3      	ldrh	r3, [r4, #12]
 800aeb4:	f043 0308 	orr.w	r3, r3, #8
 800aeb8:	81a3      	strh	r3, [r4, #12]
 800aeba:	6923      	ldr	r3, [r4, #16]
 800aebc:	b94b      	cbnz	r3, 800aed2 <__swsetup_r+0x7a>
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aec4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aec8:	d003      	beq.n	800aed2 <__swsetup_r+0x7a>
 800aeca:	4621      	mov	r1, r4
 800aecc:	4628      	mov	r0, r5
 800aece:	f000 f88b 	bl	800afe8 <__smakebuf_r>
 800aed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed6:	f013 0201 	ands.w	r2, r3, #1
 800aeda:	d00a      	beq.n	800aef2 <__swsetup_r+0x9a>
 800aedc:	2200      	movs	r2, #0
 800aede:	60a2      	str	r2, [r4, #8]
 800aee0:	6962      	ldr	r2, [r4, #20]
 800aee2:	4252      	negs	r2, r2
 800aee4:	61a2      	str	r2, [r4, #24]
 800aee6:	6922      	ldr	r2, [r4, #16]
 800aee8:	b942      	cbnz	r2, 800aefc <__swsetup_r+0xa4>
 800aeea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aeee:	d1c5      	bne.n	800ae7c <__swsetup_r+0x24>
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
 800aef2:	0799      	lsls	r1, r3, #30
 800aef4:	bf58      	it	pl
 800aef6:	6962      	ldrpl	r2, [r4, #20]
 800aef8:	60a2      	str	r2, [r4, #8]
 800aefa:	e7f4      	b.n	800aee6 <__swsetup_r+0x8e>
 800aefc:	2000      	movs	r0, #0
 800aefe:	e7f7      	b.n	800aef0 <__swsetup_r+0x98>
 800af00:	20004e8c 	.word	0x20004e8c

0800af04 <_raise_r>:
 800af04:	291f      	cmp	r1, #31
 800af06:	b538      	push	{r3, r4, r5, lr}
 800af08:	4605      	mov	r5, r0
 800af0a:	460c      	mov	r4, r1
 800af0c:	d904      	bls.n	800af18 <_raise_r+0x14>
 800af0e:	2316      	movs	r3, #22
 800af10:	6003      	str	r3, [r0, #0]
 800af12:	f04f 30ff 	mov.w	r0, #4294967295
 800af16:	bd38      	pop	{r3, r4, r5, pc}
 800af18:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af1a:	b112      	cbz	r2, 800af22 <_raise_r+0x1e>
 800af1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af20:	b94b      	cbnz	r3, 800af36 <_raise_r+0x32>
 800af22:	4628      	mov	r0, r5
 800af24:	f000 f830 	bl	800af88 <_getpid_r>
 800af28:	4622      	mov	r2, r4
 800af2a:	4601      	mov	r1, r0
 800af2c:	4628      	mov	r0, r5
 800af2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af32:	f000 b817 	b.w	800af64 <_kill_r>
 800af36:	2b01      	cmp	r3, #1
 800af38:	d00a      	beq.n	800af50 <_raise_r+0x4c>
 800af3a:	1c59      	adds	r1, r3, #1
 800af3c:	d103      	bne.n	800af46 <_raise_r+0x42>
 800af3e:	2316      	movs	r3, #22
 800af40:	6003      	str	r3, [r0, #0]
 800af42:	2001      	movs	r0, #1
 800af44:	e7e7      	b.n	800af16 <_raise_r+0x12>
 800af46:	2100      	movs	r1, #0
 800af48:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af4c:	4620      	mov	r0, r4
 800af4e:	4798      	blx	r3
 800af50:	2000      	movs	r0, #0
 800af52:	e7e0      	b.n	800af16 <_raise_r+0x12>

0800af54 <raise>:
 800af54:	4b02      	ldr	r3, [pc, #8]	@ (800af60 <raise+0xc>)
 800af56:	4601      	mov	r1, r0
 800af58:	6818      	ldr	r0, [r3, #0]
 800af5a:	f7ff bfd3 	b.w	800af04 <_raise_r>
 800af5e:	bf00      	nop
 800af60:	20004e8c 	.word	0x20004e8c

0800af64 <_kill_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d07      	ldr	r5, [pc, #28]	@ (800af84 <_kill_r+0x20>)
 800af68:	2300      	movs	r3, #0
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	4611      	mov	r1, r2
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	f7f8 fc0d 	bl	8003790 <_kill>
 800af76:	1c43      	adds	r3, r0, #1
 800af78:	d102      	bne.n	800af80 <_kill_r+0x1c>
 800af7a:	682b      	ldr	r3, [r5, #0]
 800af7c:	b103      	cbz	r3, 800af80 <_kill_r+0x1c>
 800af7e:	6023      	str	r3, [r4, #0]
 800af80:	bd38      	pop	{r3, r4, r5, pc}
 800af82:	bf00      	nop
 800af84:	200067bc 	.word	0x200067bc

0800af88 <_getpid_r>:
 800af88:	f7f8 bbfa 	b.w	8003780 <_getpid>

0800af8c <_malloc_usable_size_r>:
 800af8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af90:	1f18      	subs	r0, r3, #4
 800af92:	2b00      	cmp	r3, #0
 800af94:	bfbc      	itt	lt
 800af96:	580b      	ldrlt	r3, [r1, r0]
 800af98:	18c0      	addlt	r0, r0, r3
 800af9a:	4770      	bx	lr

0800af9c <__swhatbuf_r>:
 800af9c:	b570      	push	{r4, r5, r6, lr}
 800af9e:	460c      	mov	r4, r1
 800afa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa4:	2900      	cmp	r1, #0
 800afa6:	b096      	sub	sp, #88	@ 0x58
 800afa8:	4615      	mov	r5, r2
 800afaa:	461e      	mov	r6, r3
 800afac:	da0d      	bge.n	800afca <__swhatbuf_r+0x2e>
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afb4:	f04f 0100 	mov.w	r1, #0
 800afb8:	bf14      	ite	ne
 800afba:	2340      	movne	r3, #64	@ 0x40
 800afbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afc0:	2000      	movs	r0, #0
 800afc2:	6031      	str	r1, [r6, #0]
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	b016      	add	sp, #88	@ 0x58
 800afc8:	bd70      	pop	{r4, r5, r6, pc}
 800afca:	466a      	mov	r2, sp
 800afcc:	f000 f848 	bl	800b060 <_fstat_r>
 800afd0:	2800      	cmp	r0, #0
 800afd2:	dbec      	blt.n	800afae <__swhatbuf_r+0x12>
 800afd4:	9901      	ldr	r1, [sp, #4]
 800afd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afde:	4259      	negs	r1, r3
 800afe0:	4159      	adcs	r1, r3
 800afe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afe6:	e7eb      	b.n	800afc0 <__swhatbuf_r+0x24>

0800afe8 <__smakebuf_r>:
 800afe8:	898b      	ldrh	r3, [r1, #12]
 800afea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afec:	079d      	lsls	r5, r3, #30
 800afee:	4606      	mov	r6, r0
 800aff0:	460c      	mov	r4, r1
 800aff2:	d507      	bpl.n	800b004 <__smakebuf_r+0x1c>
 800aff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aff8:	6023      	str	r3, [r4, #0]
 800affa:	6123      	str	r3, [r4, #16]
 800affc:	2301      	movs	r3, #1
 800affe:	6163      	str	r3, [r4, #20]
 800b000:	b003      	add	sp, #12
 800b002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b004:	ab01      	add	r3, sp, #4
 800b006:	466a      	mov	r2, sp
 800b008:	f7ff ffc8 	bl	800af9c <__swhatbuf_r>
 800b00c:	9f00      	ldr	r7, [sp, #0]
 800b00e:	4605      	mov	r5, r0
 800b010:	4639      	mov	r1, r7
 800b012:	4630      	mov	r0, r6
 800b014:	f7fe fedc 	bl	8009dd0 <_malloc_r>
 800b018:	b948      	cbnz	r0, 800b02e <__smakebuf_r+0x46>
 800b01a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b01e:	059a      	lsls	r2, r3, #22
 800b020:	d4ee      	bmi.n	800b000 <__smakebuf_r+0x18>
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	f043 0302 	orr.w	r3, r3, #2
 800b02a:	81a3      	strh	r3, [r4, #12]
 800b02c:	e7e2      	b.n	800aff4 <__smakebuf_r+0xc>
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	6020      	str	r0, [r4, #0]
 800b032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b036:	81a3      	strh	r3, [r4, #12]
 800b038:	9b01      	ldr	r3, [sp, #4]
 800b03a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b03e:	b15b      	cbz	r3, 800b058 <__smakebuf_r+0x70>
 800b040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b044:	4630      	mov	r0, r6
 800b046:	f000 f81d 	bl	800b084 <_isatty_r>
 800b04a:	b128      	cbz	r0, 800b058 <__smakebuf_r+0x70>
 800b04c:	89a3      	ldrh	r3, [r4, #12]
 800b04e:	f023 0303 	bic.w	r3, r3, #3
 800b052:	f043 0301 	orr.w	r3, r3, #1
 800b056:	81a3      	strh	r3, [r4, #12]
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	431d      	orrs	r5, r3
 800b05c:	81a5      	strh	r5, [r4, #12]
 800b05e:	e7cf      	b.n	800b000 <__smakebuf_r+0x18>

0800b060 <_fstat_r>:
 800b060:	b538      	push	{r3, r4, r5, lr}
 800b062:	4d07      	ldr	r5, [pc, #28]	@ (800b080 <_fstat_r+0x20>)
 800b064:	2300      	movs	r3, #0
 800b066:	4604      	mov	r4, r0
 800b068:	4608      	mov	r0, r1
 800b06a:	4611      	mov	r1, r2
 800b06c:	602b      	str	r3, [r5, #0]
 800b06e:	f7f8 fbef 	bl	8003850 <_fstat>
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	d102      	bne.n	800b07c <_fstat_r+0x1c>
 800b076:	682b      	ldr	r3, [r5, #0]
 800b078:	b103      	cbz	r3, 800b07c <_fstat_r+0x1c>
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	bd38      	pop	{r3, r4, r5, pc}
 800b07e:	bf00      	nop
 800b080:	200067bc 	.word	0x200067bc

0800b084 <_isatty_r>:
 800b084:	b538      	push	{r3, r4, r5, lr}
 800b086:	4d06      	ldr	r5, [pc, #24]	@ (800b0a0 <_isatty_r+0x1c>)
 800b088:	2300      	movs	r3, #0
 800b08a:	4604      	mov	r4, r0
 800b08c:	4608      	mov	r0, r1
 800b08e:	602b      	str	r3, [r5, #0]
 800b090:	f7f8 fbee 	bl	8003870 <_isatty>
 800b094:	1c43      	adds	r3, r0, #1
 800b096:	d102      	bne.n	800b09e <_isatty_r+0x1a>
 800b098:	682b      	ldr	r3, [r5, #0]
 800b09a:	b103      	cbz	r3, 800b09e <_isatty_r+0x1a>
 800b09c:	6023      	str	r3, [r4, #0]
 800b09e:	bd38      	pop	{r3, r4, r5, pc}
 800b0a0:	200067bc 	.word	0x200067bc

0800b0a4 <pow>:
 800b0a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0a6:	ed2d 8b02 	vpush	{d8}
 800b0aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b0ae:	eef0 8a60 	vmov.f32	s17, s1
 800b0b2:	ec55 4b11 	vmov	r4, r5, d1
 800b0b6:	f000 f873 	bl	800b1a0 <__ieee754_pow>
 800b0ba:	4622      	mov	r2, r4
 800b0bc:	462b      	mov	r3, r5
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	ec57 6b10 	vmov	r6, r7, d0
 800b0c6:	f7f5 fd51 	bl	8000b6c <__aeabi_dcmpun>
 800b0ca:	2800      	cmp	r0, #0
 800b0cc:	d13b      	bne.n	800b146 <pow+0xa2>
 800b0ce:	ec51 0b18 	vmov	r0, r1, d8
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f7f5 fd17 	bl	8000b08 <__aeabi_dcmpeq>
 800b0da:	b1b8      	cbz	r0, 800b10c <pow+0x68>
 800b0dc:	2200      	movs	r2, #0
 800b0de:	2300      	movs	r3, #0
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	4629      	mov	r1, r5
 800b0e4:	f7f5 fd10 	bl	8000b08 <__aeabi_dcmpeq>
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d146      	bne.n	800b17a <pow+0xd6>
 800b0ec:	ec45 4b10 	vmov	d0, r4, r5
 800b0f0:	f000 f848 	bl	800b184 <finite>
 800b0f4:	b338      	cbz	r0, 800b146 <pow+0xa2>
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	f7f5 fd0d 	bl	8000b1c <__aeabi_dcmplt>
 800b102:	b300      	cbz	r0, 800b146 <pow+0xa2>
 800b104:	f7fd ff58 	bl	8008fb8 <__errno>
 800b108:	2322      	movs	r3, #34	@ 0x22
 800b10a:	e01b      	b.n	800b144 <pow+0xa0>
 800b10c:	ec47 6b10 	vmov	d0, r6, r7
 800b110:	f000 f838 	bl	800b184 <finite>
 800b114:	b9e0      	cbnz	r0, 800b150 <pow+0xac>
 800b116:	eeb0 0a48 	vmov.f32	s0, s16
 800b11a:	eef0 0a68 	vmov.f32	s1, s17
 800b11e:	f000 f831 	bl	800b184 <finite>
 800b122:	b1a8      	cbz	r0, 800b150 <pow+0xac>
 800b124:	ec45 4b10 	vmov	d0, r4, r5
 800b128:	f000 f82c 	bl	800b184 <finite>
 800b12c:	b180      	cbz	r0, 800b150 <pow+0xac>
 800b12e:	4632      	mov	r2, r6
 800b130:	463b      	mov	r3, r7
 800b132:	4630      	mov	r0, r6
 800b134:	4639      	mov	r1, r7
 800b136:	f7f5 fd19 	bl	8000b6c <__aeabi_dcmpun>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d0e2      	beq.n	800b104 <pow+0x60>
 800b13e:	f7fd ff3b 	bl	8008fb8 <__errno>
 800b142:	2321      	movs	r3, #33	@ 0x21
 800b144:	6003      	str	r3, [r0, #0]
 800b146:	ecbd 8b02 	vpop	{d8}
 800b14a:	ec47 6b10 	vmov	d0, r6, r7
 800b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b150:	2200      	movs	r2, #0
 800b152:	2300      	movs	r3, #0
 800b154:	4630      	mov	r0, r6
 800b156:	4639      	mov	r1, r7
 800b158:	f7f5 fcd6 	bl	8000b08 <__aeabi_dcmpeq>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	d0f2      	beq.n	800b146 <pow+0xa2>
 800b160:	eeb0 0a48 	vmov.f32	s0, s16
 800b164:	eef0 0a68 	vmov.f32	s1, s17
 800b168:	f000 f80c 	bl	800b184 <finite>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d0ea      	beq.n	800b146 <pow+0xa2>
 800b170:	ec45 4b10 	vmov	d0, r4, r5
 800b174:	f000 f806 	bl	800b184 <finite>
 800b178:	e7c3      	b.n	800b102 <pow+0x5e>
 800b17a:	4f01      	ldr	r7, [pc, #4]	@ (800b180 <pow+0xdc>)
 800b17c:	2600      	movs	r6, #0
 800b17e:	e7e2      	b.n	800b146 <pow+0xa2>
 800b180:	3ff00000 	.word	0x3ff00000

0800b184 <finite>:
 800b184:	b082      	sub	sp, #8
 800b186:	ed8d 0b00 	vstr	d0, [sp]
 800b18a:	9801      	ldr	r0, [sp, #4]
 800b18c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b190:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b194:	0fc0      	lsrs	r0, r0, #31
 800b196:	b002      	add	sp, #8
 800b198:	4770      	bx	lr
 800b19a:	0000      	movs	r0, r0
 800b19c:	0000      	movs	r0, r0
	...

0800b1a0 <__ieee754_pow>:
 800b1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a4:	b091      	sub	sp, #68	@ 0x44
 800b1a6:	ed8d 1b00 	vstr	d1, [sp]
 800b1aa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b1ae:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b1b2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b1b6:	ec57 6b10 	vmov	r6, r7, d0
 800b1ba:	d113      	bne.n	800b1e4 <__ieee754_pow+0x44>
 800b1bc:	19b3      	adds	r3, r6, r6
 800b1be:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b1c2:	4152      	adcs	r2, r2
 800b1c4:	4298      	cmp	r0, r3
 800b1c6:	4b98      	ldr	r3, [pc, #608]	@ (800b428 <__ieee754_pow+0x288>)
 800b1c8:	4193      	sbcs	r3, r2
 800b1ca:	f080 84ea 	bcs.w	800bba2 <__ieee754_pow+0xa02>
 800b1ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	f7f5 f879 	bl	80002cc <__adddf3>
 800b1da:	ec41 0b10 	vmov	d0, r0, r1
 800b1de:	b011      	add	sp, #68	@ 0x44
 800b1e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e4:	4a91      	ldr	r2, [pc, #580]	@ (800b42c <__ieee754_pow+0x28c>)
 800b1e6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b1ea:	4590      	cmp	r8, r2
 800b1ec:	463d      	mov	r5, r7
 800b1ee:	4633      	mov	r3, r6
 800b1f0:	d806      	bhi.n	800b200 <__ieee754_pow+0x60>
 800b1f2:	d101      	bne.n	800b1f8 <__ieee754_pow+0x58>
 800b1f4:	2e00      	cmp	r6, #0
 800b1f6:	d1ea      	bne.n	800b1ce <__ieee754_pow+0x2e>
 800b1f8:	4592      	cmp	sl, r2
 800b1fa:	d801      	bhi.n	800b200 <__ieee754_pow+0x60>
 800b1fc:	d10e      	bne.n	800b21c <__ieee754_pow+0x7c>
 800b1fe:	b169      	cbz	r1, 800b21c <__ieee754_pow+0x7c>
 800b200:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b204:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b208:	431d      	orrs	r5, r3
 800b20a:	d1e0      	bne.n	800b1ce <__ieee754_pow+0x2e>
 800b20c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b210:	18db      	adds	r3, r3, r3
 800b212:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b216:	4152      	adcs	r2, r2
 800b218:	429d      	cmp	r5, r3
 800b21a:	e7d4      	b.n	800b1c6 <__ieee754_pow+0x26>
 800b21c:	2d00      	cmp	r5, #0
 800b21e:	46c3      	mov	fp, r8
 800b220:	da3a      	bge.n	800b298 <__ieee754_pow+0xf8>
 800b222:	4a83      	ldr	r2, [pc, #524]	@ (800b430 <__ieee754_pow+0x290>)
 800b224:	4592      	cmp	sl, r2
 800b226:	d84d      	bhi.n	800b2c4 <__ieee754_pow+0x124>
 800b228:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b22c:	4592      	cmp	sl, r2
 800b22e:	f240 84c7 	bls.w	800bbc0 <__ieee754_pow+0xa20>
 800b232:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b236:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b23a:	2a14      	cmp	r2, #20
 800b23c:	dd0f      	ble.n	800b25e <__ieee754_pow+0xbe>
 800b23e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b242:	fa21 f402 	lsr.w	r4, r1, r2
 800b246:	fa04 f202 	lsl.w	r2, r4, r2
 800b24a:	428a      	cmp	r2, r1
 800b24c:	f040 84b8 	bne.w	800bbc0 <__ieee754_pow+0xa20>
 800b250:	f004 0401 	and.w	r4, r4, #1
 800b254:	f1c4 0402 	rsb	r4, r4, #2
 800b258:	2900      	cmp	r1, #0
 800b25a:	d158      	bne.n	800b30e <__ieee754_pow+0x16e>
 800b25c:	e00e      	b.n	800b27c <__ieee754_pow+0xdc>
 800b25e:	2900      	cmp	r1, #0
 800b260:	d154      	bne.n	800b30c <__ieee754_pow+0x16c>
 800b262:	f1c2 0214 	rsb	r2, r2, #20
 800b266:	fa4a f402 	asr.w	r4, sl, r2
 800b26a:	fa04 f202 	lsl.w	r2, r4, r2
 800b26e:	4552      	cmp	r2, sl
 800b270:	f040 84a3 	bne.w	800bbba <__ieee754_pow+0xa1a>
 800b274:	f004 0401 	and.w	r4, r4, #1
 800b278:	f1c4 0402 	rsb	r4, r4, #2
 800b27c:	4a6d      	ldr	r2, [pc, #436]	@ (800b434 <__ieee754_pow+0x294>)
 800b27e:	4592      	cmp	sl, r2
 800b280:	d12e      	bne.n	800b2e0 <__ieee754_pow+0x140>
 800b282:	f1b9 0f00 	cmp.w	r9, #0
 800b286:	f280 8494 	bge.w	800bbb2 <__ieee754_pow+0xa12>
 800b28a:	496a      	ldr	r1, [pc, #424]	@ (800b434 <__ieee754_pow+0x294>)
 800b28c:	4632      	mov	r2, r6
 800b28e:	463b      	mov	r3, r7
 800b290:	2000      	movs	r0, #0
 800b292:	f7f5 fafb 	bl	800088c <__aeabi_ddiv>
 800b296:	e7a0      	b.n	800b1da <__ieee754_pow+0x3a>
 800b298:	2400      	movs	r4, #0
 800b29a:	bbc1      	cbnz	r1, 800b30e <__ieee754_pow+0x16e>
 800b29c:	4a63      	ldr	r2, [pc, #396]	@ (800b42c <__ieee754_pow+0x28c>)
 800b29e:	4592      	cmp	sl, r2
 800b2a0:	d1ec      	bne.n	800b27c <__ieee754_pow+0xdc>
 800b2a2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b2a6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b2aa:	431a      	orrs	r2, r3
 800b2ac:	f000 8479 	beq.w	800bba2 <__ieee754_pow+0xa02>
 800b2b0:	4b61      	ldr	r3, [pc, #388]	@ (800b438 <__ieee754_pow+0x298>)
 800b2b2:	4598      	cmp	r8, r3
 800b2b4:	d908      	bls.n	800b2c8 <__ieee754_pow+0x128>
 800b2b6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ba:	f2c0 8476 	blt.w	800bbaa <__ieee754_pow+0xa0a>
 800b2be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2c2:	e78a      	b.n	800b1da <__ieee754_pow+0x3a>
 800b2c4:	2402      	movs	r4, #2
 800b2c6:	e7e8      	b.n	800b29a <__ieee754_pow+0xfa>
 800b2c8:	f1b9 0f00 	cmp.w	r9, #0
 800b2cc:	f04f 0000 	mov.w	r0, #0
 800b2d0:	f04f 0100 	mov.w	r1, #0
 800b2d4:	da81      	bge.n	800b1da <__ieee754_pow+0x3a>
 800b2d6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b2de:	e77c      	b.n	800b1da <__ieee754_pow+0x3a>
 800b2e0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b2e4:	d106      	bne.n	800b2f4 <__ieee754_pow+0x154>
 800b2e6:	4632      	mov	r2, r6
 800b2e8:	463b      	mov	r3, r7
 800b2ea:	4630      	mov	r0, r6
 800b2ec:	4639      	mov	r1, r7
 800b2ee:	f7f5 f9a3 	bl	8000638 <__aeabi_dmul>
 800b2f2:	e772      	b.n	800b1da <__ieee754_pow+0x3a>
 800b2f4:	4a51      	ldr	r2, [pc, #324]	@ (800b43c <__ieee754_pow+0x29c>)
 800b2f6:	4591      	cmp	r9, r2
 800b2f8:	d109      	bne.n	800b30e <__ieee754_pow+0x16e>
 800b2fa:	2d00      	cmp	r5, #0
 800b2fc:	db07      	blt.n	800b30e <__ieee754_pow+0x16e>
 800b2fe:	ec47 6b10 	vmov	d0, r6, r7
 800b302:	b011      	add	sp, #68	@ 0x44
 800b304:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b308:	f000 bd52 	b.w	800bdb0 <__ieee754_sqrt>
 800b30c:	2400      	movs	r4, #0
 800b30e:	ec47 6b10 	vmov	d0, r6, r7
 800b312:	9302      	str	r3, [sp, #8]
 800b314:	f000 fc88 	bl	800bc28 <fabs>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	ec51 0b10 	vmov	r0, r1, d0
 800b31e:	bb53      	cbnz	r3, 800b376 <__ieee754_pow+0x1d6>
 800b320:	4b44      	ldr	r3, [pc, #272]	@ (800b434 <__ieee754_pow+0x294>)
 800b322:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b326:	429a      	cmp	r2, r3
 800b328:	d002      	beq.n	800b330 <__ieee754_pow+0x190>
 800b32a:	f1b8 0f00 	cmp.w	r8, #0
 800b32e:	d122      	bne.n	800b376 <__ieee754_pow+0x1d6>
 800b330:	f1b9 0f00 	cmp.w	r9, #0
 800b334:	da05      	bge.n	800b342 <__ieee754_pow+0x1a2>
 800b336:	4602      	mov	r2, r0
 800b338:	460b      	mov	r3, r1
 800b33a:	2000      	movs	r0, #0
 800b33c:	493d      	ldr	r1, [pc, #244]	@ (800b434 <__ieee754_pow+0x294>)
 800b33e:	f7f5 faa5 	bl	800088c <__aeabi_ddiv>
 800b342:	2d00      	cmp	r5, #0
 800b344:	f6bf af49 	bge.w	800b1da <__ieee754_pow+0x3a>
 800b348:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b34c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b350:	ea58 0804 	orrs.w	r8, r8, r4
 800b354:	d108      	bne.n	800b368 <__ieee754_pow+0x1c8>
 800b356:	4602      	mov	r2, r0
 800b358:	460b      	mov	r3, r1
 800b35a:	4610      	mov	r0, r2
 800b35c:	4619      	mov	r1, r3
 800b35e:	f7f4 ffb3 	bl	80002c8 <__aeabi_dsub>
 800b362:	4602      	mov	r2, r0
 800b364:	460b      	mov	r3, r1
 800b366:	e794      	b.n	800b292 <__ieee754_pow+0xf2>
 800b368:	2c01      	cmp	r4, #1
 800b36a:	f47f af36 	bne.w	800b1da <__ieee754_pow+0x3a>
 800b36e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b372:	4619      	mov	r1, r3
 800b374:	e731      	b.n	800b1da <__ieee754_pow+0x3a>
 800b376:	0feb      	lsrs	r3, r5, #31
 800b378:	3b01      	subs	r3, #1
 800b37a:	ea53 0204 	orrs.w	r2, r3, r4
 800b37e:	d102      	bne.n	800b386 <__ieee754_pow+0x1e6>
 800b380:	4632      	mov	r2, r6
 800b382:	463b      	mov	r3, r7
 800b384:	e7e9      	b.n	800b35a <__ieee754_pow+0x1ba>
 800b386:	3c01      	subs	r4, #1
 800b388:	431c      	orrs	r4, r3
 800b38a:	d016      	beq.n	800b3ba <__ieee754_pow+0x21a>
 800b38c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b418 <__ieee754_pow+0x278>
 800b390:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b394:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b398:	f240 8112 	bls.w	800b5c0 <__ieee754_pow+0x420>
 800b39c:	4b28      	ldr	r3, [pc, #160]	@ (800b440 <__ieee754_pow+0x2a0>)
 800b39e:	459a      	cmp	sl, r3
 800b3a0:	4b25      	ldr	r3, [pc, #148]	@ (800b438 <__ieee754_pow+0x298>)
 800b3a2:	d916      	bls.n	800b3d2 <__ieee754_pow+0x232>
 800b3a4:	4598      	cmp	r8, r3
 800b3a6:	d80b      	bhi.n	800b3c0 <__ieee754_pow+0x220>
 800b3a8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ac:	da0b      	bge.n	800b3c6 <__ieee754_pow+0x226>
 800b3ae:	2000      	movs	r0, #0
 800b3b0:	b011      	add	sp, #68	@ 0x44
 800b3b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b6:	f000 bcf3 	b.w	800bda0 <__math_oflow>
 800b3ba:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b420 <__ieee754_pow+0x280>
 800b3be:	e7e7      	b.n	800b390 <__ieee754_pow+0x1f0>
 800b3c0:	f1b9 0f00 	cmp.w	r9, #0
 800b3c4:	dcf3      	bgt.n	800b3ae <__ieee754_pow+0x20e>
 800b3c6:	2000      	movs	r0, #0
 800b3c8:	b011      	add	sp, #68	@ 0x44
 800b3ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ce:	f000 bcdf 	b.w	800bd90 <__math_uflow>
 800b3d2:	4598      	cmp	r8, r3
 800b3d4:	d20c      	bcs.n	800b3f0 <__ieee754_pow+0x250>
 800b3d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2300      	movs	r3, #0
 800b3de:	f7f5 fb9d 	bl	8000b1c <__aeabi_dcmplt>
 800b3e2:	3800      	subs	r0, #0
 800b3e4:	bf18      	it	ne
 800b3e6:	2001      	movne	r0, #1
 800b3e8:	f1b9 0f00 	cmp.w	r9, #0
 800b3ec:	daec      	bge.n	800b3c8 <__ieee754_pow+0x228>
 800b3ee:	e7df      	b.n	800b3b0 <__ieee754_pow+0x210>
 800b3f0:	4b10      	ldr	r3, [pc, #64]	@ (800b434 <__ieee754_pow+0x294>)
 800b3f2:	4598      	cmp	r8, r3
 800b3f4:	f04f 0200 	mov.w	r2, #0
 800b3f8:	d924      	bls.n	800b444 <__ieee754_pow+0x2a4>
 800b3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3fe:	2300      	movs	r3, #0
 800b400:	f7f5 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 800b404:	3800      	subs	r0, #0
 800b406:	bf18      	it	ne
 800b408:	2001      	movne	r0, #1
 800b40a:	f1b9 0f00 	cmp.w	r9, #0
 800b40e:	dccf      	bgt.n	800b3b0 <__ieee754_pow+0x210>
 800b410:	e7da      	b.n	800b3c8 <__ieee754_pow+0x228>
 800b412:	bf00      	nop
 800b414:	f3af 8000 	nop.w
 800b418:	00000000 	.word	0x00000000
 800b41c:	3ff00000 	.word	0x3ff00000
 800b420:	00000000 	.word	0x00000000
 800b424:	bff00000 	.word	0xbff00000
 800b428:	fff00000 	.word	0xfff00000
 800b42c:	7ff00000 	.word	0x7ff00000
 800b430:	433fffff 	.word	0x433fffff
 800b434:	3ff00000 	.word	0x3ff00000
 800b438:	3fefffff 	.word	0x3fefffff
 800b43c:	3fe00000 	.word	0x3fe00000
 800b440:	43f00000 	.word	0x43f00000
 800b444:	4b5a      	ldr	r3, [pc, #360]	@ (800b5b0 <__ieee754_pow+0x410>)
 800b446:	f7f4 ff3f 	bl	80002c8 <__aeabi_dsub>
 800b44a:	a351      	add	r3, pc, #324	@ (adr r3, 800b590 <__ieee754_pow+0x3f0>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	4604      	mov	r4, r0
 800b452:	460d      	mov	r5, r1
 800b454:	f7f5 f8f0 	bl	8000638 <__aeabi_dmul>
 800b458:	a34f      	add	r3, pc, #316	@ (adr r3, 800b598 <__ieee754_pow+0x3f8>)
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	4606      	mov	r6, r0
 800b460:	460f      	mov	r7, r1
 800b462:	4620      	mov	r0, r4
 800b464:	4629      	mov	r1, r5
 800b466:	f7f5 f8e7 	bl	8000638 <__aeabi_dmul>
 800b46a:	4b52      	ldr	r3, [pc, #328]	@ (800b5b4 <__ieee754_pow+0x414>)
 800b46c:	4682      	mov	sl, r0
 800b46e:	468b      	mov	fp, r1
 800b470:	2200      	movs	r2, #0
 800b472:	4620      	mov	r0, r4
 800b474:	4629      	mov	r1, r5
 800b476:	f7f5 f8df 	bl	8000638 <__aeabi_dmul>
 800b47a:	4602      	mov	r2, r0
 800b47c:	460b      	mov	r3, r1
 800b47e:	a148      	add	r1, pc, #288	@ (adr r1, 800b5a0 <__ieee754_pow+0x400>)
 800b480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b484:	f7f4 ff20 	bl	80002c8 <__aeabi_dsub>
 800b488:	4622      	mov	r2, r4
 800b48a:	462b      	mov	r3, r5
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	4602      	mov	r2, r0
 800b492:	460b      	mov	r3, r1
 800b494:	2000      	movs	r0, #0
 800b496:	4948      	ldr	r1, [pc, #288]	@ (800b5b8 <__ieee754_pow+0x418>)
 800b498:	f7f4 ff16 	bl	80002c8 <__aeabi_dsub>
 800b49c:	4622      	mov	r2, r4
 800b49e:	4680      	mov	r8, r0
 800b4a0:	4689      	mov	r9, r1
 800b4a2:	462b      	mov	r3, r5
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f5 f8c6 	bl	8000638 <__aeabi_dmul>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	f7f5 f8c0 	bl	8000638 <__aeabi_dmul>
 800b4b8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b5a8 <__ieee754_pow+0x408>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f5 f8bb 	bl	8000638 <__aeabi_dmul>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	4650      	mov	r0, sl
 800b4c8:	4659      	mov	r1, fp
 800b4ca:	f7f4 fefd 	bl	80002c8 <__aeabi_dsub>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4680      	mov	r8, r0
 800b4d4:	4689      	mov	r9, r1
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	4639      	mov	r1, r7
 800b4da:	f7f4 fef7 	bl	80002cc <__adddf3>
 800b4de:	2400      	movs	r4, #0
 800b4e0:	4632      	mov	r2, r6
 800b4e2:	463b      	mov	r3, r7
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	460d      	mov	r5, r1
 800b4e8:	f7f4 feee 	bl	80002c8 <__aeabi_dsub>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4640      	mov	r0, r8
 800b4f2:	4649      	mov	r1, r9
 800b4f4:	f7f4 fee8 	bl	80002c8 <__aeabi_dsub>
 800b4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b500:	2300      	movs	r3, #0
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b508:	4606      	mov	r6, r0
 800b50a:	460f      	mov	r7, r1
 800b50c:	4652      	mov	r2, sl
 800b50e:	465b      	mov	r3, fp
 800b510:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b514:	f7f4 fed8 	bl	80002c8 <__aeabi_dsub>
 800b518:	4622      	mov	r2, r4
 800b51a:	462b      	mov	r3, r5
 800b51c:	f7f5 f88c 	bl	8000638 <__aeabi_dmul>
 800b520:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b524:	4680      	mov	r8, r0
 800b526:	4689      	mov	r9, r1
 800b528:	4630      	mov	r0, r6
 800b52a:	4639      	mov	r1, r7
 800b52c:	f7f5 f884 	bl	8000638 <__aeabi_dmul>
 800b530:	4602      	mov	r2, r0
 800b532:	460b      	mov	r3, r1
 800b534:	4640      	mov	r0, r8
 800b536:	4649      	mov	r1, r9
 800b538:	f7f4 fec8 	bl	80002cc <__adddf3>
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	4606      	mov	r6, r0
 800b542:	460f      	mov	r7, r1
 800b544:	4620      	mov	r0, r4
 800b546:	4629      	mov	r1, r5
 800b548:	f7f5 f876 	bl	8000638 <__aeabi_dmul>
 800b54c:	460b      	mov	r3, r1
 800b54e:	4602      	mov	r2, r0
 800b550:	4680      	mov	r8, r0
 800b552:	4689      	mov	r9, r1
 800b554:	4630      	mov	r0, r6
 800b556:	4639      	mov	r1, r7
 800b558:	f7f4 feb8 	bl	80002cc <__adddf3>
 800b55c:	4b17      	ldr	r3, [pc, #92]	@ (800b5bc <__ieee754_pow+0x41c>)
 800b55e:	4299      	cmp	r1, r3
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	468a      	mov	sl, r1
 800b566:	468b      	mov	fp, r1
 800b568:	f340 82ef 	ble.w	800bb4a <__ieee754_pow+0x9aa>
 800b56c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b570:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b574:	4303      	orrs	r3, r0
 800b576:	f000 81e8 	beq.w	800b94a <__ieee754_pow+0x7aa>
 800b57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b57e:	2200      	movs	r2, #0
 800b580:	2300      	movs	r3, #0
 800b582:	f7f5 facb 	bl	8000b1c <__aeabi_dcmplt>
 800b586:	3800      	subs	r0, #0
 800b588:	bf18      	it	ne
 800b58a:	2001      	movne	r0, #1
 800b58c:	e710      	b.n	800b3b0 <__ieee754_pow+0x210>
 800b58e:	bf00      	nop
 800b590:	60000000 	.word	0x60000000
 800b594:	3ff71547 	.word	0x3ff71547
 800b598:	f85ddf44 	.word	0xf85ddf44
 800b59c:	3e54ae0b 	.word	0x3e54ae0b
 800b5a0:	55555555 	.word	0x55555555
 800b5a4:	3fd55555 	.word	0x3fd55555
 800b5a8:	652b82fe 	.word	0x652b82fe
 800b5ac:	3ff71547 	.word	0x3ff71547
 800b5b0:	3ff00000 	.word	0x3ff00000
 800b5b4:	3fd00000 	.word	0x3fd00000
 800b5b8:	3fe00000 	.word	0x3fe00000
 800b5bc:	408fffff 	.word	0x408fffff
 800b5c0:	4bd5      	ldr	r3, [pc, #852]	@ (800b918 <__ieee754_pow+0x778>)
 800b5c2:	402b      	ands	r3, r5
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	b92b      	cbnz	r3, 800b5d4 <__ieee754_pow+0x434>
 800b5c8:	4bd4      	ldr	r3, [pc, #848]	@ (800b91c <__ieee754_pow+0x77c>)
 800b5ca:	f7f5 f835 	bl	8000638 <__aeabi_dmul>
 800b5ce:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b5d2:	468b      	mov	fp, r1
 800b5d4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b5d8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b5dc:	4413      	add	r3, r2
 800b5de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b5e0:	4bcf      	ldr	r3, [pc, #828]	@ (800b920 <__ieee754_pow+0x780>)
 800b5e2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b5e6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b5ea:	459b      	cmp	fp, r3
 800b5ec:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b5f0:	dd08      	ble.n	800b604 <__ieee754_pow+0x464>
 800b5f2:	4bcc      	ldr	r3, [pc, #816]	@ (800b924 <__ieee754_pow+0x784>)
 800b5f4:	459b      	cmp	fp, r3
 800b5f6:	f340 81a5 	ble.w	800b944 <__ieee754_pow+0x7a4>
 800b5fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800b600:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b604:	f04f 0a00 	mov.w	sl, #0
 800b608:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b60c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b60e:	4bc6      	ldr	r3, [pc, #792]	@ (800b928 <__ieee754_pow+0x788>)
 800b610:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b614:	ed93 7b00 	vldr	d7, [r3]
 800b618:	4629      	mov	r1, r5
 800b61a:	ec53 2b17 	vmov	r2, r3, d7
 800b61e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b622:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b626:	f7f4 fe4f 	bl	80002c8 <__aeabi_dsub>
 800b62a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b62e:	4606      	mov	r6, r0
 800b630:	460f      	mov	r7, r1
 800b632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b636:	f7f4 fe49 	bl	80002cc <__adddf3>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	2000      	movs	r0, #0
 800b640:	49ba      	ldr	r1, [pc, #744]	@ (800b92c <__ieee754_pow+0x78c>)
 800b642:	f7f5 f923 	bl	800088c <__aeabi_ddiv>
 800b646:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	f7f4 fff1 	bl	8000638 <__aeabi_dmul>
 800b656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b65a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b65e:	106d      	asrs	r5, r5, #1
 800b660:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b664:	f04f 0b00 	mov.w	fp, #0
 800b668:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b66c:	4661      	mov	r1, ip
 800b66e:	2200      	movs	r2, #0
 800b670:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b674:	4658      	mov	r0, fp
 800b676:	46e1      	mov	r9, ip
 800b678:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b67c:	4614      	mov	r4, r2
 800b67e:	461d      	mov	r5, r3
 800b680:	f7f4 ffda 	bl	8000638 <__aeabi_dmul>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4630      	mov	r0, r6
 800b68a:	4639      	mov	r1, r7
 800b68c:	f7f4 fe1c 	bl	80002c8 <__aeabi_dsub>
 800b690:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b694:	4606      	mov	r6, r0
 800b696:	460f      	mov	r7, r1
 800b698:	4620      	mov	r0, r4
 800b69a:	4629      	mov	r1, r5
 800b69c:	f7f4 fe14 	bl	80002c8 <__aeabi_dsub>
 800b6a0:	4602      	mov	r2, r0
 800b6a2:	460b      	mov	r3, r1
 800b6a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6a8:	f7f4 fe0e 	bl	80002c8 <__aeabi_dsub>
 800b6ac:	465a      	mov	r2, fp
 800b6ae:	464b      	mov	r3, r9
 800b6b0:	f7f4 ffc2 	bl	8000638 <__aeabi_dmul>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	f7f4 fe04 	bl	80002c8 <__aeabi_dsub>
 800b6c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6c4:	f7f4 ffb8 	bl	8000638 <__aeabi_dmul>
 800b6c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6d0:	4610      	mov	r0, r2
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	f7f4 ffb0 	bl	8000638 <__aeabi_dmul>
 800b6d8:	a37d      	add	r3, pc, #500	@ (adr r3, 800b8d0 <__ieee754_pow+0x730>)
 800b6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6de:	4604      	mov	r4, r0
 800b6e0:	460d      	mov	r5, r1
 800b6e2:	f7f4 ffa9 	bl	8000638 <__aeabi_dmul>
 800b6e6:	a37c      	add	r3, pc, #496	@ (adr r3, 800b8d8 <__ieee754_pow+0x738>)
 800b6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ec:	f7f4 fdee 	bl	80002cc <__adddf3>
 800b6f0:	4622      	mov	r2, r4
 800b6f2:	462b      	mov	r3, r5
 800b6f4:	f7f4 ffa0 	bl	8000638 <__aeabi_dmul>
 800b6f8:	a379      	add	r3, pc, #484	@ (adr r3, 800b8e0 <__ieee754_pow+0x740>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	f7f4 fde5 	bl	80002cc <__adddf3>
 800b702:	4622      	mov	r2, r4
 800b704:	462b      	mov	r3, r5
 800b706:	f7f4 ff97 	bl	8000638 <__aeabi_dmul>
 800b70a:	a377      	add	r3, pc, #476	@ (adr r3, 800b8e8 <__ieee754_pow+0x748>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fddc 	bl	80002cc <__adddf3>
 800b714:	4622      	mov	r2, r4
 800b716:	462b      	mov	r3, r5
 800b718:	f7f4 ff8e 	bl	8000638 <__aeabi_dmul>
 800b71c:	a374      	add	r3, pc, #464	@ (adr r3, 800b8f0 <__ieee754_pow+0x750>)
 800b71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b722:	f7f4 fdd3 	bl	80002cc <__adddf3>
 800b726:	4622      	mov	r2, r4
 800b728:	462b      	mov	r3, r5
 800b72a:	f7f4 ff85 	bl	8000638 <__aeabi_dmul>
 800b72e:	a372      	add	r3, pc, #456	@ (adr r3, 800b8f8 <__ieee754_pow+0x758>)
 800b730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b734:	f7f4 fdca 	bl	80002cc <__adddf3>
 800b738:	4622      	mov	r2, r4
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	462b      	mov	r3, r5
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	f7f4 ff78 	bl	8000638 <__aeabi_dmul>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4630      	mov	r0, r6
 800b74e:	4639      	mov	r1, r7
 800b750:	f7f4 ff72 	bl	8000638 <__aeabi_dmul>
 800b754:	465a      	mov	r2, fp
 800b756:	4604      	mov	r4, r0
 800b758:	460d      	mov	r5, r1
 800b75a:	464b      	mov	r3, r9
 800b75c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b760:	f7f4 fdb4 	bl	80002cc <__adddf3>
 800b764:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b768:	f7f4 ff66 	bl	8000638 <__aeabi_dmul>
 800b76c:	4622      	mov	r2, r4
 800b76e:	462b      	mov	r3, r5
 800b770:	f7f4 fdac 	bl	80002cc <__adddf3>
 800b774:	465a      	mov	r2, fp
 800b776:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b77a:	464b      	mov	r3, r9
 800b77c:	4658      	mov	r0, fp
 800b77e:	4649      	mov	r1, r9
 800b780:	f7f4 ff5a 	bl	8000638 <__aeabi_dmul>
 800b784:	4b6a      	ldr	r3, [pc, #424]	@ (800b930 <__ieee754_pow+0x790>)
 800b786:	2200      	movs	r2, #0
 800b788:	4606      	mov	r6, r0
 800b78a:	460f      	mov	r7, r1
 800b78c:	f7f4 fd9e 	bl	80002cc <__adddf3>
 800b790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b794:	f7f4 fd9a 	bl	80002cc <__adddf3>
 800b798:	46d8      	mov	r8, fp
 800b79a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b79e:	460d      	mov	r5, r1
 800b7a0:	465a      	mov	r2, fp
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4640      	mov	r0, r8
 800b7a6:	4649      	mov	r1, r9
 800b7a8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b7ac:	f7f4 ff44 	bl	8000638 <__aeabi_dmul>
 800b7b0:	465c      	mov	r4, fp
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	4b5e      	ldr	r3, [pc, #376]	@ (800b930 <__ieee754_pow+0x790>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	4629      	mov	r1, r5
 800b7be:	f7f4 fd83 	bl	80002c8 <__aeabi_dsub>
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	f7f4 fd7f 	bl	80002c8 <__aeabi_dsub>
 800b7ca:	4602      	mov	r2, r0
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7d2:	f7f4 fd79 	bl	80002c8 <__aeabi_dsub>
 800b7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7da:	f7f4 ff2d 	bl	8000638 <__aeabi_dmul>
 800b7de:	4622      	mov	r2, r4
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	460f      	mov	r7, r1
 800b7e4:	462b      	mov	r3, r5
 800b7e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ea:	f7f4 ff25 	bl	8000638 <__aeabi_dmul>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f4 fd69 	bl	80002cc <__adddf3>
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	460f      	mov	r7, r1
 800b7fe:	4602      	mov	r2, r0
 800b800:	460b      	mov	r3, r1
 800b802:	4640      	mov	r0, r8
 800b804:	4649      	mov	r1, r9
 800b806:	f7f4 fd61 	bl	80002cc <__adddf3>
 800b80a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b80e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b900 <__ieee754_pow+0x760>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	4658      	mov	r0, fp
 800b816:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b81a:	460d      	mov	r5, r1
 800b81c:	f7f4 ff0c 	bl	8000638 <__aeabi_dmul>
 800b820:	465c      	mov	r4, fp
 800b822:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b826:	4642      	mov	r2, r8
 800b828:	464b      	mov	r3, r9
 800b82a:	4620      	mov	r0, r4
 800b82c:	4629      	mov	r1, r5
 800b82e:	f7f4 fd4b 	bl	80002c8 <__aeabi_dsub>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4630      	mov	r0, r6
 800b838:	4639      	mov	r1, r7
 800b83a:	f7f4 fd45 	bl	80002c8 <__aeabi_dsub>
 800b83e:	a332      	add	r3, pc, #200	@ (adr r3, 800b908 <__ieee754_pow+0x768>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f4 fef8 	bl	8000638 <__aeabi_dmul>
 800b848:	a331      	add	r3, pc, #196	@ (adr r3, 800b910 <__ieee754_pow+0x770>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	4606      	mov	r6, r0
 800b850:	460f      	mov	r7, r1
 800b852:	4620      	mov	r0, r4
 800b854:	4629      	mov	r1, r5
 800b856:	f7f4 feef 	bl	8000638 <__aeabi_dmul>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4630      	mov	r0, r6
 800b860:	4639      	mov	r1, r7
 800b862:	f7f4 fd33 	bl	80002cc <__adddf3>
 800b866:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b868:	4b32      	ldr	r3, [pc, #200]	@ (800b934 <__ieee754_pow+0x794>)
 800b86a:	4413      	add	r3, r2
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f7f4 fd2c 	bl	80002cc <__adddf3>
 800b874:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b878:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b87a:	f7f4 fe73 	bl	8000564 <__aeabi_i2d>
 800b87e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b880:	4b2d      	ldr	r3, [pc, #180]	@ (800b938 <__ieee754_pow+0x798>)
 800b882:	4413      	add	r3, r2
 800b884:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b888:	4606      	mov	r6, r0
 800b88a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b88e:	460f      	mov	r7, r1
 800b890:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b894:	f7f4 fd1a 	bl	80002cc <__adddf3>
 800b898:	4642      	mov	r2, r8
 800b89a:	464b      	mov	r3, r9
 800b89c:	f7f4 fd16 	bl	80002cc <__adddf3>
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	463b      	mov	r3, r7
 800b8a4:	f7f4 fd12 	bl	80002cc <__adddf3>
 800b8a8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	463b      	mov	r3, r7
 800b8b0:	4658      	mov	r0, fp
 800b8b2:	460d      	mov	r5, r1
 800b8b4:	f7f4 fd08 	bl	80002c8 <__aeabi_dsub>
 800b8b8:	4642      	mov	r2, r8
 800b8ba:	464b      	mov	r3, r9
 800b8bc:	f7f4 fd04 	bl	80002c8 <__aeabi_dsub>
 800b8c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8c4:	f7f4 fd00 	bl	80002c8 <__aeabi_dsub>
 800b8c8:	465c      	mov	r4, fp
 800b8ca:	4602      	mov	r2, r0
 800b8cc:	e036      	b.n	800b93c <__ieee754_pow+0x79c>
 800b8ce:	bf00      	nop
 800b8d0:	4a454eef 	.word	0x4a454eef
 800b8d4:	3fca7e28 	.word	0x3fca7e28
 800b8d8:	93c9db65 	.word	0x93c9db65
 800b8dc:	3fcd864a 	.word	0x3fcd864a
 800b8e0:	a91d4101 	.word	0xa91d4101
 800b8e4:	3fd17460 	.word	0x3fd17460
 800b8e8:	518f264d 	.word	0x518f264d
 800b8ec:	3fd55555 	.word	0x3fd55555
 800b8f0:	db6fabff 	.word	0xdb6fabff
 800b8f4:	3fdb6db6 	.word	0x3fdb6db6
 800b8f8:	33333303 	.word	0x33333303
 800b8fc:	3fe33333 	.word	0x3fe33333
 800b900:	e0000000 	.word	0xe0000000
 800b904:	3feec709 	.word	0x3feec709
 800b908:	dc3a03fd 	.word	0xdc3a03fd
 800b90c:	3feec709 	.word	0x3feec709
 800b910:	145b01f5 	.word	0x145b01f5
 800b914:	be3e2fe0 	.word	0xbe3e2fe0
 800b918:	7ff00000 	.word	0x7ff00000
 800b91c:	43400000 	.word	0x43400000
 800b920:	0003988e 	.word	0x0003988e
 800b924:	000bb679 	.word	0x000bb679
 800b928:	0800c560 	.word	0x0800c560
 800b92c:	3ff00000 	.word	0x3ff00000
 800b930:	40080000 	.word	0x40080000
 800b934:	0800c540 	.word	0x0800c540
 800b938:	0800c550 	.word	0x0800c550
 800b93c:	460b      	mov	r3, r1
 800b93e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b942:	e5d7      	b.n	800b4f4 <__ieee754_pow+0x354>
 800b944:	f04f 0a01 	mov.w	sl, #1
 800b948:	e65e      	b.n	800b608 <__ieee754_pow+0x468>
 800b94a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800bc1c <__ieee754_pow+0xa7c>)
 800b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	f7f4 fcba 	bl	80002cc <__adddf3>
 800b958:	4642      	mov	r2, r8
 800b95a:	e9cd 0100 	strd	r0, r1, [sp]
 800b95e:	464b      	mov	r3, r9
 800b960:	4620      	mov	r0, r4
 800b962:	4629      	mov	r1, r5
 800b964:	f7f4 fcb0 	bl	80002c8 <__aeabi_dsub>
 800b968:	4602      	mov	r2, r0
 800b96a:	460b      	mov	r3, r1
 800b96c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b970:	f7f5 f8f2 	bl	8000b58 <__aeabi_dcmpgt>
 800b974:	2800      	cmp	r0, #0
 800b976:	f47f ae00 	bne.w	800b57a <__ieee754_pow+0x3da>
 800b97a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b97e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b982:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b986:	fa43 fa0a 	asr.w	sl, r3, sl
 800b98a:	44da      	add	sl, fp
 800b98c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b990:	489d      	ldr	r0, [pc, #628]	@ (800bc08 <__ieee754_pow+0xa68>)
 800b992:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b996:	4108      	asrs	r0, r1
 800b998:	ea00 030a 	and.w	r3, r0, sl
 800b99c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b9a0:	f1c1 0114 	rsb	r1, r1, #20
 800b9a4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b9a8:	fa4a fa01 	asr.w	sl, sl, r1
 800b9ac:	f1bb 0f00 	cmp.w	fp, #0
 800b9b0:	4640      	mov	r0, r8
 800b9b2:	4649      	mov	r1, r9
 800b9b4:	f04f 0200 	mov.w	r2, #0
 800b9b8:	bfb8      	it	lt
 800b9ba:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9be:	f7f4 fc83 	bl	80002c8 <__aeabi_dsub>
 800b9c2:	4680      	mov	r8, r0
 800b9c4:	4689      	mov	r9, r1
 800b9c6:	4632      	mov	r2, r6
 800b9c8:	463b      	mov	r3, r7
 800b9ca:	4640      	mov	r0, r8
 800b9cc:	4649      	mov	r1, r9
 800b9ce:	f7f4 fc7d 	bl	80002cc <__adddf3>
 800b9d2:	2400      	movs	r4, #0
 800b9d4:	a37c      	add	r3, pc, #496	@ (adr r3, 800bbc8 <__ieee754_pow+0xa28>)
 800b9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9da:	4620      	mov	r0, r4
 800b9dc:	460d      	mov	r5, r1
 800b9de:	f7f4 fe2b 	bl	8000638 <__aeabi_dmul>
 800b9e2:	4642      	mov	r2, r8
 800b9e4:	e9cd 0100 	strd	r0, r1, [sp]
 800b9e8:	464b      	mov	r3, r9
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7f4 fc6b 	bl	80002c8 <__aeabi_dsub>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	460b      	mov	r3, r1
 800b9f6:	4630      	mov	r0, r6
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f4 fc65 	bl	80002c8 <__aeabi_dsub>
 800b9fe:	a374      	add	r3, pc, #464	@ (adr r3, 800bbd0 <__ieee754_pow+0xa30>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	f7f4 fe18 	bl	8000638 <__aeabi_dmul>
 800ba08:	a373      	add	r3, pc, #460	@ (adr r3, 800bbd8 <__ieee754_pow+0xa38>)
 800ba0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0e:	4680      	mov	r8, r0
 800ba10:	4689      	mov	r9, r1
 800ba12:	4620      	mov	r0, r4
 800ba14:	4629      	mov	r1, r5
 800ba16:	f7f4 fe0f 	bl	8000638 <__aeabi_dmul>
 800ba1a:	4602      	mov	r2, r0
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	4640      	mov	r0, r8
 800ba20:	4649      	mov	r1, r9
 800ba22:	f7f4 fc53 	bl	80002cc <__adddf3>
 800ba26:	4604      	mov	r4, r0
 800ba28:	460d      	mov	r5, r1
 800ba2a:	4602      	mov	r2, r0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba32:	f7f4 fc4b 	bl	80002cc <__adddf3>
 800ba36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba3a:	4680      	mov	r8, r0
 800ba3c:	4689      	mov	r9, r1
 800ba3e:	f7f4 fc43 	bl	80002c8 <__aeabi_dsub>
 800ba42:	4602      	mov	r2, r0
 800ba44:	460b      	mov	r3, r1
 800ba46:	4620      	mov	r0, r4
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f4 fc3d 	bl	80002c8 <__aeabi_dsub>
 800ba4e:	4642      	mov	r2, r8
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	464b      	mov	r3, r9
 800ba56:	4640      	mov	r0, r8
 800ba58:	4649      	mov	r1, r9
 800ba5a:	f7f4 fded 	bl	8000638 <__aeabi_dmul>
 800ba5e:	a360      	add	r3, pc, #384	@ (adr r3, 800bbe0 <__ieee754_pow+0xa40>)
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	4604      	mov	r4, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	f7f4 fde6 	bl	8000638 <__aeabi_dmul>
 800ba6c:	a35e      	add	r3, pc, #376	@ (adr r3, 800bbe8 <__ieee754_pow+0xa48>)
 800ba6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba72:	f7f4 fc29 	bl	80002c8 <__aeabi_dsub>
 800ba76:	4622      	mov	r2, r4
 800ba78:	462b      	mov	r3, r5
 800ba7a:	f7f4 fddd 	bl	8000638 <__aeabi_dmul>
 800ba7e:	a35c      	add	r3, pc, #368	@ (adr r3, 800bbf0 <__ieee754_pow+0xa50>)
 800ba80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba84:	f7f4 fc22 	bl	80002cc <__adddf3>
 800ba88:	4622      	mov	r2, r4
 800ba8a:	462b      	mov	r3, r5
 800ba8c:	f7f4 fdd4 	bl	8000638 <__aeabi_dmul>
 800ba90:	a359      	add	r3, pc, #356	@ (adr r3, 800bbf8 <__ieee754_pow+0xa58>)
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f7f4 fc17 	bl	80002c8 <__aeabi_dsub>
 800ba9a:	4622      	mov	r2, r4
 800ba9c:	462b      	mov	r3, r5
 800ba9e:	f7f4 fdcb 	bl	8000638 <__aeabi_dmul>
 800baa2:	a357      	add	r3, pc, #348	@ (adr r3, 800bc00 <__ieee754_pow+0xa60>)
 800baa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa8:	f7f4 fc10 	bl	80002cc <__adddf3>
 800baac:	4622      	mov	r2, r4
 800baae:	462b      	mov	r3, r5
 800bab0:	f7f4 fdc2 	bl	8000638 <__aeabi_dmul>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	4640      	mov	r0, r8
 800baba:	4649      	mov	r1, r9
 800babc:	f7f4 fc04 	bl	80002c8 <__aeabi_dsub>
 800bac0:	4604      	mov	r4, r0
 800bac2:	460d      	mov	r5, r1
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	4640      	mov	r0, r8
 800baca:	4649      	mov	r1, r9
 800bacc:	f7f4 fdb4 	bl	8000638 <__aeabi_dmul>
 800bad0:	2200      	movs	r2, #0
 800bad2:	e9cd 0100 	strd	r0, r1, [sp]
 800bad6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bada:	4620      	mov	r0, r4
 800badc:	4629      	mov	r1, r5
 800bade:	f7f4 fbf3 	bl	80002c8 <__aeabi_dsub>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800baea:	f7f4 fecf 	bl	800088c <__aeabi_ddiv>
 800baee:	4632      	mov	r2, r6
 800baf0:	4604      	mov	r4, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	463b      	mov	r3, r7
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	f7f4 fd9d 	bl	8000638 <__aeabi_dmul>
 800bafe:	4632      	mov	r2, r6
 800bb00:	463b      	mov	r3, r7
 800bb02:	f7f4 fbe3 	bl	80002cc <__adddf3>
 800bb06:	4602      	mov	r2, r0
 800bb08:	460b      	mov	r3, r1
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fbdb 	bl	80002c8 <__aeabi_dsub>
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	f7f4 fbd7 	bl	80002c8 <__aeabi_dsub>
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	493b      	ldr	r1, [pc, #236]	@ (800bc0c <__ieee754_pow+0xa6c>)
 800bb20:	2000      	movs	r0, #0
 800bb22:	f7f4 fbd1 	bl	80002c8 <__aeabi_dsub>
 800bb26:	ec41 0b10 	vmov	d0, r0, r1
 800bb2a:	ee10 3a90 	vmov	r3, s1
 800bb2e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb36:	da30      	bge.n	800bb9a <__ieee754_pow+0x9fa>
 800bb38:	4650      	mov	r0, sl
 800bb3a:	f000 f87d 	bl	800bc38 <scalbn>
 800bb3e:	ec51 0b10 	vmov	r0, r1, d0
 800bb42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb46:	f7ff bbd2 	b.w	800b2ee <__ieee754_pow+0x14e>
 800bb4a:	4c31      	ldr	r4, [pc, #196]	@ (800bc10 <__ieee754_pow+0xa70>)
 800bb4c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	d91a      	bls.n	800bb8a <__ieee754_pow+0x9ea>
 800bb54:	4b2f      	ldr	r3, [pc, #188]	@ (800bc14 <__ieee754_pow+0xa74>)
 800bb56:	440b      	add	r3, r1
 800bb58:	4303      	orrs	r3, r0
 800bb5a:	d009      	beq.n	800bb70 <__ieee754_pow+0x9d0>
 800bb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb60:	2200      	movs	r2, #0
 800bb62:	2300      	movs	r3, #0
 800bb64:	f7f4 ffda 	bl	8000b1c <__aeabi_dcmplt>
 800bb68:	3800      	subs	r0, #0
 800bb6a:	bf18      	it	ne
 800bb6c:	2001      	movne	r0, #1
 800bb6e:	e42b      	b.n	800b3c8 <__ieee754_pow+0x228>
 800bb70:	4642      	mov	r2, r8
 800bb72:	464b      	mov	r3, r9
 800bb74:	f7f4 fba8 	bl	80002c8 <__aeabi_dsub>
 800bb78:	4632      	mov	r2, r6
 800bb7a:	463b      	mov	r3, r7
 800bb7c:	f7f4 ffe2 	bl	8000b44 <__aeabi_dcmpge>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d1eb      	bne.n	800bb5c <__ieee754_pow+0x9bc>
 800bb84:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800bc24 <__ieee754_pow+0xa84>
 800bb88:	e6f7      	b.n	800b97a <__ieee754_pow+0x7da>
 800bb8a:	469a      	mov	sl, r3
 800bb8c:	4b22      	ldr	r3, [pc, #136]	@ (800bc18 <__ieee754_pow+0xa78>)
 800bb8e:	459a      	cmp	sl, r3
 800bb90:	f63f aef3 	bhi.w	800b97a <__ieee754_pow+0x7da>
 800bb94:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bb98:	e715      	b.n	800b9c6 <__ieee754_pow+0x826>
 800bb9a:	ec51 0b10 	vmov	r0, r1, d0
 800bb9e:	4619      	mov	r1, r3
 800bba0:	e7cf      	b.n	800bb42 <__ieee754_pow+0x9a2>
 800bba2:	491a      	ldr	r1, [pc, #104]	@ (800bc0c <__ieee754_pow+0xa6c>)
 800bba4:	2000      	movs	r0, #0
 800bba6:	f7ff bb18 	b.w	800b1da <__ieee754_pow+0x3a>
 800bbaa:	2000      	movs	r0, #0
 800bbac:	2100      	movs	r1, #0
 800bbae:	f7ff bb14 	b.w	800b1da <__ieee754_pow+0x3a>
 800bbb2:	4630      	mov	r0, r6
 800bbb4:	4639      	mov	r1, r7
 800bbb6:	f7ff bb10 	b.w	800b1da <__ieee754_pow+0x3a>
 800bbba:	460c      	mov	r4, r1
 800bbbc:	f7ff bb5e 	b.w	800b27c <__ieee754_pow+0xdc>
 800bbc0:	2400      	movs	r4, #0
 800bbc2:	f7ff bb49 	b.w	800b258 <__ieee754_pow+0xb8>
 800bbc6:	bf00      	nop
 800bbc8:	00000000 	.word	0x00000000
 800bbcc:	3fe62e43 	.word	0x3fe62e43
 800bbd0:	fefa39ef 	.word	0xfefa39ef
 800bbd4:	3fe62e42 	.word	0x3fe62e42
 800bbd8:	0ca86c39 	.word	0x0ca86c39
 800bbdc:	be205c61 	.word	0xbe205c61
 800bbe0:	72bea4d0 	.word	0x72bea4d0
 800bbe4:	3e663769 	.word	0x3e663769
 800bbe8:	c5d26bf1 	.word	0xc5d26bf1
 800bbec:	3ebbbd41 	.word	0x3ebbbd41
 800bbf0:	af25de2c 	.word	0xaf25de2c
 800bbf4:	3f11566a 	.word	0x3f11566a
 800bbf8:	16bebd93 	.word	0x16bebd93
 800bbfc:	3f66c16c 	.word	0x3f66c16c
 800bc00:	5555553e 	.word	0x5555553e
 800bc04:	3fc55555 	.word	0x3fc55555
 800bc08:	fff00000 	.word	0xfff00000
 800bc0c:	3ff00000 	.word	0x3ff00000
 800bc10:	4090cbff 	.word	0x4090cbff
 800bc14:	3f6f3400 	.word	0x3f6f3400
 800bc18:	3fe00000 	.word	0x3fe00000
 800bc1c:	652b82fe 	.word	0x652b82fe
 800bc20:	3c971547 	.word	0x3c971547
 800bc24:	4090cc00 	.word	0x4090cc00

0800bc28 <fabs>:
 800bc28:	ec51 0b10 	vmov	r0, r1, d0
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bc32:	ec43 2b10 	vmov	d0, r2, r3
 800bc36:	4770      	bx	lr

0800bc38 <scalbn>:
 800bc38:	b570      	push	{r4, r5, r6, lr}
 800bc3a:	ec55 4b10 	vmov	r4, r5, d0
 800bc3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc42:	4606      	mov	r6, r0
 800bc44:	462b      	mov	r3, r5
 800bc46:	b991      	cbnz	r1, 800bc6e <scalbn+0x36>
 800bc48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bc4c:	4323      	orrs	r3, r4
 800bc4e:	d03d      	beq.n	800bccc <scalbn+0x94>
 800bc50:	4b35      	ldr	r3, [pc, #212]	@ (800bd28 <scalbn+0xf0>)
 800bc52:	4620      	mov	r0, r4
 800bc54:	4629      	mov	r1, r5
 800bc56:	2200      	movs	r2, #0
 800bc58:	f7f4 fcee 	bl	8000638 <__aeabi_dmul>
 800bc5c:	4b33      	ldr	r3, [pc, #204]	@ (800bd2c <scalbn+0xf4>)
 800bc5e:	429e      	cmp	r6, r3
 800bc60:	4604      	mov	r4, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	da0f      	bge.n	800bc86 <scalbn+0x4e>
 800bc66:	a328      	add	r3, pc, #160	@ (adr r3, 800bd08 <scalbn+0xd0>)
 800bc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6c:	e01e      	b.n	800bcac <scalbn+0x74>
 800bc6e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bc72:	4291      	cmp	r1, r2
 800bc74:	d10b      	bne.n	800bc8e <scalbn+0x56>
 800bc76:	4622      	mov	r2, r4
 800bc78:	4620      	mov	r0, r4
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	f7f4 fb26 	bl	80002cc <__adddf3>
 800bc80:	4604      	mov	r4, r0
 800bc82:	460d      	mov	r5, r1
 800bc84:	e022      	b.n	800bccc <scalbn+0x94>
 800bc86:	460b      	mov	r3, r1
 800bc88:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc8c:	3936      	subs	r1, #54	@ 0x36
 800bc8e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bc92:	4296      	cmp	r6, r2
 800bc94:	dd0d      	ble.n	800bcb2 <scalbn+0x7a>
 800bc96:	2d00      	cmp	r5, #0
 800bc98:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd10 <scalbn+0xd8>)
 800bc9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9e:	da02      	bge.n	800bca6 <scalbn+0x6e>
 800bca0:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd18 <scalbn+0xe0>)
 800bca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca6:	a31a      	add	r3, pc, #104	@ (adr r3, 800bd10 <scalbn+0xd8>)
 800bca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcac:	f7f4 fcc4 	bl	8000638 <__aeabi_dmul>
 800bcb0:	e7e6      	b.n	800bc80 <scalbn+0x48>
 800bcb2:	1872      	adds	r2, r6, r1
 800bcb4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bcb8:	428a      	cmp	r2, r1
 800bcba:	dcec      	bgt.n	800bc96 <scalbn+0x5e>
 800bcbc:	2a00      	cmp	r2, #0
 800bcbe:	dd08      	ble.n	800bcd2 <scalbn+0x9a>
 800bcc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bcc4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bcc8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bccc:	ec45 4b10 	vmov	d0, r4, r5
 800bcd0:	bd70      	pop	{r4, r5, r6, pc}
 800bcd2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bcd6:	da08      	bge.n	800bcea <scalbn+0xb2>
 800bcd8:	2d00      	cmp	r5, #0
 800bcda:	a10b      	add	r1, pc, #44	@ (adr r1, 800bd08 <scalbn+0xd0>)
 800bcdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce0:	dac1      	bge.n	800bc66 <scalbn+0x2e>
 800bce2:	a10f      	add	r1, pc, #60	@ (adr r1, 800bd20 <scalbn+0xe8>)
 800bce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce8:	e7bd      	b.n	800bc66 <scalbn+0x2e>
 800bcea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bcee:	3236      	adds	r2, #54	@ 0x36
 800bcf0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bcf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	4b0d      	ldr	r3, [pc, #52]	@ (800bd30 <scalbn+0xf8>)
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	2200      	movs	r2, #0
 800bd00:	e7d4      	b.n	800bcac <scalbn+0x74>
 800bd02:	bf00      	nop
 800bd04:	f3af 8000 	nop.w
 800bd08:	c2f8f359 	.word	0xc2f8f359
 800bd0c:	01a56e1f 	.word	0x01a56e1f
 800bd10:	8800759c 	.word	0x8800759c
 800bd14:	7e37e43c 	.word	0x7e37e43c
 800bd18:	8800759c 	.word	0x8800759c
 800bd1c:	fe37e43c 	.word	0xfe37e43c
 800bd20:	c2f8f359 	.word	0xc2f8f359
 800bd24:	81a56e1f 	.word	0x81a56e1f
 800bd28:	43500000 	.word	0x43500000
 800bd2c:	ffff3cb0 	.word	0xffff3cb0
 800bd30:	3c900000 	.word	0x3c900000

0800bd34 <with_errno>:
 800bd34:	b510      	push	{r4, lr}
 800bd36:	ed2d 8b02 	vpush	{d8}
 800bd3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bd3e:	eef0 8a60 	vmov.f32	s17, s1
 800bd42:	4604      	mov	r4, r0
 800bd44:	f7fd f938 	bl	8008fb8 <__errno>
 800bd48:	eeb0 0a48 	vmov.f32	s0, s16
 800bd4c:	eef0 0a68 	vmov.f32	s1, s17
 800bd50:	ecbd 8b02 	vpop	{d8}
 800bd54:	6004      	str	r4, [r0, #0]
 800bd56:	bd10      	pop	{r4, pc}

0800bd58 <xflow>:
 800bd58:	4603      	mov	r3, r0
 800bd5a:	b507      	push	{r0, r1, r2, lr}
 800bd5c:	ec51 0b10 	vmov	r0, r1, d0
 800bd60:	b183      	cbz	r3, 800bd84 <xflow+0x2c>
 800bd62:	4602      	mov	r2, r0
 800bd64:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bd68:	e9cd 2300 	strd	r2, r3, [sp]
 800bd6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bd70:	f7f4 fc62 	bl	8000638 <__aeabi_dmul>
 800bd74:	ec41 0b10 	vmov	d0, r0, r1
 800bd78:	2022      	movs	r0, #34	@ 0x22
 800bd7a:	b003      	add	sp, #12
 800bd7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd80:	f7ff bfd8 	b.w	800bd34 <with_errno>
 800bd84:	4602      	mov	r2, r0
 800bd86:	460b      	mov	r3, r1
 800bd88:	e7ee      	b.n	800bd68 <xflow+0x10>
 800bd8a:	0000      	movs	r0, r0
 800bd8c:	0000      	movs	r0, r0
	...

0800bd90 <__math_uflow>:
 800bd90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bd98 <__math_uflow+0x8>
 800bd94:	f7ff bfe0 	b.w	800bd58 <xflow>
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	10000000 	.word	0x10000000

0800bda0 <__math_oflow>:
 800bda0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bda8 <__math_oflow+0x8>
 800bda4:	f7ff bfd8 	b.w	800bd58 <xflow>
 800bda8:	00000000 	.word	0x00000000
 800bdac:	70000000 	.word	0x70000000

0800bdb0 <__ieee754_sqrt>:
 800bdb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb4:	4a68      	ldr	r2, [pc, #416]	@ (800bf58 <__ieee754_sqrt+0x1a8>)
 800bdb6:	ec55 4b10 	vmov	r4, r5, d0
 800bdba:	43aa      	bics	r2, r5
 800bdbc:	462b      	mov	r3, r5
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	d110      	bne.n	800bde4 <__ieee754_sqrt+0x34>
 800bdc2:	4622      	mov	r2, r4
 800bdc4:	4620      	mov	r0, r4
 800bdc6:	4629      	mov	r1, r5
 800bdc8:	f7f4 fc36 	bl	8000638 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f7f4 fa7a 	bl	80002cc <__adddf3>
 800bdd8:	4604      	mov	r4, r0
 800bdda:	460d      	mov	r5, r1
 800bddc:	ec45 4b10 	vmov	d0, r4, r5
 800bde0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bde4:	2d00      	cmp	r5, #0
 800bde6:	dc0e      	bgt.n	800be06 <__ieee754_sqrt+0x56>
 800bde8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800bdec:	4322      	orrs	r2, r4
 800bdee:	d0f5      	beq.n	800bddc <__ieee754_sqrt+0x2c>
 800bdf0:	b19d      	cbz	r5, 800be1a <__ieee754_sqrt+0x6a>
 800bdf2:	4622      	mov	r2, r4
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fa66 	bl	80002c8 <__aeabi_dsub>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	f7f4 fd44 	bl	800088c <__aeabi_ddiv>
 800be04:	e7e8      	b.n	800bdd8 <__ieee754_sqrt+0x28>
 800be06:	152a      	asrs	r2, r5, #20
 800be08:	d115      	bne.n	800be36 <__ieee754_sqrt+0x86>
 800be0a:	2000      	movs	r0, #0
 800be0c:	e009      	b.n	800be22 <__ieee754_sqrt+0x72>
 800be0e:	0acb      	lsrs	r3, r1, #11
 800be10:	3a15      	subs	r2, #21
 800be12:	0549      	lsls	r1, r1, #21
 800be14:	2b00      	cmp	r3, #0
 800be16:	d0fa      	beq.n	800be0e <__ieee754_sqrt+0x5e>
 800be18:	e7f7      	b.n	800be0a <__ieee754_sqrt+0x5a>
 800be1a:	462a      	mov	r2, r5
 800be1c:	e7fa      	b.n	800be14 <__ieee754_sqrt+0x64>
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	3001      	adds	r0, #1
 800be22:	02dc      	lsls	r4, r3, #11
 800be24:	d5fb      	bpl.n	800be1e <__ieee754_sqrt+0x6e>
 800be26:	1e44      	subs	r4, r0, #1
 800be28:	1b12      	subs	r2, r2, r4
 800be2a:	f1c0 0420 	rsb	r4, r0, #32
 800be2e:	fa21 f404 	lsr.w	r4, r1, r4
 800be32:	4323      	orrs	r3, r4
 800be34:	4081      	lsls	r1, r0
 800be36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be3a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800be3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be42:	07d2      	lsls	r2, r2, #31
 800be44:	bf5c      	itt	pl
 800be46:	005b      	lslpl	r3, r3, #1
 800be48:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800be4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be50:	bf58      	it	pl
 800be52:	0049      	lslpl	r1, r1, #1
 800be54:	2600      	movs	r6, #0
 800be56:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800be5a:	106d      	asrs	r5, r5, #1
 800be5c:	0049      	lsls	r1, r1, #1
 800be5e:	2016      	movs	r0, #22
 800be60:	4632      	mov	r2, r6
 800be62:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800be66:	1917      	adds	r7, r2, r4
 800be68:	429f      	cmp	r7, r3
 800be6a:	bfde      	ittt	le
 800be6c:	193a      	addle	r2, r7, r4
 800be6e:	1bdb      	suble	r3, r3, r7
 800be70:	1936      	addle	r6, r6, r4
 800be72:	0fcf      	lsrs	r7, r1, #31
 800be74:	3801      	subs	r0, #1
 800be76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800be7a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800be7e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800be82:	d1f0      	bne.n	800be66 <__ieee754_sqrt+0xb6>
 800be84:	4604      	mov	r4, r0
 800be86:	2720      	movs	r7, #32
 800be88:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800be8c:	429a      	cmp	r2, r3
 800be8e:	eb00 0e0c 	add.w	lr, r0, ip
 800be92:	db02      	blt.n	800be9a <__ieee754_sqrt+0xea>
 800be94:	d113      	bne.n	800bebe <__ieee754_sqrt+0x10e>
 800be96:	458e      	cmp	lr, r1
 800be98:	d811      	bhi.n	800bebe <__ieee754_sqrt+0x10e>
 800be9a:	f1be 0f00 	cmp.w	lr, #0
 800be9e:	eb0e 000c 	add.w	r0, lr, ip
 800bea2:	da42      	bge.n	800bf2a <__ieee754_sqrt+0x17a>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	db40      	blt.n	800bf2a <__ieee754_sqrt+0x17a>
 800bea8:	f102 0801 	add.w	r8, r2, #1
 800beac:	1a9b      	subs	r3, r3, r2
 800beae:	458e      	cmp	lr, r1
 800beb0:	bf88      	it	hi
 800beb2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800beb6:	eba1 010e 	sub.w	r1, r1, lr
 800beba:	4464      	add	r4, ip
 800bebc:	4642      	mov	r2, r8
 800bebe:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800bec2:	3f01      	subs	r7, #1
 800bec4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800bec8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800becc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800bed0:	d1dc      	bne.n	800be8c <__ieee754_sqrt+0xdc>
 800bed2:	4319      	orrs	r1, r3
 800bed4:	d01b      	beq.n	800bf0e <__ieee754_sqrt+0x15e>
 800bed6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800bf5c <__ieee754_sqrt+0x1ac>
 800beda:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800bf60 <__ieee754_sqrt+0x1b0>
 800bede:	e9da 0100 	ldrd	r0, r1, [sl]
 800bee2:	e9db 2300 	ldrd	r2, r3, [fp]
 800bee6:	f7f4 f9ef 	bl	80002c8 <__aeabi_dsub>
 800beea:	e9da 8900 	ldrd	r8, r9, [sl]
 800beee:	4602      	mov	r2, r0
 800bef0:	460b      	mov	r3, r1
 800bef2:	4640      	mov	r0, r8
 800bef4:	4649      	mov	r1, r9
 800bef6:	f7f4 fe1b 	bl	8000b30 <__aeabi_dcmple>
 800befa:	b140      	cbz	r0, 800bf0e <__ieee754_sqrt+0x15e>
 800befc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800bf00:	e9da 0100 	ldrd	r0, r1, [sl]
 800bf04:	e9db 2300 	ldrd	r2, r3, [fp]
 800bf08:	d111      	bne.n	800bf2e <__ieee754_sqrt+0x17e>
 800bf0a:	3601      	adds	r6, #1
 800bf0c:	463c      	mov	r4, r7
 800bf0e:	1072      	asrs	r2, r6, #1
 800bf10:	0863      	lsrs	r3, r4, #1
 800bf12:	07f1      	lsls	r1, r6, #31
 800bf14:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800bf18:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800bf1c:	bf48      	it	mi
 800bf1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800bf22:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800bf26:	4618      	mov	r0, r3
 800bf28:	e756      	b.n	800bdd8 <__ieee754_sqrt+0x28>
 800bf2a:	4690      	mov	r8, r2
 800bf2c:	e7be      	b.n	800beac <__ieee754_sqrt+0xfc>
 800bf2e:	f7f4 f9cd 	bl	80002cc <__adddf3>
 800bf32:	e9da 8900 	ldrd	r8, r9, [sl]
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	4640      	mov	r0, r8
 800bf3c:	4649      	mov	r1, r9
 800bf3e:	f7f4 fded 	bl	8000b1c <__aeabi_dcmplt>
 800bf42:	b120      	cbz	r0, 800bf4e <__ieee754_sqrt+0x19e>
 800bf44:	1ca0      	adds	r0, r4, #2
 800bf46:	bf08      	it	eq
 800bf48:	3601      	addeq	r6, #1
 800bf4a:	3402      	adds	r4, #2
 800bf4c:	e7df      	b.n	800bf0e <__ieee754_sqrt+0x15e>
 800bf4e:	1c63      	adds	r3, r4, #1
 800bf50:	f023 0401 	bic.w	r4, r3, #1
 800bf54:	e7db      	b.n	800bf0e <__ieee754_sqrt+0x15e>
 800bf56:	bf00      	nop
 800bf58:	7ff00000 	.word	0x7ff00000
 800bf5c:	20005050 	.word	0x20005050
 800bf60:	20005048 	.word	0x20005048

0800bf64 <_init>:
 800bf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf66:	bf00      	nop
 800bf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf6a:	bc08      	pop	{r3}
 800bf6c:	469e      	mov	lr, r3
 800bf6e:	4770      	bx	lr

0800bf70 <_fini>:
 800bf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf72:	bf00      	nop
 800bf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf76:	bc08      	pop	{r3}
 800bf78:	469e      	mov	lr, r3
 800bf7a:	4770      	bx	lr
